// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: amtpap_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_amtpap_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_amtpap_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_amtpap_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_amtpap_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_amtpap_5fmsg_2eproto;
namespace amtpap {
class AlarmClearRespV1;
class AlarmClearRespV1DefaultTypeInternal;
extern AlarmClearRespV1DefaultTypeInternal _AlarmClearRespV1_default_instance_;
class AlarmClearV1;
class AlarmClearV1DefaultTypeInternal;
extern AlarmClearV1DefaultTypeInternal _AlarmClearV1_default_instance_;
class AlarmRespV1;
class AlarmRespV1DefaultTypeInternal;
extern AlarmRespV1DefaultTypeInternal _AlarmRespV1_default_instance_;
class AlarmV1;
class AlarmV1DefaultTypeInternal;
extern AlarmV1DefaultTypeInternal _AlarmV1_default_instance_;
class CmdPrimitive;
class CmdPrimitiveDefaultTypeInternal;
extern CmdPrimitiveDefaultTypeInternal _CmdPrimitive_default_instance_;
class ConfigDataRespV1;
class ConfigDataRespV1DefaultTypeInternal;
extern ConfigDataRespV1DefaultTypeInternal _ConfigDataRespV1_default_instance_;
class ConfigDataV1;
class ConfigDataV1DefaultTypeInternal;
extern ConfigDataV1DefaultTypeInternal _ConfigDataV1_default_instance_;
class ConfigNotifyRespV1;
class ConfigNotifyRespV1DefaultTypeInternal;
extern ConfigNotifyRespV1DefaultTypeInternal _ConfigNotifyRespV1_default_instance_;
class ConfigNotifyV1;
class ConfigNotifyV1DefaultTypeInternal;
extern ConfigNotifyV1DefaultTypeInternal _ConfigNotifyV1_default_instance_;
class ConfigRespV1;
class ConfigRespV1DefaultTypeInternal;
extern ConfigRespV1DefaultTypeInternal _ConfigRespV1_default_instance_;
class ConfigV1;
class ConfigV1DefaultTypeInternal;
extern ConfigV1DefaultTypeInternal _ConfigV1_default_instance_;
class GPSInfoRespV1;
class GPSInfoRespV1DefaultTypeInternal;
extern GPSInfoRespV1DefaultTypeInternal _GPSInfoRespV1_default_instance_;
class GPSInfoV1;
class GPSInfoV1DefaultTypeInternal;
extern GPSInfoV1DefaultTypeInternal _GPSInfoV1_default_instance_;
class LoginRespV1;
class LoginRespV1DefaultTypeInternal;
extern LoginRespV1DefaultTypeInternal _LoginRespV1_default_instance_;
class LoginV1;
class LoginV1DefaultTypeInternal;
extern LoginV1DefaultTypeInternal _LoginV1_default_instance_;
class LogoutRespV1;
class LogoutRespV1DefaultTypeInternal;
extern LogoutRespV1DefaultTypeInternal _LogoutRespV1_default_instance_;
class LogoutV1;
class LogoutV1DefaultTypeInternal;
extern LogoutV1DefaultTypeInternal _LogoutV1_default_instance_;
class ModuleConfRespV1;
class ModuleConfRespV1DefaultTypeInternal;
extern ModuleConfRespV1DefaultTypeInternal _ModuleConfRespV1_default_instance_;
class ModuleConfV1;
class ModuleConfV1DefaultTypeInternal;
extern ModuleConfV1DefaultTypeInternal _ModuleConfV1_default_instance_;
class QueryDataRespV1;
class QueryDataRespV1DefaultTypeInternal;
extern QueryDataRespV1DefaultTypeInternal _QueryDataRespV1_default_instance_;
class QueryDataV1;
class QueryDataV1DefaultTypeInternal;
extern QueryDataV1DefaultTypeInternal _QueryDataV1_default_instance_;
class ReatartCmdV1;
class ReatartCmdV1DefaultTypeInternal;
extern ReatartCmdV1DefaultTypeInternal _ReatartCmdV1_default_instance_;
class ReatartRespV1;
class ReatartRespV1DefaultTypeInternal;
extern ReatartRespV1DefaultTypeInternal _ReatartRespV1_default_instance_;
class ReportEventRespV1;
class ReportEventRespV1DefaultTypeInternal;
extern ReportEventRespV1DefaultTypeInternal _ReportEventRespV1_default_instance_;
class ReportEventV1;
class ReportEventV1DefaultTypeInternal;
extern ReportEventV1DefaultTypeInternal _ReportEventV1_default_instance_;
class StatusInfoRespV1;
class StatusInfoRespV1DefaultTypeInternal;
extern StatusInfoRespV1DefaultTypeInternal _StatusInfoRespV1_default_instance_;
class StatusInfoV1;
class StatusInfoV1DefaultTypeInternal;
extern StatusInfoV1DefaultTypeInternal _StatusInfoV1_default_instance_;
class UploadEofRespV1;
class UploadEofRespV1DefaultTypeInternal;
extern UploadEofRespV1DefaultTypeInternal _UploadEofRespV1_default_instance_;
class UploadEofV1;
class UploadEofV1DefaultTypeInternal;
extern UploadEofV1DefaultTypeInternal _UploadEofV1_default_instance_;
class UploadFileDataRespV1;
class UploadFileDataRespV1DefaultTypeInternal;
extern UploadFileDataRespV1DefaultTypeInternal _UploadFileDataRespV1_default_instance_;
class UploadFileDataV1;
class UploadFileDataV1DefaultTypeInternal;
extern UploadFileDataV1DefaultTypeInternal _UploadFileDataV1_default_instance_;
class UploadFileRespV1;
class UploadFileRespV1DefaultTypeInternal;
extern UploadFileRespV1DefaultTypeInternal _UploadFileRespV1_default_instance_;
class UploadFileV1;
class UploadFileV1DefaultTypeInternal;
extern UploadFileV1DefaultTypeInternal _UploadFileV1_default_instance_;
}  // namespace amtpap
PROTOBUF_NAMESPACE_OPEN
template<> ::amtpap::AlarmClearRespV1* Arena::CreateMaybeMessage<::amtpap::AlarmClearRespV1>(Arena*);
template<> ::amtpap::AlarmClearV1* Arena::CreateMaybeMessage<::amtpap::AlarmClearV1>(Arena*);
template<> ::amtpap::AlarmRespV1* Arena::CreateMaybeMessage<::amtpap::AlarmRespV1>(Arena*);
template<> ::amtpap::AlarmV1* Arena::CreateMaybeMessage<::amtpap::AlarmV1>(Arena*);
template<> ::amtpap::CmdPrimitive* Arena::CreateMaybeMessage<::amtpap::CmdPrimitive>(Arena*);
template<> ::amtpap::ConfigDataRespV1* Arena::CreateMaybeMessage<::amtpap::ConfigDataRespV1>(Arena*);
template<> ::amtpap::ConfigDataV1* Arena::CreateMaybeMessage<::amtpap::ConfigDataV1>(Arena*);
template<> ::amtpap::ConfigNotifyRespV1* Arena::CreateMaybeMessage<::amtpap::ConfigNotifyRespV1>(Arena*);
template<> ::amtpap::ConfigNotifyV1* Arena::CreateMaybeMessage<::amtpap::ConfigNotifyV1>(Arena*);
template<> ::amtpap::ConfigRespV1* Arena::CreateMaybeMessage<::amtpap::ConfigRespV1>(Arena*);
template<> ::amtpap::ConfigV1* Arena::CreateMaybeMessage<::amtpap::ConfigV1>(Arena*);
template<> ::amtpap::GPSInfoRespV1* Arena::CreateMaybeMessage<::amtpap::GPSInfoRespV1>(Arena*);
template<> ::amtpap::GPSInfoV1* Arena::CreateMaybeMessage<::amtpap::GPSInfoV1>(Arena*);
template<> ::amtpap::LoginRespV1* Arena::CreateMaybeMessage<::amtpap::LoginRespV1>(Arena*);
template<> ::amtpap::LoginV1* Arena::CreateMaybeMessage<::amtpap::LoginV1>(Arena*);
template<> ::amtpap::LogoutRespV1* Arena::CreateMaybeMessage<::amtpap::LogoutRespV1>(Arena*);
template<> ::amtpap::LogoutV1* Arena::CreateMaybeMessage<::amtpap::LogoutV1>(Arena*);
template<> ::amtpap::ModuleConfRespV1* Arena::CreateMaybeMessage<::amtpap::ModuleConfRespV1>(Arena*);
template<> ::amtpap::ModuleConfV1* Arena::CreateMaybeMessage<::amtpap::ModuleConfV1>(Arena*);
template<> ::amtpap::QueryDataRespV1* Arena::CreateMaybeMessage<::amtpap::QueryDataRespV1>(Arena*);
template<> ::amtpap::QueryDataV1* Arena::CreateMaybeMessage<::amtpap::QueryDataV1>(Arena*);
template<> ::amtpap::ReatartCmdV1* Arena::CreateMaybeMessage<::amtpap::ReatartCmdV1>(Arena*);
template<> ::amtpap::ReatartRespV1* Arena::CreateMaybeMessage<::amtpap::ReatartRespV1>(Arena*);
template<> ::amtpap::ReportEventRespV1* Arena::CreateMaybeMessage<::amtpap::ReportEventRespV1>(Arena*);
template<> ::amtpap::ReportEventV1* Arena::CreateMaybeMessage<::amtpap::ReportEventV1>(Arena*);
template<> ::amtpap::StatusInfoRespV1* Arena::CreateMaybeMessage<::amtpap::StatusInfoRespV1>(Arena*);
template<> ::amtpap::StatusInfoV1* Arena::CreateMaybeMessage<::amtpap::StatusInfoV1>(Arena*);
template<> ::amtpap::UploadEofRespV1* Arena::CreateMaybeMessage<::amtpap::UploadEofRespV1>(Arena*);
template<> ::amtpap::UploadEofV1* Arena::CreateMaybeMessage<::amtpap::UploadEofV1>(Arena*);
template<> ::amtpap::UploadFileDataRespV1* Arena::CreateMaybeMessage<::amtpap::UploadFileDataRespV1>(Arena*);
template<> ::amtpap::UploadFileDataV1* Arena::CreateMaybeMessage<::amtpap::UploadFileDataV1>(Arena*);
template<> ::amtpap::UploadFileRespV1* Arena::CreateMaybeMessage<::amtpap::UploadFileRespV1>(Arena*);
template<> ::amtpap::UploadFileV1* Arena::CreateMaybeMessage<::amtpap::UploadFileV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace amtpap {

enum MsgType : int {
  PUBLIC = 0,
  PRIVATE = 1,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = PUBLIC;
constexpr MsgType MsgType_MAX = PRIVATE;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    const std::string& name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum MsgID : int {
  RESERVE = 0,
  LOGIN_V1 = 65537,
  LOGIN_V2 = 65538,
  LOGIN_RESP_V1 = 131073,
  LOGOUT_V1 = 196609,
  LOGOUT_RESP_V1 = 262145,
  CONFIG_V1 = 327681,
  CONFIG_RESP_V1 = 393217,
  REPORT_EVENT_V1 = 458753,
  REPORT_EVENT_RESP_V1 = 524289,
  ALARM_V1 = 589825,
  ALARM_RESP_V1 = 655361,
  ALARM_CLEAR_V1 = 720897,
  ALARM_CLEAR_RESP_V1 = 786433,
  GPS_INFO_V1 = 851969,
  GPS_INFO_RESP_V1 = 917505,
  STATUS_INFO_V1 = 983041,
  STATUS_INFO_RESP_V1 = 1048577,
  CONFIG_DATA_V1 = 1114113,
  CONFIG_DATA_RESP_V1 = 1179649,
  CONFIG_NOTIFY_V1 = 1245185,
  CONFIG_NOTIFY_RESP_V1 = 1310721,
  UPLOAD_FILE_V1 = 1376257,
  UPLOAD_FILE_RESP_V1 = 1441793,
  UPLOAD_EOF_V1 = 1507329,
  UPLOAD_EOF_RESP_V1 = 1572865,
  RESTART_CMD_V1 = 1638401,
  RESTART_CMD_RESP_V1 = 1703937,
  QUERY_DATA_V1 = 1769473,
  QUERY_DATA_RESP_V1 = 1835009,
  UPLOAD_FILE_DATA_V1 = 1900545,
  UPLOAD_FILE_DATA_RESP_V1 = 1966081,
  MODULE_CONF_V1 = 2031617,
  MODULE_CONF_RESP_V1 = 2097153,
  MsgID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgID_IsValid(int value);
constexpr MsgID MsgID_MIN = RESERVE;
constexpr MsgID MsgID_MAX = MODULE_CONF_RESP_V1;
constexpr int MsgID_ARRAYSIZE = MsgID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgID_descriptor();
template<typename T>
inline const std::string& MsgID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgID_descriptor(), enum_t_value);
}
inline bool MsgID_Parse(
    const std::string& name, MsgID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgID>(
    MsgID_descriptor(), name, value);
}
// ===================================================================

class CmdPrimitive :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.CmdPrimitive) */ {
 public:
  CmdPrimitive();
  virtual ~CmdPrimitive();

  CmdPrimitive(const CmdPrimitive& from);
  CmdPrimitive(CmdPrimitive&& from) noexcept
    : CmdPrimitive() {
    *this = ::std::move(from);
  }

  inline CmdPrimitive& operator=(const CmdPrimitive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdPrimitive& operator=(CmdPrimitive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdPrimitive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdPrimitive* internal_default_instance() {
    return reinterpret_cast<const CmdPrimitive*>(
               &_CmdPrimitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CmdPrimitive& a, CmdPrimitive& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdPrimitive* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdPrimitive* New() const final {
    return CreateMaybeMessage<CmdPrimitive>(nullptr);
  }

  CmdPrimitive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdPrimitive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdPrimitive& from);
  void MergeFrom(const CmdPrimitive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdPrimitive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.CmdPrimitive";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadDataFieldNumber = 5,
    kTypeFieldNumber = 1,
    kSerialNumberFieldNumber = 2,
    kMsgIdFieldNumber = 3,
    kDirectionFieldNumber = 4,
  };
  // bytes payload_data = 5;
  void clear_payload_data();
  const std::string& payload_data() const;
  void set_payload_data(const std::string& value);
  void set_payload_data(std::string&& value);
  void set_payload_data(const char* value);
  void set_payload_data(const void* value, size_t size);
  std::string* mutable_payload_data();
  std::string* release_payload_data();
  void set_allocated_payload_data(std::string* payload_data);
  private:
  const std::string& _internal_payload_data() const;
  void _internal_set_payload_data(const std::string& value);
  std::string* _internal_mutable_payload_data();
  public:

  // .amtpap.MsgType type = 1;
  void clear_type();
  ::amtpap::MsgType type() const;
  void set_type(::amtpap::MsgType value);
  private:
  ::amtpap::MsgType _internal_type() const;
  void _internal_set_type(::amtpap::MsgType value);
  public:

  // fixed32 serial_number = 2;
  void clear_serial_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 serial_number() const;
  void set_serial_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serial_number() const;
  void _internal_set_serial_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .amtpap.MsgID msg_id = 3;
  void clear_msg_id();
  ::amtpap::MsgID msg_id() const;
  void set_msg_id(::amtpap::MsgID value);
  private:
  ::amtpap::MsgID _internal_msg_id() const;
  void _internal_set_msg_id(::amtpap::MsgID value);
  public:

  // bool direction = 4;
  void clear_direction();
  bool direction() const;
  void set_direction(bool value);
  private:
  bool _internal_direction() const;
  void _internal_set_direction(bool value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.CmdPrimitive)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_data_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serial_number_;
  int msg_id_;
  bool direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class LoginV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.LoginV1) */ {
 public:
  LoginV1();
  virtual ~LoginV1();

  LoginV1(const LoginV1& from);
  LoginV1(LoginV1&& from) noexcept
    : LoginV1() {
    *this = ::std::move(from);
  }

  inline LoginV1& operator=(const LoginV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginV1& operator=(LoginV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginV1* internal_default_instance() {
    return reinterpret_cast<const LoginV1*>(
               &_LoginV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginV1& a, LoginV1& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginV1* New() const final {
    return CreateMaybeMessage<LoginV1>(nullptr);
  }

  LoginV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginV1& from);
  void MergeFrom(const LoginV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.LoginV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxIdFieldNumber = 1,
    kPwdFieldNumber = 2,
    kManufactorFieldNumber = 3,
    kJwumqIdFieldNumber = 7,
    kBeginTimeFieldNumber = 4,
    kEndTimeFieldNumber = 5,
    kReleaseIdFieldNumber = 6,
  };
  // string box_id = 1;
  void clear_box_id();
  const std::string& box_id() const;
  void set_box_id(const std::string& value);
  void set_box_id(std::string&& value);
  void set_box_id(const char* value);
  void set_box_id(const char* value, size_t size);
  std::string* mutable_box_id();
  std::string* release_box_id();
  void set_allocated_box_id(std::string* box_id);
  private:
  const std::string& _internal_box_id() const;
  void _internal_set_box_id(const std::string& value);
  std::string* _internal_mutable_box_id();
  public:

  // string pwd = 2;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // string manufactor = 3;
  void clear_manufactor();
  const std::string& manufactor() const;
  void set_manufactor(const std::string& value);
  void set_manufactor(std::string&& value);
  void set_manufactor(const char* value);
  void set_manufactor(const char* value, size_t size);
  std::string* mutable_manufactor();
  std::string* release_manufactor();
  void set_allocated_manufactor(std::string* manufactor);
  private:
  const std::string& _internal_manufactor() const;
  void _internal_set_manufactor(const std::string& value);
  std::string* _internal_mutable_manufactor();
  public:

  // string jwumq_id = 7;
  void clear_jwumq_id();
  const std::string& jwumq_id() const;
  void set_jwumq_id(const std::string& value);
  void set_jwumq_id(std::string&& value);
  void set_jwumq_id(const char* value);
  void set_jwumq_id(const char* value, size_t size);
  std::string* mutable_jwumq_id();
  std::string* release_jwumq_id();
  void set_allocated_jwumq_id(std::string* jwumq_id);
  private:
  const std::string& _internal_jwumq_id() const;
  void _internal_set_jwumq_id(const std::string& value);
  std::string* _internal_mutable_jwumq_id();
  public:

  // uint64 begin_time = 4;
  void clear_begin_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_time() const;
  void set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_begin_time() const;
  void _internal_set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end_time = 5;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 release_id = 6;
  void clear_release_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 release_id() const;
  void set_release_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_release_id() const;
  void _internal_set_release_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.LoginV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr box_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufactor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwumq_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 release_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class LoginRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.LoginRespV1) */ {
 public:
  LoginRespV1();
  virtual ~LoginRespV1();

  LoginRespV1(const LoginRespV1& from);
  LoginRespV1(LoginRespV1&& from) noexcept
    : LoginRespV1() {
    *this = ::std::move(from);
  }

  inline LoginRespV1& operator=(const LoginRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRespV1& operator=(LoginRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRespV1* internal_default_instance() {
    return reinterpret_cast<const LoginRespV1*>(
               &_LoginRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginRespV1& a, LoginRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRespV1* New() const final {
    return CreateMaybeMessage<LoginRespV1>(nullptr);
  }

  LoginRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRespV1& from);
  void MergeFrom(const LoginRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.LoginRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kManufactorFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string manufactor = 2;
  void clear_manufactor();
  const std::string& manufactor() const;
  void set_manufactor(const std::string& value);
  void set_manufactor(std::string&& value);
  void set_manufactor(const char* value);
  void set_manufactor(const char* value, size_t size);
  std::string* mutable_manufactor();
  std::string* release_manufactor();
  void set_allocated_manufactor(std::string* manufactor);
  private:
  const std::string& _internal_manufactor() const;
  void _internal_set_manufactor(const std::string& value);
  std::string* _internal_mutable_manufactor();
  public:

  // int32 result = 3;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.LoginRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufactor_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class LogoutV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.LogoutV1) */ {
 public:
  LogoutV1();
  virtual ~LogoutV1();

  LogoutV1(const LogoutV1& from);
  LogoutV1(LogoutV1&& from) noexcept
    : LogoutV1() {
    *this = ::std::move(from);
  }

  inline LogoutV1& operator=(const LogoutV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutV1& operator=(LogoutV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutV1* internal_default_instance() {
    return reinterpret_cast<const LogoutV1*>(
               &_LogoutV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogoutV1& a, LogoutV1& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutV1* New() const final {
    return CreateMaybeMessage<LogoutV1>(nullptr);
  }

  LogoutV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutV1& from);
  void MergeFrom(const LogoutV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.LogoutV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:amtpap.LogoutV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class LogoutRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.LogoutRespV1) */ {
 public:
  LogoutRespV1();
  virtual ~LogoutRespV1();

  LogoutRespV1(const LogoutRespV1& from);
  LogoutRespV1(LogoutRespV1&& from) noexcept
    : LogoutRespV1() {
    *this = ::std::move(from);
  }

  inline LogoutRespV1& operator=(const LogoutRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutRespV1& operator=(LogoutRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutRespV1* internal_default_instance() {
    return reinterpret_cast<const LogoutRespV1*>(
               &_LogoutRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogoutRespV1& a, LogoutRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutRespV1* New() const final {
    return CreateMaybeMessage<LogoutRespV1>(nullptr);
  }

  LogoutRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutRespV1& from);
  void MergeFrom(const LogoutRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.LogoutRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.LogoutRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ConfigV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.ConfigV1) */ {
 public:
  ConfigV1();
  virtual ~ConfigV1();

  ConfigV1(const ConfigV1& from);
  ConfigV1(ConfigV1&& from) noexcept
    : ConfigV1() {
    *this = ::std::move(from);
  }

  inline ConfigV1& operator=(const ConfigV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigV1& operator=(ConfigV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigV1* internal_default_instance() {
    return reinterpret_cast<const ConfigV1*>(
               &_ConfigV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ConfigV1& a, ConfigV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigV1* New() const final {
    return CreateMaybeMessage<ConfigV1>(nullptr);
  }

  ConfigV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigV1& from);
  void MergeFrom(const ConfigV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.ConfigV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kAtuidVersionFieldNumber = 2,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string atuid_version = 2;
  void clear_atuid_version();
  const std::string& atuid_version() const;
  void set_atuid_version(const std::string& value);
  void set_atuid_version(std::string&& value);
  void set_atuid_version(const char* value);
  void set_atuid_version(const char* value, size_t size);
  std::string* mutable_atuid_version();
  std::string* release_atuid_version();
  void set_allocated_atuid_version(std::string* atuid_version);
  private:
  const std::string& _internal_atuid_version() const;
  void _internal_set_atuid_version(const std::string& value);
  std::string* _internal_mutable_atuid_version();
  public:

  // @@protoc_insertion_point(class_scope:amtpap.ConfigV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atuid_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ConfigRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.ConfigRespV1) */ {
 public:
  ConfigRespV1();
  virtual ~ConfigRespV1();

  ConfigRespV1(const ConfigRespV1& from);
  ConfigRespV1(ConfigRespV1&& from) noexcept
    : ConfigRespV1() {
    *this = ::std::move(from);
  }

  inline ConfigRespV1& operator=(const ConfigRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigRespV1& operator=(ConfigRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigRespV1* internal_default_instance() {
    return reinterpret_cast<const ConfigRespV1*>(
               &_ConfigRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ConfigRespV1& a, ConfigRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigRespV1* New() const final {
    return CreateMaybeMessage<ConfigRespV1>(nullptr);
  }

  ConfigRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigRespV1& from);
  void MergeFrom(const ConfigRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.ConfigRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kAtuidVersionFieldNumber = 2,
    kMd5FieldNumber = 6,
    kResultFieldNumber = 3,
    kUpdateFieldNumber = 4,
    kPacketCountFieldNumber = 5,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string atuid_version = 2;
  void clear_atuid_version();
  const std::string& atuid_version() const;
  void set_atuid_version(const std::string& value);
  void set_atuid_version(std::string&& value);
  void set_atuid_version(const char* value);
  void set_atuid_version(const char* value, size_t size);
  std::string* mutable_atuid_version();
  std::string* release_atuid_version();
  void set_allocated_atuid_version(std::string* atuid_version);
  private:
  const std::string& _internal_atuid_version() const;
  void _internal_set_atuid_version(const std::string& value);
  std::string* _internal_mutable_atuid_version();
  public:

  // string md5 = 6;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // int32 result = 3;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool update = 4;
  void clear_update();
  bool update() const;
  void set_update(bool value);
  private:
  bool _internal_update() const;
  void _internal_set_update(bool value);
  public:

  // int32 packet_count = 5;
  void clear_packet_count();
  ::PROTOBUF_NAMESPACE_ID::int32 packet_count() const;
  void set_packet_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_packet_count() const;
  void _internal_set_packet_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.ConfigRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atuid_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  bool update_;
  ::PROTOBUF_NAMESPACE_ID::int32 packet_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ConfigNotifyV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.ConfigNotifyV1) */ {
 public:
  ConfigNotifyV1();
  virtual ~ConfigNotifyV1();

  ConfigNotifyV1(const ConfigNotifyV1& from);
  ConfigNotifyV1(ConfigNotifyV1&& from) noexcept
    : ConfigNotifyV1() {
    *this = ::std::move(from);
  }

  inline ConfigNotifyV1& operator=(const ConfigNotifyV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigNotifyV1& operator=(ConfigNotifyV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigNotifyV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigNotifyV1* internal_default_instance() {
    return reinterpret_cast<const ConfigNotifyV1*>(
               &_ConfigNotifyV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ConfigNotifyV1& a, ConfigNotifyV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigNotifyV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigNotifyV1* New() const final {
    return CreateMaybeMessage<ConfigNotifyV1>(nullptr);
  }

  ConfigNotifyV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigNotifyV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigNotifyV1& from);
  void MergeFrom(const ConfigNotifyV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigNotifyV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.ConfigNotifyV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kAtuidVersionFieldNumber = 2,
    kMd5FieldNumber = 4,
    kPacketCountFieldNumber = 3,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string atuid_version = 2;
  void clear_atuid_version();
  const std::string& atuid_version() const;
  void set_atuid_version(const std::string& value);
  void set_atuid_version(std::string&& value);
  void set_atuid_version(const char* value);
  void set_atuid_version(const char* value, size_t size);
  std::string* mutable_atuid_version();
  std::string* release_atuid_version();
  void set_allocated_atuid_version(std::string* atuid_version);
  private:
  const std::string& _internal_atuid_version() const;
  void _internal_set_atuid_version(const std::string& value);
  std::string* _internal_mutable_atuid_version();
  public:

  // string md5 = 4;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // int32 packet_count = 3;
  void clear_packet_count();
  ::PROTOBUF_NAMESPACE_ID::int32 packet_count() const;
  void set_packet_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_packet_count() const;
  void _internal_set_packet_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.ConfigNotifyV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atuid_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::int32 packet_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ConfigNotifyRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.ConfigNotifyRespV1) */ {
 public:
  ConfigNotifyRespV1();
  virtual ~ConfigNotifyRespV1();

  ConfigNotifyRespV1(const ConfigNotifyRespV1& from);
  ConfigNotifyRespV1(ConfigNotifyRespV1&& from) noexcept
    : ConfigNotifyRespV1() {
    *this = ::std::move(from);
  }

  inline ConfigNotifyRespV1& operator=(const ConfigNotifyRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigNotifyRespV1& operator=(ConfigNotifyRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigNotifyRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigNotifyRespV1* internal_default_instance() {
    return reinterpret_cast<const ConfigNotifyRespV1*>(
               &_ConfigNotifyRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ConfigNotifyRespV1& a, ConfigNotifyRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigNotifyRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigNotifyRespV1* New() const final {
    return CreateMaybeMessage<ConfigNotifyRespV1>(nullptr);
  }

  ConfigNotifyRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigNotifyRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigNotifyRespV1& from);
  void MergeFrom(const ConfigNotifyRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigNotifyRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.ConfigNotifyRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kAtuidVersionFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string atuid_version = 2;
  void clear_atuid_version();
  const std::string& atuid_version() const;
  void set_atuid_version(const std::string& value);
  void set_atuid_version(std::string&& value);
  void set_atuid_version(const char* value);
  void set_atuid_version(const char* value, size_t size);
  std::string* mutable_atuid_version();
  std::string* release_atuid_version();
  void set_allocated_atuid_version(std::string* atuid_version);
  private:
  const std::string& _internal_atuid_version() const;
  void _internal_set_atuid_version(const std::string& value);
  std::string* _internal_mutable_atuid_version();
  public:

  // int32 result = 3;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.ConfigNotifyRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atuid_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ConfigDataV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.ConfigDataV1) */ {
 public:
  ConfigDataV1();
  virtual ~ConfigDataV1();

  ConfigDataV1(const ConfigDataV1& from);
  ConfigDataV1(ConfigDataV1&& from) noexcept
    : ConfigDataV1() {
    *this = ::std::move(from);
  }

  inline ConfigDataV1& operator=(const ConfigDataV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigDataV1& operator=(ConfigDataV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigDataV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigDataV1* internal_default_instance() {
    return reinterpret_cast<const ConfigDataV1*>(
               &_ConfigDataV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ConfigDataV1& a, ConfigDataV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigDataV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigDataV1* New() const final {
    return CreateMaybeMessage<ConfigDataV1>(nullptr);
  }

  ConfigDataV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigDataV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigDataV1& from);
  void MergeFrom(const ConfigDataV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigDataV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.ConfigDataV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kAtuidVersionFieldNumber = 2,
    kConfigDataFieldNumber = 6,
    kPacketCountFieldNumber = 3,
    kPacketNoFieldNumber = 4,
    kDataLengthFieldNumber = 5,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string atuid_version = 2;
  void clear_atuid_version();
  const std::string& atuid_version() const;
  void set_atuid_version(const std::string& value);
  void set_atuid_version(std::string&& value);
  void set_atuid_version(const char* value);
  void set_atuid_version(const char* value, size_t size);
  std::string* mutable_atuid_version();
  std::string* release_atuid_version();
  void set_allocated_atuid_version(std::string* atuid_version);
  private:
  const std::string& _internal_atuid_version() const;
  void _internal_set_atuid_version(const std::string& value);
  std::string* _internal_mutable_atuid_version();
  public:

  // bytes config_data = 6;
  void clear_config_data();
  const std::string& config_data() const;
  void set_config_data(const std::string& value);
  void set_config_data(std::string&& value);
  void set_config_data(const char* value);
  void set_config_data(const void* value, size_t size);
  std::string* mutable_config_data();
  std::string* release_config_data();
  void set_allocated_config_data(std::string* config_data);
  private:
  const std::string& _internal_config_data() const;
  void _internal_set_config_data(const std::string& value);
  std::string* _internal_mutable_config_data();
  public:

  // int32 packet_count = 3;
  void clear_packet_count();
  ::PROTOBUF_NAMESPACE_ID::int32 packet_count() const;
  void set_packet_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_packet_count() const;
  void _internal_set_packet_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 packet_no = 4;
  void clear_packet_no();
  ::PROTOBUF_NAMESPACE_ID::int32 packet_no() const;
  void set_packet_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_packet_no() const;
  void _internal_set_packet_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 data_length = 5;
  void clear_data_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_length() const;
  void set_data_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_length() const;
  void _internal_set_data_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.ConfigDataV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atuid_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 packet_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 packet_no_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ConfigDataRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.ConfigDataRespV1) */ {
 public:
  ConfigDataRespV1();
  virtual ~ConfigDataRespV1();

  ConfigDataRespV1(const ConfigDataRespV1& from);
  ConfigDataRespV1(ConfigDataRespV1&& from) noexcept
    : ConfigDataRespV1() {
    *this = ::std::move(from);
  }

  inline ConfigDataRespV1& operator=(const ConfigDataRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigDataRespV1& operator=(ConfigDataRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigDataRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigDataRespV1* internal_default_instance() {
    return reinterpret_cast<const ConfigDataRespV1*>(
               &_ConfigDataRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ConfigDataRespV1& a, ConfigDataRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigDataRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigDataRespV1* New() const final {
    return CreateMaybeMessage<ConfigDataRespV1>(nullptr);
  }

  ConfigDataRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigDataRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigDataRespV1& from);
  void MergeFrom(const ConfigDataRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigDataRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.ConfigDataRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kAtuidVersionFieldNumber = 2,
    kPacketNoFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string atuid_version = 2;
  void clear_atuid_version();
  const std::string& atuid_version() const;
  void set_atuid_version(const std::string& value);
  void set_atuid_version(std::string&& value);
  void set_atuid_version(const char* value);
  void set_atuid_version(const char* value, size_t size);
  std::string* mutable_atuid_version();
  std::string* release_atuid_version();
  void set_allocated_atuid_version(std::string* atuid_version);
  private:
  const std::string& _internal_atuid_version() const;
  void _internal_set_atuid_version(const std::string& value);
  std::string* _internal_mutable_atuid_version();
  public:

  // int32 packet_no = 3;
  void clear_packet_no();
  ::PROTOBUF_NAMESPACE_ID::int32 packet_no() const;
  void set_packet_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_packet_no() const;
  void _internal_set_packet_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 4;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.ConfigDataRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atuid_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 packet_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ReportEventV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.ReportEventV1) */ {
 public:
  ReportEventV1();
  virtual ~ReportEventV1();

  ReportEventV1(const ReportEventV1& from);
  ReportEventV1(ReportEventV1&& from) noexcept
    : ReportEventV1() {
    *this = ::std::move(from);
  }

  inline ReportEventV1& operator=(const ReportEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportEventV1& operator=(ReportEventV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportEventV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportEventV1* internal_default_instance() {
    return reinterpret_cast<const ReportEventV1*>(
               &_ReportEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReportEventV1& a, ReportEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportEventV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportEventV1* New() const final {
    return CreateMaybeMessage<ReportEventV1>(nullptr);
  }

  ReportEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportEventV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportEventV1& from);
  void MergeFrom(const ReportEventV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportEventV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.ReportEventV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTsSecFieldNumber = 2,
    kTsUsecFieldNumber = 3,
    kModuleFieldNumber = 4,
    kEventCodeFieldNumber = 5,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint32 ts_sec = 2;
  void clear_ts_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_sec() const;
  void set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ts_sec() const;
  void _internal_set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ts_usec = 3;
  void clear_ts_usec();
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_usec() const;
  void set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ts_usec() const;
  void _internal_set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 module = 4;
  void clear_module();
  ::PROTOBUF_NAMESPACE_ID::uint32 module() const;
  void set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_module() const;
  void _internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 event_code = 5;
  void clear_event_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_code() const;
  void set_event_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_code() const;
  void _internal_set_event_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.ReportEventV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_usec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 module_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ReportEventRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.ReportEventRespV1) */ {
 public:
  ReportEventRespV1();
  virtual ~ReportEventRespV1();

  ReportEventRespV1(const ReportEventRespV1& from);
  ReportEventRespV1(ReportEventRespV1&& from) noexcept
    : ReportEventRespV1() {
    *this = ::std::move(from);
  }

  inline ReportEventRespV1& operator=(const ReportEventRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportEventRespV1& operator=(ReportEventRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportEventRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportEventRespV1* internal_default_instance() {
    return reinterpret_cast<const ReportEventRespV1*>(
               &_ReportEventRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReportEventRespV1& a, ReportEventRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportEventRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportEventRespV1* New() const final {
    return CreateMaybeMessage<ReportEventRespV1>(nullptr);
  }

  ReportEventRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportEventRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportEventRespV1& from);
  void MergeFrom(const ReportEventRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportEventRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.ReportEventRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.ReportEventRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class AlarmV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.AlarmV1) */ {
 public:
  AlarmV1();
  virtual ~AlarmV1();

  AlarmV1(const AlarmV1& from);
  AlarmV1(AlarmV1&& from) noexcept
    : AlarmV1() {
    *this = ::std::move(from);
  }

  inline AlarmV1& operator=(const AlarmV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmV1& operator=(AlarmV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmV1* internal_default_instance() {
    return reinterpret_cast<const AlarmV1*>(
               &_AlarmV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AlarmV1& a, AlarmV1& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmV1* New() const final {
    return CreateMaybeMessage<AlarmV1>(nullptr);
  }

  AlarmV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmV1& from);
  void MergeFrom(const AlarmV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.AlarmV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kModuleFieldNumber = 2,
    kSeqFieldNumber = 3,
    kAlarmCodeFieldNumber = 4,
    kReasonCodeFieldNumber = 5,
    kTsSecFieldNumber = 6,
    kTsUsecFieldNumber = 7,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint32 module = 2;
  void clear_module();
  ::PROTOBUF_NAMESPACE_ID::uint32 module() const;
  void set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_module() const;
  void _internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 seq = 3;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 alarm_code = 4;
  void clear_alarm_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 alarm_code() const;
  void set_alarm_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_alarm_code() const;
  void _internal_set_alarm_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reason_code = 5;
  void clear_reason_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_code() const;
  void set_reason_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason_code() const;
  void _internal_set_reason_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ts_sec = 6;
  void clear_ts_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_sec() const;
  void set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ts_sec() const;
  void _internal_set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ts_usec = 7;
  void clear_ts_usec();
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_usec() const;
  void set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ts_usec() const;
  void _internal_set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.AlarmV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 module_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 alarm_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_usec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class AlarmRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.AlarmRespV1) */ {
 public:
  AlarmRespV1();
  virtual ~AlarmRespV1();

  AlarmRespV1(const AlarmRespV1& from);
  AlarmRespV1(AlarmRespV1&& from) noexcept
    : AlarmRespV1() {
    *this = ::std::move(from);
  }

  inline AlarmRespV1& operator=(const AlarmRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmRespV1& operator=(AlarmRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmRespV1* internal_default_instance() {
    return reinterpret_cast<const AlarmRespV1*>(
               &_AlarmRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AlarmRespV1& a, AlarmRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmRespV1* New() const final {
    return CreateMaybeMessage<AlarmRespV1>(nullptr);
  }

  AlarmRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmRespV1& from);
  void MergeFrom(const AlarmRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.AlarmRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.AlarmRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class AlarmClearV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.AlarmClearV1) */ {
 public:
  AlarmClearV1();
  virtual ~AlarmClearV1();

  AlarmClearV1(const AlarmClearV1& from);
  AlarmClearV1(AlarmClearV1&& from) noexcept
    : AlarmClearV1() {
    *this = ::std::move(from);
  }

  inline AlarmClearV1& operator=(const AlarmClearV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmClearV1& operator=(AlarmClearV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmClearV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmClearV1* internal_default_instance() {
    return reinterpret_cast<const AlarmClearV1*>(
               &_AlarmClearV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AlarmClearV1& a, AlarmClearV1& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmClearV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmClearV1* New() const final {
    return CreateMaybeMessage<AlarmClearV1>(nullptr);
  }

  AlarmClearV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmClearV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmClearV1& from);
  void MergeFrom(const AlarmClearV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmClearV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.AlarmClearV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kModuleFieldNumber = 2,
    kSeqFieldNumber = 3,
    kAlarmCodeFieldNumber = 4,
    kTsSecFieldNumber = 5,
    kTsUsecFieldNumber = 6,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint32 module = 2;
  void clear_module();
  ::PROTOBUF_NAMESPACE_ID::uint32 module() const;
  void set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_module() const;
  void _internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 seq = 3;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 alarm_code = 4;
  void clear_alarm_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 alarm_code() const;
  void set_alarm_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_alarm_code() const;
  void _internal_set_alarm_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ts_sec = 5;
  void clear_ts_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_sec() const;
  void set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ts_sec() const;
  void _internal_set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ts_usec = 6;
  void clear_ts_usec();
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_usec() const;
  void set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ts_usec() const;
  void _internal_set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.AlarmClearV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 module_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 alarm_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_usec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class AlarmClearRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.AlarmClearRespV1) */ {
 public:
  AlarmClearRespV1();
  virtual ~AlarmClearRespV1();

  AlarmClearRespV1(const AlarmClearRespV1& from);
  AlarmClearRespV1(AlarmClearRespV1&& from) noexcept
    : AlarmClearRespV1() {
    *this = ::std::move(from);
  }

  inline AlarmClearRespV1& operator=(const AlarmClearRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmClearRespV1& operator=(AlarmClearRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmClearRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmClearRespV1* internal_default_instance() {
    return reinterpret_cast<const AlarmClearRespV1*>(
               &_AlarmClearRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AlarmClearRespV1& a, AlarmClearRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmClearRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmClearRespV1* New() const final {
    return CreateMaybeMessage<AlarmClearRespV1>(nullptr);
  }

  AlarmClearRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmClearRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmClearRespV1& from);
  void MergeFrom(const AlarmClearRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmClearRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.AlarmClearRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.AlarmClearRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class GPSInfoV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.GPSInfoV1) */ {
 public:
  GPSInfoV1();
  virtual ~GPSInfoV1();

  GPSInfoV1(const GPSInfoV1& from);
  GPSInfoV1(GPSInfoV1&& from) noexcept
    : GPSInfoV1() {
    *this = ::std::move(from);
  }

  inline GPSInfoV1& operator=(const GPSInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSInfoV1& operator=(GPSInfoV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSInfoV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPSInfoV1* internal_default_instance() {
    return reinterpret_cast<const GPSInfoV1*>(
               &_GPSInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GPSInfoV1& a, GPSInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(GPSInfoV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPSInfoV1* New() const final {
    return CreateMaybeMessage<GPSInfoV1>(nullptr);
  }

  GPSInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSInfoV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSInfoV1& from);
  void MergeFrom(const GPSInfoV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSInfoV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.GPSInfoV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kLatitudeFieldNumber = 3,
    kAltitudeFieldNumber = 4,
    kSpeedFieldNumber = 5,
    kHeadingFieldNumber = 6,
    kTsSecFieldNumber = 7,
    kTsUsecFieldNumber = 8,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // float longitude = 2;
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // float latitude = 3;
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // float altitude = 4;
  void clear_altitude();
  float altitude() const;
  void set_altitude(float value);
  private:
  float _internal_altitude() const;
  void _internal_set_altitude(float value);
  public:

  // float speed = 5;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // float heading = 6;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // uint32 ts_sec = 7;
  void clear_ts_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_sec() const;
  void set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ts_sec() const;
  void _internal_set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ts_usec = 8;
  void clear_ts_usec();
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_usec() const;
  void set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ts_usec() const;
  void _internal_set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.GPSInfoV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  float longitude_;
  float latitude_;
  float altitude_;
  float speed_;
  float heading_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_usec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class GPSInfoRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.GPSInfoRespV1) */ {
 public:
  GPSInfoRespV1();
  virtual ~GPSInfoRespV1();

  GPSInfoRespV1(const GPSInfoRespV1& from);
  GPSInfoRespV1(GPSInfoRespV1&& from) noexcept
    : GPSInfoRespV1() {
    *this = ::std::move(from);
  }

  inline GPSInfoRespV1& operator=(const GPSInfoRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSInfoRespV1& operator=(GPSInfoRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSInfoRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPSInfoRespV1* internal_default_instance() {
    return reinterpret_cast<const GPSInfoRespV1*>(
               &_GPSInfoRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GPSInfoRespV1& a, GPSInfoRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(GPSInfoRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPSInfoRespV1* New() const final {
    return CreateMaybeMessage<GPSInfoRespV1>(nullptr);
  }

  GPSInfoRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSInfoRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSInfoRespV1& from);
  void MergeFrom(const GPSInfoRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSInfoRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.GPSInfoRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.GPSInfoRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class StatusInfoV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.StatusInfoV1) */ {
 public:
  StatusInfoV1();
  virtual ~StatusInfoV1();

  StatusInfoV1(const StatusInfoV1& from);
  StatusInfoV1(StatusInfoV1&& from) noexcept
    : StatusInfoV1() {
    *this = ::std::move(from);
  }

  inline StatusInfoV1& operator=(const StatusInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusInfoV1& operator=(StatusInfoV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusInfoV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusInfoV1* internal_default_instance() {
    return reinterpret_cast<const StatusInfoV1*>(
               &_StatusInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(StatusInfoV1& a, StatusInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusInfoV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusInfoV1* New() const final {
    return CreateMaybeMessage<StatusInfoV1>(nullptr);
  }

  StatusInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusInfoV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusInfoV1& from);
  void MergeFrom(const StatusInfoV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusInfoV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.StatusInfoV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kPowerModeFieldNumber = 2,
    kFilesLetfFieldNumber = 3,
    kTemperatureFieldNumber = 4,
    kDiskSpaceFieldNumber = 5,
    kTsSecFieldNumber = 6,
    kTsUsecFieldNumber = 7,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint32 power_mode = 2;
  void clear_power_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 power_mode() const;
  void set_power_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_power_mode() const;
  void _internal_set_power_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 files_letf = 3;
  void clear_files_letf();
  ::PROTOBUF_NAMESPACE_ID::uint32 files_letf() const;
  void set_files_letf(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_files_letf() const;
  void _internal_set_files_letf(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float temperature = 4;
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // float disk_space = 5;
  void clear_disk_space();
  float disk_space() const;
  void set_disk_space(float value);
  private:
  float _internal_disk_space() const;
  void _internal_set_disk_space(float value);
  public:

  // uint32 ts_sec = 6;
  void clear_ts_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_sec() const;
  void set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ts_sec() const;
  void _internal_set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ts_usec = 7;
  void clear_ts_usec();
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_usec() const;
  void set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ts_usec() const;
  void _internal_set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.StatusInfoV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 power_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 files_letf_;
  float temperature_;
  float disk_space_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_usec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class StatusInfoRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.StatusInfoRespV1) */ {
 public:
  StatusInfoRespV1();
  virtual ~StatusInfoRespV1();

  StatusInfoRespV1(const StatusInfoRespV1& from);
  StatusInfoRespV1(StatusInfoRespV1&& from) noexcept
    : StatusInfoRespV1() {
    *this = ::std::move(from);
  }

  inline StatusInfoRespV1& operator=(const StatusInfoRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusInfoRespV1& operator=(StatusInfoRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusInfoRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusInfoRespV1* internal_default_instance() {
    return reinterpret_cast<const StatusInfoRespV1*>(
               &_StatusInfoRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(StatusInfoRespV1& a, StatusInfoRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusInfoRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusInfoRespV1* New() const final {
    return CreateMaybeMessage<StatusInfoRespV1>(nullptr);
  }

  StatusInfoRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusInfoRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusInfoRespV1& from);
  void MergeFrom(const StatusInfoRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusInfoRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.StatusInfoRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.StatusInfoRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class UploadFileV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.UploadFileV1) */ {
 public:
  UploadFileV1();
  virtual ~UploadFileV1();

  UploadFileV1(const UploadFileV1& from);
  UploadFileV1(UploadFileV1&& from) noexcept
    : UploadFileV1() {
    *this = ::std::move(from);
  }

  inline UploadFileV1& operator=(const UploadFileV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadFileV1& operator=(UploadFileV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadFileV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadFileV1* internal_default_instance() {
    return reinterpret_cast<const UploadFileV1*>(
               &_UploadFileV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UploadFileV1& a, UploadFileV1& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadFileV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadFileV1* New() const final {
    return CreateMaybeMessage<UploadFileV1>(nullptr);
  }

  UploadFileV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadFileV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadFileV1& from);
  void MergeFrom(const UploadFileV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadFileV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.UploadFileV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kFileNameFieldNumber = 2,
    kRetransmitFieldNumber = 3,
    kModuleFieldNumber = 4,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // bool retransmit = 3;
  void clear_retransmit();
  bool retransmit() const;
  void set_retransmit(bool value);
  private:
  bool _internal_retransmit() const;
  void _internal_set_retransmit(bool value);
  public:

  // uint32 module = 4;
  void clear_module();
  ::PROTOBUF_NAMESPACE_ID::uint32 module() const;
  void set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_module() const;
  void _internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.UploadFileV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  bool retransmit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 module_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class UploadFileRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.UploadFileRespV1) */ {
 public:
  UploadFileRespV1();
  virtual ~UploadFileRespV1();

  UploadFileRespV1(const UploadFileRespV1& from);
  UploadFileRespV1(UploadFileRespV1&& from) noexcept
    : UploadFileRespV1() {
    *this = ::std::move(from);
  }

  inline UploadFileRespV1& operator=(const UploadFileRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadFileRespV1& operator=(UploadFileRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadFileRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadFileRespV1* internal_default_instance() {
    return reinterpret_cast<const UploadFileRespV1*>(
               &_UploadFileRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UploadFileRespV1& a, UploadFileRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadFileRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadFileRespV1* New() const final {
    return CreateMaybeMessage<UploadFileRespV1>(nullptr);
  }

  UploadFileRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadFileRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadFileRespV1& from);
  void MergeFrom(const UploadFileRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadFileRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.UploadFileRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kFileNameFieldNumber = 2,
    kFileIdFieldNumber = 3,
    kFileSizeFieldNumber = 4,
    kModuleFieldNumber = 5,
    kResultFieldNumber = 6,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // uint32 file_id = 3;
  void clear_file_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_id() const;
  void set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_id() const;
  void _internal_set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 file_size = 4;
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 module = 5;
  void clear_module();
  ::PROTOBUF_NAMESPACE_ID::uint32 module() const;
  void set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_module() const;
  void _internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 result = 6;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.UploadFileRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 module_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class UploadEofV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.UploadEofV1) */ {
 public:
  UploadEofV1();
  virtual ~UploadEofV1();

  UploadEofV1(const UploadEofV1& from);
  UploadEofV1(UploadEofV1&& from) noexcept
    : UploadEofV1() {
    *this = ::std::move(from);
  }

  inline UploadEofV1& operator=(const UploadEofV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadEofV1& operator=(UploadEofV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadEofV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadEofV1* internal_default_instance() {
    return reinterpret_cast<const UploadEofV1*>(
               &_UploadEofV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UploadEofV1& a, UploadEofV1& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadEofV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadEofV1* New() const final {
    return CreateMaybeMessage<UploadEofV1>(nullptr);
  }

  UploadEofV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadEofV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadEofV1& from);
  void MergeFrom(const UploadEofV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadEofV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.UploadEofV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kFileNameFieldNumber = 2,
    kMd5FieldNumber = 7,
    kFileIdFieldNumber = 3,
    kPacketCountFieldNumber = 4,
    kTotalSizeFieldNumber = 5,
    kModuleFieldNumber = 6,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string md5 = 7;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // uint32 file_id = 3;
  void clear_file_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_id() const;
  void set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_id() const;
  void _internal_set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 packet_count = 4;
  void clear_packet_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_count() const;
  void set_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packet_count() const;
  void _internal_set_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_size = 5;
  void clear_total_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_size() const;
  void set_total_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_size() const;
  void _internal_set_total_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 module = 6;
  void clear_module();
  ::PROTOBUF_NAMESPACE_ID::uint32 module() const;
  void set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_module() const;
  void _internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.UploadEofV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 module_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class UploadEofRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.UploadEofRespV1) */ {
 public:
  UploadEofRespV1();
  virtual ~UploadEofRespV1();

  UploadEofRespV1(const UploadEofRespV1& from);
  UploadEofRespV1(UploadEofRespV1&& from) noexcept
    : UploadEofRespV1() {
    *this = ::std::move(from);
  }

  inline UploadEofRespV1& operator=(const UploadEofRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadEofRespV1& operator=(UploadEofRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadEofRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadEofRespV1* internal_default_instance() {
    return reinterpret_cast<const UploadEofRespV1*>(
               &_UploadEofRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UploadEofRespV1& a, UploadEofRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadEofRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadEofRespV1* New() const final {
    return CreateMaybeMessage<UploadEofRespV1>(nullptr);
  }

  UploadEofRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadEofRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadEofRespV1& from);
  void MergeFrom(const UploadEofRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadEofRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.UploadEofRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kFileNameFieldNumber = 2,
    kFileIdFieldNumber = 3,
    kPacketCountFieldNumber = 4,
    kModuleFieldNumber = 5,
    kResultFieldNumber = 6,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // uint32 file_id = 3;
  void clear_file_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_id() const;
  void set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_id() const;
  void _internal_set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 packet_count = 4;
  void clear_packet_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_count() const;
  void set_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packet_count() const;
  void _internal_set_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 module = 5;
  void clear_module();
  ::PROTOBUF_NAMESPACE_ID::uint32 module() const;
  void set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_module() const;
  void _internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 result = 6;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.UploadEofRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 module_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class UploadFileDataV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.UploadFileDataV1) */ {
 public:
  UploadFileDataV1();
  virtual ~UploadFileDataV1();

  UploadFileDataV1(const UploadFileDataV1& from);
  UploadFileDataV1(UploadFileDataV1&& from) noexcept
    : UploadFileDataV1() {
    *this = ::std::move(from);
  }

  inline UploadFileDataV1& operator=(const UploadFileDataV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadFileDataV1& operator=(UploadFileDataV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadFileDataV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadFileDataV1* internal_default_instance() {
    return reinterpret_cast<const UploadFileDataV1*>(
               &_UploadFileDataV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UploadFileDataV1& a, UploadFileDataV1& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadFileDataV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadFileDataV1* New() const final {
    return CreateMaybeMessage<UploadFileDataV1>(nullptr);
  }

  UploadFileDataV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadFileDataV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadFileDataV1& from);
  void MergeFrom(const UploadFileDataV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadFileDataV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.UploadFileDataV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kDataFieldNumber = 6,
    kFileIdFieldNumber = 2,
    kPacketNoFieldNumber = 3,
    kPieceLenFieldNumber = 4,
    kDataLenFieldNumber = 5,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 file_id = 2;
  void clear_file_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_id() const;
  void set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_id() const;
  void _internal_set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 packet_no = 3;
  void clear_packet_no();
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_no() const;
  void set_packet_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packet_no() const;
  void _internal_set_packet_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 piece_len = 4;
  void clear_piece_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 piece_len() const;
  void set_piece_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_piece_len() const;
  void _internal_set_piece_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 data_len = 5;
  void clear_data_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_len() const;
  void set_data_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_len() const;
  void _internal_set_data_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.UploadFileDataV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_no_;
  ::PROTOBUF_NAMESPACE_ID::uint32 piece_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class UploadFileDataRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.UploadFileDataRespV1) */ {
 public:
  UploadFileDataRespV1();
  virtual ~UploadFileDataRespV1();

  UploadFileDataRespV1(const UploadFileDataRespV1& from);
  UploadFileDataRespV1(UploadFileDataRespV1&& from) noexcept
    : UploadFileDataRespV1() {
    *this = ::std::move(from);
  }

  inline UploadFileDataRespV1& operator=(const UploadFileDataRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadFileDataRespV1& operator=(UploadFileDataRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadFileDataRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadFileDataRespV1* internal_default_instance() {
    return reinterpret_cast<const UploadFileDataRespV1*>(
               &_UploadFileDataRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(UploadFileDataRespV1& a, UploadFileDataRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadFileDataRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadFileDataRespV1* New() const final {
    return CreateMaybeMessage<UploadFileDataRespV1>(nullptr);
  }

  UploadFileDataRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadFileDataRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadFileDataRespV1& from);
  void MergeFrom(const UploadFileDataRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadFileDataRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.UploadFileDataRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kFileIdFieldNumber = 2,
    kPacketNoFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint32 file_id = 2;
  void clear_file_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_id() const;
  void set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_id() const;
  void _internal_set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 packet_no = 3;
  void clear_packet_no();
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_no() const;
  void set_packet_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packet_no() const;
  void _internal_set_packet_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 result = 4;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.UploadFileDataRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class QueryDataV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.QueryDataV1) */ {
 public:
  QueryDataV1();
  virtual ~QueryDataV1();

  QueryDataV1(const QueryDataV1& from);
  QueryDataV1(QueryDataV1&& from) noexcept
    : QueryDataV1() {
    *this = ::std::move(from);
  }

  inline QueryDataV1& operator=(const QueryDataV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDataV1& operator=(QueryDataV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryDataV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryDataV1* internal_default_instance() {
    return reinterpret_cast<const QueryDataV1*>(
               &_QueryDataV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(QueryDataV1& a, QueryDataV1& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDataV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryDataV1* New() const final {
    return CreateMaybeMessage<QueryDataV1>(nullptr);
  }

  QueryDataV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryDataV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryDataV1& from);
  void MergeFrom(const QueryDataV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDataV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.QueryDataV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kFileNameFieldNumber = 2,
    kFileIdFieldNumber = 3,
    kPacketNoFieldNumber = 4,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // uint32 file_id = 3;
  void clear_file_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_id() const;
  void set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_id() const;
  void _internal_set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 packet_no = 4;
  void clear_packet_no();
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_no() const;
  void set_packet_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packet_no() const;
  void _internal_set_packet_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.QueryDataV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packet_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class QueryDataRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.QueryDataRespV1) */ {
 public:
  QueryDataRespV1();
  virtual ~QueryDataRespV1();

  QueryDataRespV1(const QueryDataRespV1& from);
  QueryDataRespV1(QueryDataRespV1&& from) noexcept
    : QueryDataRespV1() {
    *this = ::std::move(from);
  }

  inline QueryDataRespV1& operator=(const QueryDataRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDataRespV1& operator=(QueryDataRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryDataRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryDataRespV1* internal_default_instance() {
    return reinterpret_cast<const QueryDataRespV1*>(
               &_QueryDataRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(QueryDataRespV1& a, QueryDataRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDataRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryDataRespV1* New() const final {
    return CreateMaybeMessage<QueryDataRespV1>(nullptr);
  }

  QueryDataRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryDataRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryDataRespV1& from);
  void MergeFrom(const QueryDataRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDataRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.QueryDataRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.QueryDataRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ReatartCmdV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.ReatartCmdV1) */ {
 public:
  ReatartCmdV1();
  virtual ~ReatartCmdV1();

  ReatartCmdV1(const ReatartCmdV1& from);
  ReatartCmdV1(ReatartCmdV1&& from) noexcept
    : ReatartCmdV1() {
    *this = ::std::move(from);
  }

  inline ReatartCmdV1& operator=(const ReatartCmdV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReatartCmdV1& operator=(ReatartCmdV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReatartCmdV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReatartCmdV1* internal_default_instance() {
    return reinterpret_cast<const ReatartCmdV1*>(
               &_ReatartCmdV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ReatartCmdV1& a, ReatartCmdV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ReatartCmdV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReatartCmdV1* New() const final {
    return CreateMaybeMessage<ReatartCmdV1>(nullptr);
  }

  ReatartCmdV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReatartCmdV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReatartCmdV1& from);
  void MergeFrom(const ReatartCmdV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReatartCmdV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.ReatartCmdV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTsSecFieldNumber = 2,
    kTsUsecFieldNumber = 3,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint32 ts_sec = 2;
  void clear_ts_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_sec() const;
  void set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ts_sec() const;
  void _internal_set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ts_usec = 3;
  void clear_ts_usec();
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_usec() const;
  void set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ts_usec() const;
  void _internal_set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.ReatartCmdV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_usec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ReatartRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.ReatartRespV1) */ {
 public:
  ReatartRespV1();
  virtual ~ReatartRespV1();

  ReatartRespV1(const ReatartRespV1& from);
  ReatartRespV1(ReatartRespV1&& from) noexcept
    : ReatartRespV1() {
    *this = ::std::move(from);
  }

  inline ReatartRespV1& operator=(const ReatartRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReatartRespV1& operator=(ReatartRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReatartRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReatartRespV1* internal_default_instance() {
    return reinterpret_cast<const ReatartRespV1*>(
               &_ReatartRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ReatartRespV1& a, ReatartRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ReatartRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReatartRespV1* New() const final {
    return CreateMaybeMessage<ReatartRespV1>(nullptr);
  }

  ReatartRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReatartRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReatartRespV1& from);
  void MergeFrom(const ReatartRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReatartRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.ReatartRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.ReatartRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ModuleConfV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.ModuleConfV1) */ {
 public:
  ModuleConfV1();
  virtual ~ModuleConfV1();

  ModuleConfV1(const ModuleConfV1& from);
  ModuleConfV1(ModuleConfV1&& from) noexcept
    : ModuleConfV1() {
    *this = ::std::move(from);
  }

  inline ModuleConfV1& operator=(const ModuleConfV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleConfV1& operator=(ModuleConfV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModuleConfV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModuleConfV1* internal_default_instance() {
    return reinterpret_cast<const ModuleConfV1*>(
               &_ModuleConfV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ModuleConfV1& a, ModuleConfV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleConfV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModuleConfV1* New() const final {
    return CreateMaybeMessage<ModuleConfV1>(nullptr);
  }

  ModuleConfV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModuleConfV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModuleConfV1& from);
  void MergeFrom(const ModuleConfV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleConfV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.ModuleConfV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kChipTypeFieldNumber = 4,
    kIcdVersionFieldNumber = 5,
    kImeiFieldNumber = 6,
    kPhoneNumberFieldNumber = 7,
    kNetworkOperatorFieldNumber = 8,
    kModuleSystemFieldNumber = 10,
    kModuleFactoryFieldNumber = 11,
    kImsiFieldNumber = 12,
    kBoxIdFieldNumber = 13,
    kModuleTypeFieldNumber = 2,
    kChipManufacturerFieldNumber = 3,
    kModuleNumFieldNumber = 9,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string chip_type = 4;
  void clear_chip_type();
  const std::string& chip_type() const;
  void set_chip_type(const std::string& value);
  void set_chip_type(std::string&& value);
  void set_chip_type(const char* value);
  void set_chip_type(const char* value, size_t size);
  std::string* mutable_chip_type();
  std::string* release_chip_type();
  void set_allocated_chip_type(std::string* chip_type);
  private:
  const std::string& _internal_chip_type() const;
  void _internal_set_chip_type(const std::string& value);
  std::string* _internal_mutable_chip_type();
  public:

  // string icd_version = 5;
  void clear_icd_version();
  const std::string& icd_version() const;
  void set_icd_version(const std::string& value);
  void set_icd_version(std::string&& value);
  void set_icd_version(const char* value);
  void set_icd_version(const char* value, size_t size);
  std::string* mutable_icd_version();
  std::string* release_icd_version();
  void set_allocated_icd_version(std::string* icd_version);
  private:
  const std::string& _internal_icd_version() const;
  void _internal_set_icd_version(const std::string& value);
  std::string* _internal_mutable_icd_version();
  public:

  // string imei = 6;
  void clear_imei();
  const std::string& imei() const;
  void set_imei(const std::string& value);
  void set_imei(std::string&& value);
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  std::string* mutable_imei();
  std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // string phone_number = 7;
  void clear_phone_number();
  const std::string& phone_number() const;
  void set_phone_number(const std::string& value);
  void set_phone_number(std::string&& value);
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  std::string* mutable_phone_number();
  std::string* release_phone_number();
  void set_allocated_phone_number(std::string* phone_number);
  private:
  const std::string& _internal_phone_number() const;
  void _internal_set_phone_number(const std::string& value);
  std::string* _internal_mutable_phone_number();
  public:

  // string network_operator = 8;
  void clear_network_operator();
  const std::string& network_operator() const;
  void set_network_operator(const std::string& value);
  void set_network_operator(std::string&& value);
  void set_network_operator(const char* value);
  void set_network_operator(const char* value, size_t size);
  std::string* mutable_network_operator();
  std::string* release_network_operator();
  void set_allocated_network_operator(std::string* network_operator);
  private:
  const std::string& _internal_network_operator() const;
  void _internal_set_network_operator(const std::string& value);
  std::string* _internal_mutable_network_operator();
  public:

  // string module_system = 10;
  void clear_module_system();
  const std::string& module_system() const;
  void set_module_system(const std::string& value);
  void set_module_system(std::string&& value);
  void set_module_system(const char* value);
  void set_module_system(const char* value, size_t size);
  std::string* mutable_module_system();
  std::string* release_module_system();
  void set_allocated_module_system(std::string* module_system);
  private:
  const std::string& _internal_module_system() const;
  void _internal_set_module_system(const std::string& value);
  std::string* _internal_mutable_module_system();
  public:

  // string module_factory = 11;
  void clear_module_factory();
  const std::string& module_factory() const;
  void set_module_factory(const std::string& value);
  void set_module_factory(std::string&& value);
  void set_module_factory(const char* value);
  void set_module_factory(const char* value, size_t size);
  std::string* mutable_module_factory();
  std::string* release_module_factory();
  void set_allocated_module_factory(std::string* module_factory);
  private:
  const std::string& _internal_module_factory() const;
  void _internal_set_module_factory(const std::string& value);
  std::string* _internal_mutable_module_factory();
  public:

  // string imsi = 12;
  void clear_imsi();
  const std::string& imsi() const;
  void set_imsi(const std::string& value);
  void set_imsi(std::string&& value);
  void set_imsi(const char* value);
  void set_imsi(const char* value, size_t size);
  std::string* mutable_imsi();
  std::string* release_imsi();
  void set_allocated_imsi(std::string* imsi);
  private:
  const std::string& _internal_imsi() const;
  void _internal_set_imsi(const std::string& value);
  std::string* _internal_mutable_imsi();
  public:

  // string box_id = 13;
  void clear_box_id();
  const std::string& box_id() const;
  void set_box_id(const std::string& value);
  void set_box_id(std::string&& value);
  void set_box_id(const char* value);
  void set_box_id(const char* value, size_t size);
  std::string* mutable_box_id();
  std::string* release_box_id();
  void set_allocated_box_id(std::string* box_id);
  private:
  const std::string& _internal_box_id() const;
  void _internal_set_box_id(const std::string& value);
  std::string* _internal_mutable_box_id();
  public:

  // uint32 module_type = 2;
  void clear_module_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 module_type() const;
  void set_module_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_module_type() const;
  void _internal_set_module_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 chip_manufacturer = 3;
  void clear_chip_manufacturer();
  ::PROTOBUF_NAMESPACE_ID::uint32 chip_manufacturer() const;
  void set_chip_manufacturer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chip_manufacturer() const;
  void _internal_set_chip_manufacturer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 module_num = 9;
  void clear_module_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 module_num() const;
  void set_module_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_module_num() const;
  void _internal_set_module_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.ModuleConfV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chip_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icd_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_operator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_system_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_factory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imsi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr box_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 module_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chip_manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 module_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ModuleConfRespV1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amtpap.ModuleConfRespV1) */ {
 public:
  ModuleConfRespV1();
  virtual ~ModuleConfRespV1();

  ModuleConfRespV1(const ModuleConfRespV1& from);
  ModuleConfRespV1(ModuleConfRespV1&& from) noexcept
    : ModuleConfRespV1() {
    *this = ::std::move(from);
  }

  inline ModuleConfRespV1& operator=(const ModuleConfRespV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleConfRespV1& operator=(ModuleConfRespV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModuleConfRespV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModuleConfRespV1* internal_default_instance() {
    return reinterpret_cast<const ModuleConfRespV1*>(
               &_ModuleConfRespV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ModuleConfRespV1& a, ModuleConfRespV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleConfRespV1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModuleConfRespV1* New() const final {
    return CreateMaybeMessage<ModuleConfRespV1>(nullptr);
  }

  ModuleConfRespV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModuleConfRespV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModuleConfRespV1& from);
  void MergeFrom(const ModuleConfRespV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleConfRespV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amtpap.ModuleConfRespV1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amtpap_5fmsg_2eproto);
    return ::descriptor_table_amtpap_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amtpap.ModuleConfRespV1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amtpap_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CmdPrimitive

// .amtpap.MsgType type = 1;
inline void CmdPrimitive::clear_type() {
  type_ = 0;
}
inline ::amtpap::MsgType CmdPrimitive::_internal_type() const {
  return static_cast< ::amtpap::MsgType >(type_);
}
inline ::amtpap::MsgType CmdPrimitive::type() const {
  // @@protoc_insertion_point(field_get:amtpap.CmdPrimitive.type)
  return _internal_type();
}
inline void CmdPrimitive::_internal_set_type(::amtpap::MsgType value) {
  
  type_ = value;
}
inline void CmdPrimitive::set_type(::amtpap::MsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:amtpap.CmdPrimitive.type)
}

// fixed32 serial_number = 2;
inline void CmdPrimitive::clear_serial_number() {
  serial_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CmdPrimitive::_internal_serial_number() const {
  return serial_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CmdPrimitive::serial_number() const {
  // @@protoc_insertion_point(field_get:amtpap.CmdPrimitive.serial_number)
  return _internal_serial_number();
}
inline void CmdPrimitive::_internal_set_serial_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serial_number_ = value;
}
inline void CmdPrimitive::set_serial_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serial_number(value);
  // @@protoc_insertion_point(field_set:amtpap.CmdPrimitive.serial_number)
}

// .amtpap.MsgID msg_id = 3;
inline void CmdPrimitive::clear_msg_id() {
  msg_id_ = 0;
}
inline ::amtpap::MsgID CmdPrimitive::_internal_msg_id() const {
  return static_cast< ::amtpap::MsgID >(msg_id_);
}
inline ::amtpap::MsgID CmdPrimitive::msg_id() const {
  // @@protoc_insertion_point(field_get:amtpap.CmdPrimitive.msg_id)
  return _internal_msg_id();
}
inline void CmdPrimitive::_internal_set_msg_id(::amtpap::MsgID value) {
  
  msg_id_ = value;
}
inline void CmdPrimitive::set_msg_id(::amtpap::MsgID value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:amtpap.CmdPrimitive.msg_id)
}

// bool direction = 4;
inline void CmdPrimitive::clear_direction() {
  direction_ = false;
}
inline bool CmdPrimitive::_internal_direction() const {
  return direction_;
}
inline bool CmdPrimitive::direction() const {
  // @@protoc_insertion_point(field_get:amtpap.CmdPrimitive.direction)
  return _internal_direction();
}
inline void CmdPrimitive::_internal_set_direction(bool value) {
  
  direction_ = value;
}
inline void CmdPrimitive::set_direction(bool value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:amtpap.CmdPrimitive.direction)
}

// bytes payload_data = 5;
inline void CmdPrimitive::clear_payload_data() {
  payload_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CmdPrimitive::payload_data() const {
  // @@protoc_insertion_point(field_get:amtpap.CmdPrimitive.payload_data)
  return _internal_payload_data();
}
inline void CmdPrimitive::set_payload_data(const std::string& value) {
  _internal_set_payload_data(value);
  // @@protoc_insertion_point(field_set:amtpap.CmdPrimitive.payload_data)
}
inline std::string* CmdPrimitive::mutable_payload_data() {
  // @@protoc_insertion_point(field_mutable:amtpap.CmdPrimitive.payload_data)
  return _internal_mutable_payload_data();
}
inline const std::string& CmdPrimitive::_internal_payload_data() const {
  return payload_data_.GetNoArena();
}
inline void CmdPrimitive::_internal_set_payload_data(const std::string& value) {
  
  payload_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CmdPrimitive::set_payload_data(std::string&& value) {
  
  payload_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.CmdPrimitive.payload_data)
}
inline void CmdPrimitive::set_payload_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.CmdPrimitive.payload_data)
}
inline void CmdPrimitive::set_payload_data(const void* value, size_t size) {
  
  payload_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.CmdPrimitive.payload_data)
}
inline std::string* CmdPrimitive::_internal_mutable_payload_data() {
  
  return payload_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CmdPrimitive::release_payload_data() {
  // @@protoc_insertion_point(field_release:amtpap.CmdPrimitive.payload_data)
  
  return payload_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CmdPrimitive::set_allocated_payload_data(std::string* payload_data) {
  if (payload_data != nullptr) {
    
  } else {
    
  }
  payload_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_data);
  // @@protoc_insertion_point(field_set_allocated:amtpap.CmdPrimitive.payload_data)
}

// -------------------------------------------------------------------

// LoginV1

// string box_id = 1;
inline void LoginV1::clear_box_id() {
  box_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginV1::box_id() const {
  // @@protoc_insertion_point(field_get:amtpap.LoginV1.box_id)
  return _internal_box_id();
}
inline void LoginV1::set_box_id(const std::string& value) {
  _internal_set_box_id(value);
  // @@protoc_insertion_point(field_set:amtpap.LoginV1.box_id)
}
inline std::string* LoginV1::mutable_box_id() {
  // @@protoc_insertion_point(field_mutable:amtpap.LoginV1.box_id)
  return _internal_mutable_box_id();
}
inline const std::string& LoginV1::_internal_box_id() const {
  return box_id_.GetNoArena();
}
inline void LoginV1::_internal_set_box_id(const std::string& value) {
  
  box_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginV1::set_box_id(std::string&& value) {
  
  box_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.LoginV1.box_id)
}
inline void LoginV1::set_box_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  box_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.LoginV1.box_id)
}
inline void LoginV1::set_box_id(const char* value, size_t size) {
  
  box_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.LoginV1.box_id)
}
inline std::string* LoginV1::_internal_mutable_box_id() {
  
  return box_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginV1::release_box_id() {
  // @@protoc_insertion_point(field_release:amtpap.LoginV1.box_id)
  
  return box_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginV1::set_allocated_box_id(std::string* box_id) {
  if (box_id != nullptr) {
    
  } else {
    
  }
  box_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), box_id);
  // @@protoc_insertion_point(field_set_allocated:amtpap.LoginV1.box_id)
}

// string pwd = 2;
inline void LoginV1::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginV1::pwd() const {
  // @@protoc_insertion_point(field_get:amtpap.LoginV1.pwd)
  return _internal_pwd();
}
inline void LoginV1::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:amtpap.LoginV1.pwd)
}
inline std::string* LoginV1::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:amtpap.LoginV1.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& LoginV1::_internal_pwd() const {
  return pwd_.GetNoArena();
}
inline void LoginV1::_internal_set_pwd(const std::string& value) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginV1::set_pwd(std::string&& value) {
  
  pwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.LoginV1.pwd)
}
inline void LoginV1::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.LoginV1.pwd)
}
inline void LoginV1::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.LoginV1.pwd)
}
inline std::string* LoginV1::_internal_mutable_pwd() {
  
  return pwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginV1::release_pwd() {
  // @@protoc_insertion_point(field_release:amtpap.LoginV1.pwd)
  
  return pwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginV1::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:amtpap.LoginV1.pwd)
}

// string manufactor = 3;
inline void LoginV1::clear_manufactor() {
  manufactor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginV1::manufactor() const {
  // @@protoc_insertion_point(field_get:amtpap.LoginV1.manufactor)
  return _internal_manufactor();
}
inline void LoginV1::set_manufactor(const std::string& value) {
  _internal_set_manufactor(value);
  // @@protoc_insertion_point(field_set:amtpap.LoginV1.manufactor)
}
inline std::string* LoginV1::mutable_manufactor() {
  // @@protoc_insertion_point(field_mutable:amtpap.LoginV1.manufactor)
  return _internal_mutable_manufactor();
}
inline const std::string& LoginV1::_internal_manufactor() const {
  return manufactor_.GetNoArena();
}
inline void LoginV1::_internal_set_manufactor(const std::string& value) {
  
  manufactor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginV1::set_manufactor(std::string&& value) {
  
  manufactor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.LoginV1.manufactor)
}
inline void LoginV1::set_manufactor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manufactor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.LoginV1.manufactor)
}
inline void LoginV1::set_manufactor(const char* value, size_t size) {
  
  manufactor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.LoginV1.manufactor)
}
inline std::string* LoginV1::_internal_mutable_manufactor() {
  
  return manufactor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginV1::release_manufactor() {
  // @@protoc_insertion_point(field_release:amtpap.LoginV1.manufactor)
  
  return manufactor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginV1::set_allocated_manufactor(std::string* manufactor) {
  if (manufactor != nullptr) {
    
  } else {
    
  }
  manufactor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufactor);
  // @@protoc_insertion_point(field_set_allocated:amtpap.LoginV1.manufactor)
}

// uint64 begin_time = 4;
inline void LoginV1::clear_begin_time() {
  begin_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginV1::_internal_begin_time() const {
  return begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginV1::begin_time() const {
  // @@protoc_insertion_point(field_get:amtpap.LoginV1.begin_time)
  return _internal_begin_time();
}
inline void LoginV1::_internal_set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  begin_time_ = value;
}
inline void LoginV1::set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_begin_time(value);
  // @@protoc_insertion_point(field_set:amtpap.LoginV1.begin_time)
}

// uint64 end_time = 5;
inline void LoginV1::clear_end_time() {
  end_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginV1::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginV1::end_time() const {
  // @@protoc_insertion_point(field_get:amtpap.LoginV1.end_time)
  return _internal_end_time();
}
inline void LoginV1::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_time_ = value;
}
inline void LoginV1::set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:amtpap.LoginV1.end_time)
}

// uint32 release_id = 6;
inline void LoginV1::clear_release_id() {
  release_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginV1::_internal_release_id() const {
  return release_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginV1::release_id() const {
  // @@protoc_insertion_point(field_get:amtpap.LoginV1.release_id)
  return _internal_release_id();
}
inline void LoginV1::_internal_set_release_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  release_id_ = value;
}
inline void LoginV1::set_release_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_release_id(value);
  // @@protoc_insertion_point(field_set:amtpap.LoginV1.release_id)
}

// string jwumq_id = 7;
inline void LoginV1::clear_jwumq_id() {
  jwumq_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginV1::jwumq_id() const {
  // @@protoc_insertion_point(field_get:amtpap.LoginV1.jwumq_id)
  return _internal_jwumq_id();
}
inline void LoginV1::set_jwumq_id(const std::string& value) {
  _internal_set_jwumq_id(value);
  // @@protoc_insertion_point(field_set:amtpap.LoginV1.jwumq_id)
}
inline std::string* LoginV1::mutable_jwumq_id() {
  // @@protoc_insertion_point(field_mutable:amtpap.LoginV1.jwumq_id)
  return _internal_mutable_jwumq_id();
}
inline const std::string& LoginV1::_internal_jwumq_id() const {
  return jwumq_id_.GetNoArena();
}
inline void LoginV1::_internal_set_jwumq_id(const std::string& value) {
  
  jwumq_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginV1::set_jwumq_id(std::string&& value) {
  
  jwumq_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.LoginV1.jwumq_id)
}
inline void LoginV1::set_jwumq_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jwumq_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.LoginV1.jwumq_id)
}
inline void LoginV1::set_jwumq_id(const char* value, size_t size) {
  
  jwumq_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.LoginV1.jwumq_id)
}
inline std::string* LoginV1::_internal_mutable_jwumq_id() {
  
  return jwumq_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginV1::release_jwumq_id() {
  // @@protoc_insertion_point(field_release:amtpap.LoginV1.jwumq_id)
  
  return jwumq_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginV1::set_allocated_jwumq_id(std::string* jwumq_id) {
  if (jwumq_id != nullptr) {
    
  } else {
    
  }
  jwumq_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jwumq_id);
  // @@protoc_insertion_point(field_set_allocated:amtpap.LoginV1.jwumq_id)
}

// -------------------------------------------------------------------

// LoginRespV1

// bytes token = 1;
inline void LoginRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.LoginRespV1.token)
  return _internal_token();
}
inline void LoginRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.LoginRespV1.token)
}
inline std::string* LoginRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.LoginRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& LoginRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void LoginRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.LoginRespV1.token)
}
inline void LoginRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.LoginRespV1.token)
}
inline void LoginRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.LoginRespV1.token)
}
inline std::string* LoginRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.LoginRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.LoginRespV1.token)
}

// string manufactor = 2;
inline void LoginRespV1::clear_manufactor() {
  manufactor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRespV1::manufactor() const {
  // @@protoc_insertion_point(field_get:amtpap.LoginRespV1.manufactor)
  return _internal_manufactor();
}
inline void LoginRespV1::set_manufactor(const std::string& value) {
  _internal_set_manufactor(value);
  // @@protoc_insertion_point(field_set:amtpap.LoginRespV1.manufactor)
}
inline std::string* LoginRespV1::mutable_manufactor() {
  // @@protoc_insertion_point(field_mutable:amtpap.LoginRespV1.manufactor)
  return _internal_mutable_manufactor();
}
inline const std::string& LoginRespV1::_internal_manufactor() const {
  return manufactor_.GetNoArena();
}
inline void LoginRespV1::_internal_set_manufactor(const std::string& value) {
  
  manufactor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRespV1::set_manufactor(std::string&& value) {
  
  manufactor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.LoginRespV1.manufactor)
}
inline void LoginRespV1::set_manufactor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manufactor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.LoginRespV1.manufactor)
}
inline void LoginRespV1::set_manufactor(const char* value, size_t size) {
  
  manufactor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.LoginRespV1.manufactor)
}
inline std::string* LoginRespV1::_internal_mutable_manufactor() {
  
  return manufactor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRespV1::release_manufactor() {
  // @@protoc_insertion_point(field_release:amtpap.LoginRespV1.manufactor)
  
  return manufactor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRespV1::set_allocated_manufactor(std::string* manufactor) {
  if (manufactor != nullptr) {
    
  } else {
    
  }
  manufactor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufactor);
  // @@protoc_insertion_point(field_set_allocated:amtpap.LoginRespV1.manufactor)
}

// int32 result = 3;
inline void LoginRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.LoginRespV1.result)
  return _internal_result();
}
inline void LoginRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void LoginRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.LoginRespV1.result)
}

// -------------------------------------------------------------------

// LogoutV1

// bytes token = 1;
inline void LogoutV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogoutV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.LogoutV1.token)
  return _internal_token();
}
inline void LogoutV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.LogoutV1.token)
}
inline std::string* LogoutV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.LogoutV1.token)
  return _internal_mutable_token();
}
inline const std::string& LogoutV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void LogoutV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogoutV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.LogoutV1.token)
}
inline void LogoutV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.LogoutV1.token)
}
inline void LogoutV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.LogoutV1.token)
}
inline std::string* LogoutV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogoutV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.LogoutV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.LogoutV1.token)
}

// -------------------------------------------------------------------

// LogoutRespV1

// bytes token = 1;
inline void LogoutRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogoutRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.LogoutRespV1.token)
  return _internal_token();
}
inline void LogoutRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.LogoutRespV1.token)
}
inline std::string* LogoutRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.LogoutRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& LogoutRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void LogoutRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogoutRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.LogoutRespV1.token)
}
inline void LogoutRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.LogoutRespV1.token)
}
inline void LogoutRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.LogoutRespV1.token)
}
inline std::string* LogoutRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogoutRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.LogoutRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.LogoutRespV1.token)
}

// int32 result = 2;
inline void LogoutRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoutRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoutRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.LogoutRespV1.result)
  return _internal_result();
}
inline void LogoutRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void LogoutRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.LogoutRespV1.result)
}

// -------------------------------------------------------------------

// ConfigV1

// bytes token = 1;
inline void ConfigV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigV1.token)
  return _internal_token();
}
inline void ConfigV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigV1.token)
}
inline std::string* ConfigV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigV1.token)
  return _internal_mutable_token();
}
inline const std::string& ConfigV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void ConfigV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigV1.token)
}
inline void ConfigV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigV1.token)
}
inline void ConfigV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigV1.token)
}
inline std::string* ConfigV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigV1.token)
}

// string atuid_version = 2;
inline void ConfigV1::clear_atuid_version() {
  atuid_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigV1::atuid_version() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigV1.atuid_version)
  return _internal_atuid_version();
}
inline void ConfigV1::set_atuid_version(const std::string& value) {
  _internal_set_atuid_version(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigV1.atuid_version)
}
inline std::string* ConfigV1::mutable_atuid_version() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigV1.atuid_version)
  return _internal_mutable_atuid_version();
}
inline const std::string& ConfigV1::_internal_atuid_version() const {
  return atuid_version_.GetNoArena();
}
inline void ConfigV1::_internal_set_atuid_version(const std::string& value) {
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigV1::set_atuid_version(std::string&& value) {
  
  atuid_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigV1.atuid_version)
}
inline void ConfigV1::set_atuid_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigV1.atuid_version)
}
inline void ConfigV1::set_atuid_version(const char* value, size_t size) {
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigV1.atuid_version)
}
inline std::string* ConfigV1::_internal_mutable_atuid_version() {
  
  return atuid_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigV1::release_atuid_version() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigV1.atuid_version)
  
  return atuid_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigV1::set_allocated_atuid_version(std::string* atuid_version) {
  if (atuid_version != nullptr) {
    
  } else {
    
  }
  atuid_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), atuid_version);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigV1.atuid_version)
}

// -------------------------------------------------------------------

// ConfigRespV1

// bytes token = 1;
inline void ConfigRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigRespV1.token)
  return _internal_token();
}
inline void ConfigRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigRespV1.token)
}
inline std::string* ConfigRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& ConfigRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void ConfigRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigRespV1.token)
}
inline void ConfigRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigRespV1.token)
}
inline void ConfigRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigRespV1.token)
}
inline std::string* ConfigRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigRespV1.token)
}

// string atuid_version = 2;
inline void ConfigRespV1::clear_atuid_version() {
  atuid_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigRespV1::atuid_version() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigRespV1.atuid_version)
  return _internal_atuid_version();
}
inline void ConfigRespV1::set_atuid_version(const std::string& value) {
  _internal_set_atuid_version(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigRespV1.atuid_version)
}
inline std::string* ConfigRespV1::mutable_atuid_version() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigRespV1.atuid_version)
  return _internal_mutable_atuid_version();
}
inline const std::string& ConfigRespV1::_internal_atuid_version() const {
  return atuid_version_.GetNoArena();
}
inline void ConfigRespV1::_internal_set_atuid_version(const std::string& value) {
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigRespV1::set_atuid_version(std::string&& value) {
  
  atuid_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigRespV1.atuid_version)
}
inline void ConfigRespV1::set_atuid_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigRespV1.atuid_version)
}
inline void ConfigRespV1::set_atuid_version(const char* value, size_t size) {
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigRespV1.atuid_version)
}
inline std::string* ConfigRespV1::_internal_mutable_atuid_version() {
  
  return atuid_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigRespV1::release_atuid_version() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigRespV1.atuid_version)
  
  return atuid_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigRespV1::set_allocated_atuid_version(std::string* atuid_version) {
  if (atuid_version != nullptr) {
    
  } else {
    
  }
  atuid_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), atuid_version);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigRespV1.atuid_version)
}

// int32 result = 3;
inline void ConfigRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigRespV1.result)
  return _internal_result();
}
inline void ConfigRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void ConfigRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigRespV1.result)
}

// bool update = 4;
inline void ConfigRespV1::clear_update() {
  update_ = false;
}
inline bool ConfigRespV1::_internal_update() const {
  return update_;
}
inline bool ConfigRespV1::update() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigRespV1.update)
  return _internal_update();
}
inline void ConfigRespV1::_internal_set_update(bool value) {
  
  update_ = value;
}
inline void ConfigRespV1::set_update(bool value) {
  _internal_set_update(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigRespV1.update)
}

// int32 packet_count = 5;
inline void ConfigRespV1::clear_packet_count() {
  packet_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigRespV1::_internal_packet_count() const {
  return packet_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigRespV1::packet_count() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigRespV1.packet_count)
  return _internal_packet_count();
}
inline void ConfigRespV1::_internal_set_packet_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  packet_count_ = value;
}
inline void ConfigRespV1::set_packet_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_packet_count(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigRespV1.packet_count)
}

// string md5 = 6;
inline void ConfigRespV1::clear_md5() {
  md5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigRespV1::md5() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigRespV1.md5)
  return _internal_md5();
}
inline void ConfigRespV1::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigRespV1.md5)
}
inline std::string* ConfigRespV1::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigRespV1.md5)
  return _internal_mutable_md5();
}
inline const std::string& ConfigRespV1::_internal_md5() const {
  return md5_.GetNoArena();
}
inline void ConfigRespV1::_internal_set_md5(const std::string& value) {
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigRespV1::set_md5(std::string&& value) {
  
  md5_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigRespV1.md5)
}
inline void ConfigRespV1::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigRespV1.md5)
}
inline void ConfigRespV1::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigRespV1.md5)
}
inline std::string* ConfigRespV1::_internal_mutable_md5() {
  
  return md5_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigRespV1::release_md5() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigRespV1.md5)
  
  return md5_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigRespV1::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigRespV1.md5)
}

// -------------------------------------------------------------------

// ConfigNotifyV1

// bytes token = 1;
inline void ConfigNotifyV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigNotifyV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigNotifyV1.token)
  return _internal_token();
}
inline void ConfigNotifyV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigNotifyV1.token)
}
inline std::string* ConfigNotifyV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigNotifyV1.token)
  return _internal_mutable_token();
}
inline const std::string& ConfigNotifyV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void ConfigNotifyV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigNotifyV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigNotifyV1.token)
}
inline void ConfigNotifyV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigNotifyV1.token)
}
inline void ConfigNotifyV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigNotifyV1.token)
}
inline std::string* ConfigNotifyV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigNotifyV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigNotifyV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigNotifyV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigNotifyV1.token)
}

// string atuid_version = 2;
inline void ConfigNotifyV1::clear_atuid_version() {
  atuid_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigNotifyV1::atuid_version() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigNotifyV1.atuid_version)
  return _internal_atuid_version();
}
inline void ConfigNotifyV1::set_atuid_version(const std::string& value) {
  _internal_set_atuid_version(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigNotifyV1.atuid_version)
}
inline std::string* ConfigNotifyV1::mutable_atuid_version() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigNotifyV1.atuid_version)
  return _internal_mutable_atuid_version();
}
inline const std::string& ConfigNotifyV1::_internal_atuid_version() const {
  return atuid_version_.GetNoArena();
}
inline void ConfigNotifyV1::_internal_set_atuid_version(const std::string& value) {
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigNotifyV1::set_atuid_version(std::string&& value) {
  
  atuid_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigNotifyV1.atuid_version)
}
inline void ConfigNotifyV1::set_atuid_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigNotifyV1.atuid_version)
}
inline void ConfigNotifyV1::set_atuid_version(const char* value, size_t size) {
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigNotifyV1.atuid_version)
}
inline std::string* ConfigNotifyV1::_internal_mutable_atuid_version() {
  
  return atuid_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigNotifyV1::release_atuid_version() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigNotifyV1.atuid_version)
  
  return atuid_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigNotifyV1::set_allocated_atuid_version(std::string* atuid_version) {
  if (atuid_version != nullptr) {
    
  } else {
    
  }
  atuid_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), atuid_version);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigNotifyV1.atuid_version)
}

// int32 packet_count = 3;
inline void ConfigNotifyV1::clear_packet_count() {
  packet_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigNotifyV1::_internal_packet_count() const {
  return packet_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigNotifyV1::packet_count() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigNotifyV1.packet_count)
  return _internal_packet_count();
}
inline void ConfigNotifyV1::_internal_set_packet_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  packet_count_ = value;
}
inline void ConfigNotifyV1::set_packet_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_packet_count(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigNotifyV1.packet_count)
}

// string md5 = 4;
inline void ConfigNotifyV1::clear_md5() {
  md5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigNotifyV1::md5() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigNotifyV1.md5)
  return _internal_md5();
}
inline void ConfigNotifyV1::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigNotifyV1.md5)
}
inline std::string* ConfigNotifyV1::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigNotifyV1.md5)
  return _internal_mutable_md5();
}
inline const std::string& ConfigNotifyV1::_internal_md5() const {
  return md5_.GetNoArena();
}
inline void ConfigNotifyV1::_internal_set_md5(const std::string& value) {
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigNotifyV1::set_md5(std::string&& value) {
  
  md5_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigNotifyV1.md5)
}
inline void ConfigNotifyV1::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigNotifyV1.md5)
}
inline void ConfigNotifyV1::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigNotifyV1.md5)
}
inline std::string* ConfigNotifyV1::_internal_mutable_md5() {
  
  return md5_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigNotifyV1::release_md5() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigNotifyV1.md5)
  
  return md5_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigNotifyV1::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigNotifyV1.md5)
}

// -------------------------------------------------------------------

// ConfigNotifyRespV1

// bytes token = 1;
inline void ConfigNotifyRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigNotifyRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigNotifyRespV1.token)
  return _internal_token();
}
inline void ConfigNotifyRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigNotifyRespV1.token)
}
inline std::string* ConfigNotifyRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigNotifyRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& ConfigNotifyRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void ConfigNotifyRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigNotifyRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigNotifyRespV1.token)
}
inline void ConfigNotifyRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigNotifyRespV1.token)
}
inline void ConfigNotifyRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigNotifyRespV1.token)
}
inline std::string* ConfigNotifyRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigNotifyRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigNotifyRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigNotifyRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigNotifyRespV1.token)
}

// string atuid_version = 2;
inline void ConfigNotifyRespV1::clear_atuid_version() {
  atuid_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigNotifyRespV1::atuid_version() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigNotifyRespV1.atuid_version)
  return _internal_atuid_version();
}
inline void ConfigNotifyRespV1::set_atuid_version(const std::string& value) {
  _internal_set_atuid_version(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigNotifyRespV1.atuid_version)
}
inline std::string* ConfigNotifyRespV1::mutable_atuid_version() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigNotifyRespV1.atuid_version)
  return _internal_mutable_atuid_version();
}
inline const std::string& ConfigNotifyRespV1::_internal_atuid_version() const {
  return atuid_version_.GetNoArena();
}
inline void ConfigNotifyRespV1::_internal_set_atuid_version(const std::string& value) {
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigNotifyRespV1::set_atuid_version(std::string&& value) {
  
  atuid_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigNotifyRespV1.atuid_version)
}
inline void ConfigNotifyRespV1::set_atuid_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigNotifyRespV1.atuid_version)
}
inline void ConfigNotifyRespV1::set_atuid_version(const char* value, size_t size) {
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigNotifyRespV1.atuid_version)
}
inline std::string* ConfigNotifyRespV1::_internal_mutable_atuid_version() {
  
  return atuid_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigNotifyRespV1::release_atuid_version() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigNotifyRespV1.atuid_version)
  
  return atuid_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigNotifyRespV1::set_allocated_atuid_version(std::string* atuid_version) {
  if (atuid_version != nullptr) {
    
  } else {
    
  }
  atuid_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), atuid_version);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigNotifyRespV1.atuid_version)
}

// int32 result = 3;
inline void ConfigNotifyRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigNotifyRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigNotifyRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigNotifyRespV1.result)
  return _internal_result();
}
inline void ConfigNotifyRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void ConfigNotifyRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigNotifyRespV1.result)
}

// -------------------------------------------------------------------

// ConfigDataV1

// bytes token = 1;
inline void ConfigDataV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigDataV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigDataV1.token)
  return _internal_token();
}
inline void ConfigDataV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigDataV1.token)
}
inline std::string* ConfigDataV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigDataV1.token)
  return _internal_mutable_token();
}
inline const std::string& ConfigDataV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void ConfigDataV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigDataV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigDataV1.token)
}
inline void ConfigDataV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigDataV1.token)
}
inline void ConfigDataV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigDataV1.token)
}
inline std::string* ConfigDataV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigDataV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigDataV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigDataV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigDataV1.token)
}

// string atuid_version = 2;
inline void ConfigDataV1::clear_atuid_version() {
  atuid_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigDataV1::atuid_version() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigDataV1.atuid_version)
  return _internal_atuid_version();
}
inline void ConfigDataV1::set_atuid_version(const std::string& value) {
  _internal_set_atuid_version(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigDataV1.atuid_version)
}
inline std::string* ConfigDataV1::mutable_atuid_version() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigDataV1.atuid_version)
  return _internal_mutable_atuid_version();
}
inline const std::string& ConfigDataV1::_internal_atuid_version() const {
  return atuid_version_.GetNoArena();
}
inline void ConfigDataV1::_internal_set_atuid_version(const std::string& value) {
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigDataV1::set_atuid_version(std::string&& value) {
  
  atuid_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigDataV1.atuid_version)
}
inline void ConfigDataV1::set_atuid_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigDataV1.atuid_version)
}
inline void ConfigDataV1::set_atuid_version(const char* value, size_t size) {
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigDataV1.atuid_version)
}
inline std::string* ConfigDataV1::_internal_mutable_atuid_version() {
  
  return atuid_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigDataV1::release_atuid_version() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigDataV1.atuid_version)
  
  return atuid_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigDataV1::set_allocated_atuid_version(std::string* atuid_version) {
  if (atuid_version != nullptr) {
    
  } else {
    
  }
  atuid_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), atuid_version);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigDataV1.atuid_version)
}

// int32 packet_count = 3;
inline void ConfigDataV1::clear_packet_count() {
  packet_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigDataV1::_internal_packet_count() const {
  return packet_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigDataV1::packet_count() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigDataV1.packet_count)
  return _internal_packet_count();
}
inline void ConfigDataV1::_internal_set_packet_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  packet_count_ = value;
}
inline void ConfigDataV1::set_packet_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_packet_count(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigDataV1.packet_count)
}

// int32 packet_no = 4;
inline void ConfigDataV1::clear_packet_no() {
  packet_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigDataV1::_internal_packet_no() const {
  return packet_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigDataV1::packet_no() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigDataV1.packet_no)
  return _internal_packet_no();
}
inline void ConfigDataV1::_internal_set_packet_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  packet_no_ = value;
}
inline void ConfigDataV1::set_packet_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_packet_no(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigDataV1.packet_no)
}

// uint32 data_length = 5;
inline void ConfigDataV1::clear_data_length() {
  data_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConfigDataV1::_internal_data_length() const {
  return data_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConfigDataV1::data_length() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigDataV1.data_length)
  return _internal_data_length();
}
inline void ConfigDataV1::_internal_set_data_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_length_ = value;
}
inline void ConfigDataV1::set_data_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_length(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigDataV1.data_length)
}

// bytes config_data = 6;
inline void ConfigDataV1::clear_config_data() {
  config_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigDataV1::config_data() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigDataV1.config_data)
  return _internal_config_data();
}
inline void ConfigDataV1::set_config_data(const std::string& value) {
  _internal_set_config_data(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigDataV1.config_data)
}
inline std::string* ConfigDataV1::mutable_config_data() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigDataV1.config_data)
  return _internal_mutable_config_data();
}
inline const std::string& ConfigDataV1::_internal_config_data() const {
  return config_data_.GetNoArena();
}
inline void ConfigDataV1::_internal_set_config_data(const std::string& value) {
  
  config_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigDataV1::set_config_data(std::string&& value) {
  
  config_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigDataV1.config_data)
}
inline void ConfigDataV1::set_config_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigDataV1.config_data)
}
inline void ConfigDataV1::set_config_data(const void* value, size_t size) {
  
  config_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigDataV1.config_data)
}
inline std::string* ConfigDataV1::_internal_mutable_config_data() {
  
  return config_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigDataV1::release_config_data() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigDataV1.config_data)
  
  return config_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigDataV1::set_allocated_config_data(std::string* config_data) {
  if (config_data != nullptr) {
    
  } else {
    
  }
  config_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_data);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigDataV1.config_data)
}

// -------------------------------------------------------------------

// ConfigDataRespV1

// bytes token = 1;
inline void ConfigDataRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigDataRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigDataRespV1.token)
  return _internal_token();
}
inline void ConfigDataRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigDataRespV1.token)
}
inline std::string* ConfigDataRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigDataRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& ConfigDataRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void ConfigDataRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigDataRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigDataRespV1.token)
}
inline void ConfigDataRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigDataRespV1.token)
}
inline void ConfigDataRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigDataRespV1.token)
}
inline std::string* ConfigDataRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigDataRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigDataRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigDataRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigDataRespV1.token)
}

// string atuid_version = 2;
inline void ConfigDataRespV1::clear_atuid_version() {
  atuid_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfigDataRespV1::atuid_version() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigDataRespV1.atuid_version)
  return _internal_atuid_version();
}
inline void ConfigDataRespV1::set_atuid_version(const std::string& value) {
  _internal_set_atuid_version(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigDataRespV1.atuid_version)
}
inline std::string* ConfigDataRespV1::mutable_atuid_version() {
  // @@protoc_insertion_point(field_mutable:amtpap.ConfigDataRespV1.atuid_version)
  return _internal_mutable_atuid_version();
}
inline const std::string& ConfigDataRespV1::_internal_atuid_version() const {
  return atuid_version_.GetNoArena();
}
inline void ConfigDataRespV1::_internal_set_atuid_version(const std::string& value) {
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfigDataRespV1::set_atuid_version(std::string&& value) {
  
  atuid_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ConfigDataRespV1.atuid_version)
}
inline void ConfigDataRespV1::set_atuid_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ConfigDataRespV1.atuid_version)
}
inline void ConfigDataRespV1::set_atuid_version(const char* value, size_t size) {
  
  atuid_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ConfigDataRespV1.atuid_version)
}
inline std::string* ConfigDataRespV1::_internal_mutable_atuid_version() {
  
  return atuid_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfigDataRespV1::release_atuid_version() {
  // @@protoc_insertion_point(field_release:amtpap.ConfigDataRespV1.atuid_version)
  
  return atuid_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigDataRespV1::set_allocated_atuid_version(std::string* atuid_version) {
  if (atuid_version != nullptr) {
    
  } else {
    
  }
  atuid_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), atuid_version);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ConfigDataRespV1.atuid_version)
}

// int32 packet_no = 3;
inline void ConfigDataRespV1::clear_packet_no() {
  packet_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigDataRespV1::_internal_packet_no() const {
  return packet_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigDataRespV1::packet_no() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigDataRespV1.packet_no)
  return _internal_packet_no();
}
inline void ConfigDataRespV1::_internal_set_packet_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  packet_no_ = value;
}
inline void ConfigDataRespV1::set_packet_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_packet_no(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigDataRespV1.packet_no)
}

// int32 result = 4;
inline void ConfigDataRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigDataRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigDataRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.ConfigDataRespV1.result)
  return _internal_result();
}
inline void ConfigDataRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void ConfigDataRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.ConfigDataRespV1.result)
}

// -------------------------------------------------------------------

// ReportEventV1

// bytes token = 1;
inline void ReportEventV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReportEventV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.ReportEventV1.token)
  return _internal_token();
}
inline void ReportEventV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.ReportEventV1.token)
}
inline std::string* ReportEventV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.ReportEventV1.token)
  return _internal_mutable_token();
}
inline const std::string& ReportEventV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void ReportEventV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReportEventV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ReportEventV1.token)
}
inline void ReportEventV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ReportEventV1.token)
}
inline void ReportEventV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ReportEventV1.token)
}
inline std::string* ReportEventV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReportEventV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.ReportEventV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReportEventV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ReportEventV1.token)
}

// uint32 ts_sec = 2;
inline void ReportEventV1::clear_ts_sec() {
  ts_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportEventV1::_internal_ts_sec() const {
  return ts_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportEventV1::ts_sec() const {
  // @@protoc_insertion_point(field_get:amtpap.ReportEventV1.ts_sec)
  return _internal_ts_sec();
}
inline void ReportEventV1::_internal_set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ts_sec_ = value;
}
inline void ReportEventV1::set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ts_sec(value);
  // @@protoc_insertion_point(field_set:amtpap.ReportEventV1.ts_sec)
}

// uint32 ts_usec = 3;
inline void ReportEventV1::clear_ts_usec() {
  ts_usec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportEventV1::_internal_ts_usec() const {
  return ts_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportEventV1::ts_usec() const {
  // @@protoc_insertion_point(field_get:amtpap.ReportEventV1.ts_usec)
  return _internal_ts_usec();
}
inline void ReportEventV1::_internal_set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ts_usec_ = value;
}
inline void ReportEventV1::set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ts_usec(value);
  // @@protoc_insertion_point(field_set:amtpap.ReportEventV1.ts_usec)
}

// uint32 module = 4;
inline void ReportEventV1::clear_module() {
  module_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportEventV1::_internal_module() const {
  return module_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportEventV1::module() const {
  // @@protoc_insertion_point(field_get:amtpap.ReportEventV1.module)
  return _internal_module();
}
inline void ReportEventV1::_internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  module_ = value;
}
inline void ReportEventV1::set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:amtpap.ReportEventV1.module)
}

// uint32 event_code = 5;
inline void ReportEventV1::clear_event_code() {
  event_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportEventV1::_internal_event_code() const {
  return event_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportEventV1::event_code() const {
  // @@protoc_insertion_point(field_get:amtpap.ReportEventV1.event_code)
  return _internal_event_code();
}
inline void ReportEventV1::_internal_set_event_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  event_code_ = value;
}
inline void ReportEventV1::set_event_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:amtpap.ReportEventV1.event_code)
}

// -------------------------------------------------------------------

// ReportEventRespV1

// bytes token = 1;
inline void ReportEventRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReportEventRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.ReportEventRespV1.token)
  return _internal_token();
}
inline void ReportEventRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.ReportEventRespV1.token)
}
inline std::string* ReportEventRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.ReportEventRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& ReportEventRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void ReportEventRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReportEventRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ReportEventRespV1.token)
}
inline void ReportEventRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ReportEventRespV1.token)
}
inline void ReportEventRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ReportEventRespV1.token)
}
inline std::string* ReportEventRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReportEventRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.ReportEventRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReportEventRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ReportEventRespV1.token)
}

// int32 result = 2;
inline void ReportEventRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportEventRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportEventRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.ReportEventRespV1.result)
  return _internal_result();
}
inline void ReportEventRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void ReportEventRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.ReportEventRespV1.result)
}

// -------------------------------------------------------------------

// AlarmV1

// bytes token = 1;
inline void AlarmV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlarmV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmV1.token)
  return _internal_token();
}
inline void AlarmV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmV1.token)
}
inline std::string* AlarmV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.AlarmV1.token)
  return _internal_mutable_token();
}
inline const std::string& AlarmV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void AlarmV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AlarmV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.AlarmV1.token)
}
inline void AlarmV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.AlarmV1.token)
}
inline void AlarmV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.AlarmV1.token)
}
inline std::string* AlarmV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlarmV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.AlarmV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.AlarmV1.token)
}

// uint32 module = 2;
inline void AlarmV1::clear_module() {
  module_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmV1::_internal_module() const {
  return module_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmV1::module() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmV1.module)
  return _internal_module();
}
inline void AlarmV1::_internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  module_ = value;
}
inline void AlarmV1::set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmV1.module)
}

// uint32 seq = 3;
inline void AlarmV1::clear_seq() {
  seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmV1::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmV1::seq() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmV1.seq)
  return _internal_seq();
}
inline void AlarmV1::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_ = value;
}
inline void AlarmV1::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmV1.seq)
}

// uint32 alarm_code = 4;
inline void AlarmV1::clear_alarm_code() {
  alarm_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmV1::_internal_alarm_code() const {
  return alarm_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmV1::alarm_code() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmV1.alarm_code)
  return _internal_alarm_code();
}
inline void AlarmV1::_internal_set_alarm_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  alarm_code_ = value;
}
inline void AlarmV1::set_alarm_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_alarm_code(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmV1.alarm_code)
}

// uint32 reason_code = 5;
inline void AlarmV1::clear_reason_code() {
  reason_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmV1::_internal_reason_code() const {
  return reason_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmV1::reason_code() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmV1.reason_code)
  return _internal_reason_code();
}
inline void AlarmV1::_internal_set_reason_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reason_code_ = value;
}
inline void AlarmV1::set_reason_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason_code(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmV1.reason_code)
}

// uint32 ts_sec = 6;
inline void AlarmV1::clear_ts_sec() {
  ts_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmV1::_internal_ts_sec() const {
  return ts_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmV1::ts_sec() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmV1.ts_sec)
  return _internal_ts_sec();
}
inline void AlarmV1::_internal_set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ts_sec_ = value;
}
inline void AlarmV1::set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ts_sec(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmV1.ts_sec)
}

// uint32 ts_usec = 7;
inline void AlarmV1::clear_ts_usec() {
  ts_usec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmV1::_internal_ts_usec() const {
  return ts_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmV1::ts_usec() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmV1.ts_usec)
  return _internal_ts_usec();
}
inline void AlarmV1::_internal_set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ts_usec_ = value;
}
inline void AlarmV1::set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ts_usec(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmV1.ts_usec)
}

// -------------------------------------------------------------------

// AlarmRespV1

// bytes token = 1;
inline void AlarmRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlarmRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmRespV1.token)
  return _internal_token();
}
inline void AlarmRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmRespV1.token)
}
inline std::string* AlarmRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.AlarmRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& AlarmRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void AlarmRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AlarmRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.AlarmRespV1.token)
}
inline void AlarmRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.AlarmRespV1.token)
}
inline void AlarmRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.AlarmRespV1.token)
}
inline std::string* AlarmRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlarmRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.AlarmRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.AlarmRespV1.token)
}

// int32 result = 2;
inline void AlarmRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmRespV1.result)
  return _internal_result();
}
inline void AlarmRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void AlarmRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmRespV1.result)
}

// -------------------------------------------------------------------

// AlarmClearV1

// bytes token = 1;
inline void AlarmClearV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlarmClearV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmClearV1.token)
  return _internal_token();
}
inline void AlarmClearV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmClearV1.token)
}
inline std::string* AlarmClearV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.AlarmClearV1.token)
  return _internal_mutable_token();
}
inline const std::string& AlarmClearV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void AlarmClearV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AlarmClearV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.AlarmClearV1.token)
}
inline void AlarmClearV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.AlarmClearV1.token)
}
inline void AlarmClearV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.AlarmClearV1.token)
}
inline std::string* AlarmClearV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlarmClearV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.AlarmClearV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmClearV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.AlarmClearV1.token)
}

// uint32 module = 2;
inline void AlarmClearV1::clear_module() {
  module_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmClearV1::_internal_module() const {
  return module_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmClearV1::module() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmClearV1.module)
  return _internal_module();
}
inline void AlarmClearV1::_internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  module_ = value;
}
inline void AlarmClearV1::set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmClearV1.module)
}

// uint32 seq = 3;
inline void AlarmClearV1::clear_seq() {
  seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmClearV1::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmClearV1::seq() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmClearV1.seq)
  return _internal_seq();
}
inline void AlarmClearV1::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_ = value;
}
inline void AlarmClearV1::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmClearV1.seq)
}

// uint32 alarm_code = 4;
inline void AlarmClearV1::clear_alarm_code() {
  alarm_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmClearV1::_internal_alarm_code() const {
  return alarm_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmClearV1::alarm_code() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmClearV1.alarm_code)
  return _internal_alarm_code();
}
inline void AlarmClearV1::_internal_set_alarm_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  alarm_code_ = value;
}
inline void AlarmClearV1::set_alarm_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_alarm_code(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmClearV1.alarm_code)
}

// uint32 ts_sec = 5;
inline void AlarmClearV1::clear_ts_sec() {
  ts_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmClearV1::_internal_ts_sec() const {
  return ts_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmClearV1::ts_sec() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmClearV1.ts_sec)
  return _internal_ts_sec();
}
inline void AlarmClearV1::_internal_set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ts_sec_ = value;
}
inline void AlarmClearV1::set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ts_sec(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmClearV1.ts_sec)
}

// uint32 ts_usec = 6;
inline void AlarmClearV1::clear_ts_usec() {
  ts_usec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmClearV1::_internal_ts_usec() const {
  return ts_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmClearV1::ts_usec() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmClearV1.ts_usec)
  return _internal_ts_usec();
}
inline void AlarmClearV1::_internal_set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ts_usec_ = value;
}
inline void AlarmClearV1::set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ts_usec(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmClearV1.ts_usec)
}

// -------------------------------------------------------------------

// AlarmClearRespV1

// bytes token = 1;
inline void AlarmClearRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlarmClearRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmClearRespV1.token)
  return _internal_token();
}
inline void AlarmClearRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmClearRespV1.token)
}
inline std::string* AlarmClearRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.AlarmClearRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& AlarmClearRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void AlarmClearRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AlarmClearRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.AlarmClearRespV1.token)
}
inline void AlarmClearRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.AlarmClearRespV1.token)
}
inline void AlarmClearRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.AlarmClearRespV1.token)
}
inline std::string* AlarmClearRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlarmClearRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.AlarmClearRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmClearRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.AlarmClearRespV1.token)
}

// int32 result = 2;
inline void AlarmClearRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmClearRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlarmClearRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.AlarmClearRespV1.result)
  return _internal_result();
}
inline void AlarmClearRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void AlarmClearRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.AlarmClearRespV1.result)
}

// -------------------------------------------------------------------

// GPSInfoV1

// bytes token = 1;
inline void GPSInfoV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GPSInfoV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.GPSInfoV1.token)
  return _internal_token();
}
inline void GPSInfoV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.GPSInfoV1.token)
}
inline std::string* GPSInfoV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.GPSInfoV1.token)
  return _internal_mutable_token();
}
inline const std::string& GPSInfoV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void GPSInfoV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GPSInfoV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.GPSInfoV1.token)
}
inline void GPSInfoV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.GPSInfoV1.token)
}
inline void GPSInfoV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.GPSInfoV1.token)
}
inline std::string* GPSInfoV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GPSInfoV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.GPSInfoV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GPSInfoV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.GPSInfoV1.token)
}

// float longitude = 2;
inline void GPSInfoV1::clear_longitude() {
  longitude_ = 0;
}
inline float GPSInfoV1::_internal_longitude() const {
  return longitude_;
}
inline float GPSInfoV1::longitude() const {
  // @@protoc_insertion_point(field_get:amtpap.GPSInfoV1.longitude)
  return _internal_longitude();
}
inline void GPSInfoV1::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void GPSInfoV1::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:amtpap.GPSInfoV1.longitude)
}

// float latitude = 3;
inline void GPSInfoV1::clear_latitude() {
  latitude_ = 0;
}
inline float GPSInfoV1::_internal_latitude() const {
  return latitude_;
}
inline float GPSInfoV1::latitude() const {
  // @@protoc_insertion_point(field_get:amtpap.GPSInfoV1.latitude)
  return _internal_latitude();
}
inline void GPSInfoV1::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void GPSInfoV1::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:amtpap.GPSInfoV1.latitude)
}

// float altitude = 4;
inline void GPSInfoV1::clear_altitude() {
  altitude_ = 0;
}
inline float GPSInfoV1::_internal_altitude() const {
  return altitude_;
}
inline float GPSInfoV1::altitude() const {
  // @@protoc_insertion_point(field_get:amtpap.GPSInfoV1.altitude)
  return _internal_altitude();
}
inline void GPSInfoV1::_internal_set_altitude(float value) {
  
  altitude_ = value;
}
inline void GPSInfoV1::set_altitude(float value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:amtpap.GPSInfoV1.altitude)
}

// float speed = 5;
inline void GPSInfoV1::clear_speed() {
  speed_ = 0;
}
inline float GPSInfoV1::_internal_speed() const {
  return speed_;
}
inline float GPSInfoV1::speed() const {
  // @@protoc_insertion_point(field_get:amtpap.GPSInfoV1.speed)
  return _internal_speed();
}
inline void GPSInfoV1::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void GPSInfoV1::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:amtpap.GPSInfoV1.speed)
}

// float heading = 6;
inline void GPSInfoV1::clear_heading() {
  heading_ = 0;
}
inline float GPSInfoV1::_internal_heading() const {
  return heading_;
}
inline float GPSInfoV1::heading() const {
  // @@protoc_insertion_point(field_get:amtpap.GPSInfoV1.heading)
  return _internal_heading();
}
inline void GPSInfoV1::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void GPSInfoV1::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:amtpap.GPSInfoV1.heading)
}

// uint32 ts_sec = 7;
inline void GPSInfoV1::clear_ts_sec() {
  ts_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSInfoV1::_internal_ts_sec() const {
  return ts_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSInfoV1::ts_sec() const {
  // @@protoc_insertion_point(field_get:amtpap.GPSInfoV1.ts_sec)
  return _internal_ts_sec();
}
inline void GPSInfoV1::_internal_set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ts_sec_ = value;
}
inline void GPSInfoV1::set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ts_sec(value);
  // @@protoc_insertion_point(field_set:amtpap.GPSInfoV1.ts_sec)
}

// uint32 ts_usec = 8;
inline void GPSInfoV1::clear_ts_usec() {
  ts_usec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSInfoV1::_internal_ts_usec() const {
  return ts_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSInfoV1::ts_usec() const {
  // @@protoc_insertion_point(field_get:amtpap.GPSInfoV1.ts_usec)
  return _internal_ts_usec();
}
inline void GPSInfoV1::_internal_set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ts_usec_ = value;
}
inline void GPSInfoV1::set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ts_usec(value);
  // @@protoc_insertion_point(field_set:amtpap.GPSInfoV1.ts_usec)
}

// -------------------------------------------------------------------

// GPSInfoRespV1

// bytes token = 1;
inline void GPSInfoRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GPSInfoRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.GPSInfoRespV1.token)
  return _internal_token();
}
inline void GPSInfoRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.GPSInfoRespV1.token)
}
inline std::string* GPSInfoRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.GPSInfoRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& GPSInfoRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void GPSInfoRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GPSInfoRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.GPSInfoRespV1.token)
}
inline void GPSInfoRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.GPSInfoRespV1.token)
}
inline void GPSInfoRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.GPSInfoRespV1.token)
}
inline std::string* GPSInfoRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GPSInfoRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.GPSInfoRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GPSInfoRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.GPSInfoRespV1.token)
}

// int32 result = 2;
inline void GPSInfoRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GPSInfoRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GPSInfoRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.GPSInfoRespV1.result)
  return _internal_result();
}
inline void GPSInfoRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void GPSInfoRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.GPSInfoRespV1.result)
}

// -------------------------------------------------------------------

// StatusInfoV1

// bytes token = 1;
inline void StatusInfoV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StatusInfoV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.StatusInfoV1.token)
  return _internal_token();
}
inline void StatusInfoV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.StatusInfoV1.token)
}
inline std::string* StatusInfoV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.StatusInfoV1.token)
  return _internal_mutable_token();
}
inline const std::string& StatusInfoV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void StatusInfoV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StatusInfoV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.StatusInfoV1.token)
}
inline void StatusInfoV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.StatusInfoV1.token)
}
inline void StatusInfoV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.StatusInfoV1.token)
}
inline std::string* StatusInfoV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StatusInfoV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.StatusInfoV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StatusInfoV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.StatusInfoV1.token)
}

// uint32 power_mode = 2;
inline void StatusInfoV1::clear_power_mode() {
  power_mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusInfoV1::_internal_power_mode() const {
  return power_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusInfoV1::power_mode() const {
  // @@protoc_insertion_point(field_get:amtpap.StatusInfoV1.power_mode)
  return _internal_power_mode();
}
inline void StatusInfoV1::_internal_set_power_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  power_mode_ = value;
}
inline void StatusInfoV1::set_power_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_power_mode(value);
  // @@protoc_insertion_point(field_set:amtpap.StatusInfoV1.power_mode)
}

// uint32 files_letf = 3;
inline void StatusInfoV1::clear_files_letf() {
  files_letf_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusInfoV1::_internal_files_letf() const {
  return files_letf_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusInfoV1::files_letf() const {
  // @@protoc_insertion_point(field_get:amtpap.StatusInfoV1.files_letf)
  return _internal_files_letf();
}
inline void StatusInfoV1::_internal_set_files_letf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  files_letf_ = value;
}
inline void StatusInfoV1::set_files_letf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_files_letf(value);
  // @@protoc_insertion_point(field_set:amtpap.StatusInfoV1.files_letf)
}

// float temperature = 4;
inline void StatusInfoV1::clear_temperature() {
  temperature_ = 0;
}
inline float StatusInfoV1::_internal_temperature() const {
  return temperature_;
}
inline float StatusInfoV1::temperature() const {
  // @@protoc_insertion_point(field_get:amtpap.StatusInfoV1.temperature)
  return _internal_temperature();
}
inline void StatusInfoV1::_internal_set_temperature(float value) {
  
  temperature_ = value;
}
inline void StatusInfoV1::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:amtpap.StatusInfoV1.temperature)
}

// float disk_space = 5;
inline void StatusInfoV1::clear_disk_space() {
  disk_space_ = 0;
}
inline float StatusInfoV1::_internal_disk_space() const {
  return disk_space_;
}
inline float StatusInfoV1::disk_space() const {
  // @@protoc_insertion_point(field_get:amtpap.StatusInfoV1.disk_space)
  return _internal_disk_space();
}
inline void StatusInfoV1::_internal_set_disk_space(float value) {
  
  disk_space_ = value;
}
inline void StatusInfoV1::set_disk_space(float value) {
  _internal_set_disk_space(value);
  // @@protoc_insertion_point(field_set:amtpap.StatusInfoV1.disk_space)
}

// uint32 ts_sec = 6;
inline void StatusInfoV1::clear_ts_sec() {
  ts_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusInfoV1::_internal_ts_sec() const {
  return ts_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusInfoV1::ts_sec() const {
  // @@protoc_insertion_point(field_get:amtpap.StatusInfoV1.ts_sec)
  return _internal_ts_sec();
}
inline void StatusInfoV1::_internal_set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ts_sec_ = value;
}
inline void StatusInfoV1::set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ts_sec(value);
  // @@protoc_insertion_point(field_set:amtpap.StatusInfoV1.ts_sec)
}

// uint32 ts_usec = 7;
inline void StatusInfoV1::clear_ts_usec() {
  ts_usec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusInfoV1::_internal_ts_usec() const {
  return ts_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusInfoV1::ts_usec() const {
  // @@protoc_insertion_point(field_get:amtpap.StatusInfoV1.ts_usec)
  return _internal_ts_usec();
}
inline void StatusInfoV1::_internal_set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ts_usec_ = value;
}
inline void StatusInfoV1::set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ts_usec(value);
  // @@protoc_insertion_point(field_set:amtpap.StatusInfoV1.ts_usec)
}

// -------------------------------------------------------------------

// StatusInfoRespV1

// bytes token = 1;
inline void StatusInfoRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StatusInfoRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.StatusInfoRespV1.token)
  return _internal_token();
}
inline void StatusInfoRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.StatusInfoRespV1.token)
}
inline std::string* StatusInfoRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.StatusInfoRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& StatusInfoRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void StatusInfoRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StatusInfoRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.StatusInfoRespV1.token)
}
inline void StatusInfoRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.StatusInfoRespV1.token)
}
inline void StatusInfoRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.StatusInfoRespV1.token)
}
inline std::string* StatusInfoRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StatusInfoRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.StatusInfoRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StatusInfoRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.StatusInfoRespV1.token)
}

// int32 result = 2;
inline void StatusInfoRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusInfoRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusInfoRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.StatusInfoRespV1.result)
  return _internal_result();
}
inline void StatusInfoRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void StatusInfoRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.StatusInfoRespV1.result)
}

// -------------------------------------------------------------------

// UploadFileV1

// bytes token = 1;
inline void UploadFileV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadFileV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileV1.token)
  return _internal_token();
}
inline void UploadFileV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileV1.token)
}
inline std::string* UploadFileV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.UploadFileV1.token)
  return _internal_mutable_token();
}
inline const std::string& UploadFileV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void UploadFileV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadFileV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.UploadFileV1.token)
}
inline void UploadFileV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.UploadFileV1.token)
}
inline void UploadFileV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.UploadFileV1.token)
}
inline std::string* UploadFileV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadFileV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.UploadFileV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadFileV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.UploadFileV1.token)
}

// string file_name = 2;
inline void UploadFileV1::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadFileV1::file_name() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileV1.file_name)
  return _internal_file_name();
}
inline void UploadFileV1::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileV1.file_name)
}
inline std::string* UploadFileV1::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:amtpap.UploadFileV1.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& UploadFileV1::_internal_file_name() const {
  return file_name_.GetNoArena();
}
inline void UploadFileV1::_internal_set_file_name(const std::string& value) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadFileV1::set_file_name(std::string&& value) {
  
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.UploadFileV1.file_name)
}
inline void UploadFileV1::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.UploadFileV1.file_name)
}
inline void UploadFileV1::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.UploadFileV1.file_name)
}
inline std::string* UploadFileV1::_internal_mutable_file_name() {
  
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadFileV1::release_file_name() {
  // @@protoc_insertion_point(field_release:amtpap.UploadFileV1.file_name)
  
  return file_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadFileV1::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:amtpap.UploadFileV1.file_name)
}

// bool retransmit = 3;
inline void UploadFileV1::clear_retransmit() {
  retransmit_ = false;
}
inline bool UploadFileV1::_internal_retransmit() const {
  return retransmit_;
}
inline bool UploadFileV1::retransmit() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileV1.retransmit)
  return _internal_retransmit();
}
inline void UploadFileV1::_internal_set_retransmit(bool value) {
  
  retransmit_ = value;
}
inline void UploadFileV1::set_retransmit(bool value) {
  _internal_set_retransmit(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileV1.retransmit)
}

// uint32 module = 4;
inline void UploadFileV1::clear_module() {
  module_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileV1::_internal_module() const {
  return module_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileV1::module() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileV1.module)
  return _internal_module();
}
inline void UploadFileV1::_internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  module_ = value;
}
inline void UploadFileV1::set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileV1.module)
}

// -------------------------------------------------------------------

// UploadFileRespV1

// bytes token = 1;
inline void UploadFileRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadFileRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileRespV1.token)
  return _internal_token();
}
inline void UploadFileRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileRespV1.token)
}
inline std::string* UploadFileRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.UploadFileRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& UploadFileRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void UploadFileRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadFileRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.UploadFileRespV1.token)
}
inline void UploadFileRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.UploadFileRespV1.token)
}
inline void UploadFileRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.UploadFileRespV1.token)
}
inline std::string* UploadFileRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadFileRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.UploadFileRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadFileRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.UploadFileRespV1.token)
}

// string file_name = 2;
inline void UploadFileRespV1::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadFileRespV1::file_name() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileRespV1.file_name)
  return _internal_file_name();
}
inline void UploadFileRespV1::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileRespV1.file_name)
}
inline std::string* UploadFileRespV1::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:amtpap.UploadFileRespV1.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& UploadFileRespV1::_internal_file_name() const {
  return file_name_.GetNoArena();
}
inline void UploadFileRespV1::_internal_set_file_name(const std::string& value) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadFileRespV1::set_file_name(std::string&& value) {
  
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.UploadFileRespV1.file_name)
}
inline void UploadFileRespV1::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.UploadFileRespV1.file_name)
}
inline void UploadFileRespV1::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.UploadFileRespV1.file_name)
}
inline std::string* UploadFileRespV1::_internal_mutable_file_name() {
  
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadFileRespV1::release_file_name() {
  // @@protoc_insertion_point(field_release:amtpap.UploadFileRespV1.file_name)
  
  return file_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadFileRespV1::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:amtpap.UploadFileRespV1.file_name)
}

// uint32 file_id = 3;
inline void UploadFileRespV1::clear_file_id() {
  file_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileRespV1::_internal_file_id() const {
  return file_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileRespV1::file_id() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileRespV1.file_id)
  return _internal_file_id();
}
inline void UploadFileRespV1::_internal_set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  file_id_ = value;
}
inline void UploadFileRespV1::set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_id(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileRespV1.file_id)
}

// uint32 file_size = 4;
inline void UploadFileRespV1::clear_file_size() {
  file_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileRespV1::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileRespV1::file_size() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileRespV1.file_size)
  return _internal_file_size();
}
inline void UploadFileRespV1::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  file_size_ = value;
}
inline void UploadFileRespV1::set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileRespV1.file_size)
}

// uint32 module = 5;
inline void UploadFileRespV1::clear_module() {
  module_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileRespV1::_internal_module() const {
  return module_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileRespV1::module() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileRespV1.module)
  return _internal_module();
}
inline void UploadFileRespV1::_internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  module_ = value;
}
inline void UploadFileRespV1::set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileRespV1.module)
}

// int32 result = 6;
inline void UploadFileRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadFileRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadFileRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileRespV1.result)
  return _internal_result();
}
inline void UploadFileRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void UploadFileRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileRespV1.result)
}

// -------------------------------------------------------------------

// UploadEofV1

// bytes token = 1;
inline void UploadEofV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadEofV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadEofV1.token)
  return _internal_token();
}
inline void UploadEofV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadEofV1.token)
}
inline std::string* UploadEofV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.UploadEofV1.token)
  return _internal_mutable_token();
}
inline const std::string& UploadEofV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void UploadEofV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadEofV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.UploadEofV1.token)
}
inline void UploadEofV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.UploadEofV1.token)
}
inline void UploadEofV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.UploadEofV1.token)
}
inline std::string* UploadEofV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadEofV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.UploadEofV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadEofV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.UploadEofV1.token)
}

// string file_name = 2;
inline void UploadEofV1::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadEofV1::file_name() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadEofV1.file_name)
  return _internal_file_name();
}
inline void UploadEofV1::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadEofV1.file_name)
}
inline std::string* UploadEofV1::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:amtpap.UploadEofV1.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& UploadEofV1::_internal_file_name() const {
  return file_name_.GetNoArena();
}
inline void UploadEofV1::_internal_set_file_name(const std::string& value) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadEofV1::set_file_name(std::string&& value) {
  
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.UploadEofV1.file_name)
}
inline void UploadEofV1::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.UploadEofV1.file_name)
}
inline void UploadEofV1::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.UploadEofV1.file_name)
}
inline std::string* UploadEofV1::_internal_mutable_file_name() {
  
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadEofV1::release_file_name() {
  // @@protoc_insertion_point(field_release:amtpap.UploadEofV1.file_name)
  
  return file_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadEofV1::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:amtpap.UploadEofV1.file_name)
}

// uint32 file_id = 3;
inline void UploadEofV1::clear_file_id() {
  file_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadEofV1::_internal_file_id() const {
  return file_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadEofV1::file_id() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadEofV1.file_id)
  return _internal_file_id();
}
inline void UploadEofV1::_internal_set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  file_id_ = value;
}
inline void UploadEofV1::set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_id(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadEofV1.file_id)
}

// uint32 packet_count = 4;
inline void UploadEofV1::clear_packet_count() {
  packet_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadEofV1::_internal_packet_count() const {
  return packet_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadEofV1::packet_count() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadEofV1.packet_count)
  return _internal_packet_count();
}
inline void UploadEofV1::_internal_set_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packet_count_ = value;
}
inline void UploadEofV1::set_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packet_count(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadEofV1.packet_count)
}

// uint32 total_size = 5;
inline void UploadEofV1::clear_total_size() {
  total_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadEofV1::_internal_total_size() const {
  return total_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadEofV1::total_size() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadEofV1.total_size)
  return _internal_total_size();
}
inline void UploadEofV1::_internal_set_total_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_size_ = value;
}
inline void UploadEofV1::set_total_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadEofV1.total_size)
}

// uint32 module = 6;
inline void UploadEofV1::clear_module() {
  module_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadEofV1::_internal_module() const {
  return module_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadEofV1::module() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadEofV1.module)
  return _internal_module();
}
inline void UploadEofV1::_internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  module_ = value;
}
inline void UploadEofV1::set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadEofV1.module)
}

// string md5 = 7;
inline void UploadEofV1::clear_md5() {
  md5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadEofV1::md5() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadEofV1.md5)
  return _internal_md5();
}
inline void UploadEofV1::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadEofV1.md5)
}
inline std::string* UploadEofV1::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:amtpap.UploadEofV1.md5)
  return _internal_mutable_md5();
}
inline const std::string& UploadEofV1::_internal_md5() const {
  return md5_.GetNoArena();
}
inline void UploadEofV1::_internal_set_md5(const std::string& value) {
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadEofV1::set_md5(std::string&& value) {
  
  md5_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.UploadEofV1.md5)
}
inline void UploadEofV1::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.UploadEofV1.md5)
}
inline void UploadEofV1::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.UploadEofV1.md5)
}
inline std::string* UploadEofV1::_internal_mutable_md5() {
  
  return md5_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadEofV1::release_md5() {
  // @@protoc_insertion_point(field_release:amtpap.UploadEofV1.md5)
  
  return md5_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadEofV1::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:amtpap.UploadEofV1.md5)
}

// -------------------------------------------------------------------

// UploadEofRespV1

// bytes token = 1;
inline void UploadEofRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadEofRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadEofRespV1.token)
  return _internal_token();
}
inline void UploadEofRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadEofRespV1.token)
}
inline std::string* UploadEofRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.UploadEofRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& UploadEofRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void UploadEofRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadEofRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.UploadEofRespV1.token)
}
inline void UploadEofRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.UploadEofRespV1.token)
}
inline void UploadEofRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.UploadEofRespV1.token)
}
inline std::string* UploadEofRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadEofRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.UploadEofRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadEofRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.UploadEofRespV1.token)
}

// string file_name = 2;
inline void UploadEofRespV1::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadEofRespV1::file_name() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadEofRespV1.file_name)
  return _internal_file_name();
}
inline void UploadEofRespV1::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadEofRespV1.file_name)
}
inline std::string* UploadEofRespV1::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:amtpap.UploadEofRespV1.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& UploadEofRespV1::_internal_file_name() const {
  return file_name_.GetNoArena();
}
inline void UploadEofRespV1::_internal_set_file_name(const std::string& value) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadEofRespV1::set_file_name(std::string&& value) {
  
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.UploadEofRespV1.file_name)
}
inline void UploadEofRespV1::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.UploadEofRespV1.file_name)
}
inline void UploadEofRespV1::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.UploadEofRespV1.file_name)
}
inline std::string* UploadEofRespV1::_internal_mutable_file_name() {
  
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadEofRespV1::release_file_name() {
  // @@protoc_insertion_point(field_release:amtpap.UploadEofRespV1.file_name)
  
  return file_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadEofRespV1::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:amtpap.UploadEofRespV1.file_name)
}

// uint32 file_id = 3;
inline void UploadEofRespV1::clear_file_id() {
  file_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadEofRespV1::_internal_file_id() const {
  return file_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadEofRespV1::file_id() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadEofRespV1.file_id)
  return _internal_file_id();
}
inline void UploadEofRespV1::_internal_set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  file_id_ = value;
}
inline void UploadEofRespV1::set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_id(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadEofRespV1.file_id)
}

// uint32 packet_count = 4;
inline void UploadEofRespV1::clear_packet_count() {
  packet_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadEofRespV1::_internal_packet_count() const {
  return packet_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadEofRespV1::packet_count() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadEofRespV1.packet_count)
  return _internal_packet_count();
}
inline void UploadEofRespV1::_internal_set_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packet_count_ = value;
}
inline void UploadEofRespV1::set_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packet_count(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadEofRespV1.packet_count)
}

// uint32 module = 5;
inline void UploadEofRespV1::clear_module() {
  module_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadEofRespV1::_internal_module() const {
  return module_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadEofRespV1::module() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadEofRespV1.module)
  return _internal_module();
}
inline void UploadEofRespV1::_internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  module_ = value;
}
inline void UploadEofRespV1::set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadEofRespV1.module)
}

// int32 result = 6;
inline void UploadEofRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadEofRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadEofRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadEofRespV1.result)
  return _internal_result();
}
inline void UploadEofRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void UploadEofRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadEofRespV1.result)
}

// -------------------------------------------------------------------

// UploadFileDataV1

// bytes token = 1;
inline void UploadFileDataV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadFileDataV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileDataV1.token)
  return _internal_token();
}
inline void UploadFileDataV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileDataV1.token)
}
inline std::string* UploadFileDataV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.UploadFileDataV1.token)
  return _internal_mutable_token();
}
inline const std::string& UploadFileDataV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void UploadFileDataV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadFileDataV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.UploadFileDataV1.token)
}
inline void UploadFileDataV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.UploadFileDataV1.token)
}
inline void UploadFileDataV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.UploadFileDataV1.token)
}
inline std::string* UploadFileDataV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadFileDataV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.UploadFileDataV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadFileDataV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.UploadFileDataV1.token)
}

// uint32 file_id = 2;
inline void UploadFileDataV1::clear_file_id() {
  file_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileDataV1::_internal_file_id() const {
  return file_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileDataV1::file_id() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileDataV1.file_id)
  return _internal_file_id();
}
inline void UploadFileDataV1::_internal_set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  file_id_ = value;
}
inline void UploadFileDataV1::set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_id(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileDataV1.file_id)
}

// uint32 packet_no = 3;
inline void UploadFileDataV1::clear_packet_no() {
  packet_no_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileDataV1::_internal_packet_no() const {
  return packet_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileDataV1::packet_no() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileDataV1.packet_no)
  return _internal_packet_no();
}
inline void UploadFileDataV1::_internal_set_packet_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packet_no_ = value;
}
inline void UploadFileDataV1::set_packet_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packet_no(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileDataV1.packet_no)
}

// uint32 piece_len = 4;
inline void UploadFileDataV1::clear_piece_len() {
  piece_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileDataV1::_internal_piece_len() const {
  return piece_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileDataV1::piece_len() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileDataV1.piece_len)
  return _internal_piece_len();
}
inline void UploadFileDataV1::_internal_set_piece_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  piece_len_ = value;
}
inline void UploadFileDataV1::set_piece_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_piece_len(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileDataV1.piece_len)
}

// uint32 data_len = 5;
inline void UploadFileDataV1::clear_data_len() {
  data_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileDataV1::_internal_data_len() const {
  return data_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileDataV1::data_len() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileDataV1.data_len)
  return _internal_data_len();
}
inline void UploadFileDataV1::_internal_set_data_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_len_ = value;
}
inline void UploadFileDataV1::set_data_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_len(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileDataV1.data_len)
}

// bytes data = 6;
inline void UploadFileDataV1::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadFileDataV1::data() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileDataV1.data)
  return _internal_data();
}
inline void UploadFileDataV1::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileDataV1.data)
}
inline std::string* UploadFileDataV1::mutable_data() {
  // @@protoc_insertion_point(field_mutable:amtpap.UploadFileDataV1.data)
  return _internal_mutable_data();
}
inline const std::string& UploadFileDataV1::_internal_data() const {
  return data_.GetNoArena();
}
inline void UploadFileDataV1::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadFileDataV1::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.UploadFileDataV1.data)
}
inline void UploadFileDataV1::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.UploadFileDataV1.data)
}
inline void UploadFileDataV1::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.UploadFileDataV1.data)
}
inline std::string* UploadFileDataV1::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadFileDataV1::release_data() {
  // @@protoc_insertion_point(field_release:amtpap.UploadFileDataV1.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadFileDataV1::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:amtpap.UploadFileDataV1.data)
}

// -------------------------------------------------------------------

// UploadFileDataRespV1

// bytes token = 1;
inline void UploadFileDataRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UploadFileDataRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileDataRespV1.token)
  return _internal_token();
}
inline void UploadFileDataRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileDataRespV1.token)
}
inline std::string* UploadFileDataRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.UploadFileDataRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& UploadFileDataRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void UploadFileDataRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UploadFileDataRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.UploadFileDataRespV1.token)
}
inline void UploadFileDataRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.UploadFileDataRespV1.token)
}
inline void UploadFileDataRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.UploadFileDataRespV1.token)
}
inline std::string* UploadFileDataRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UploadFileDataRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.UploadFileDataRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UploadFileDataRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.UploadFileDataRespV1.token)
}

// uint32 file_id = 2;
inline void UploadFileDataRespV1::clear_file_id() {
  file_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileDataRespV1::_internal_file_id() const {
  return file_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileDataRespV1::file_id() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileDataRespV1.file_id)
  return _internal_file_id();
}
inline void UploadFileDataRespV1::_internal_set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  file_id_ = value;
}
inline void UploadFileDataRespV1::set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_id(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileDataRespV1.file_id)
}

// uint32 packet_no = 3;
inline void UploadFileDataRespV1::clear_packet_no() {
  packet_no_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileDataRespV1::_internal_packet_no() const {
  return packet_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileDataRespV1::packet_no() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileDataRespV1.packet_no)
  return _internal_packet_no();
}
inline void UploadFileDataRespV1::_internal_set_packet_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packet_no_ = value;
}
inline void UploadFileDataRespV1::set_packet_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packet_no(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileDataRespV1.packet_no)
}

// int32 result = 4;
inline void UploadFileDataRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadFileDataRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadFileDataRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.UploadFileDataRespV1.result)
  return _internal_result();
}
inline void UploadFileDataRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void UploadFileDataRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.UploadFileDataRespV1.result)
}

// -------------------------------------------------------------------

// QueryDataV1

// bytes token = 1;
inline void QueryDataV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryDataV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.QueryDataV1.token)
  return _internal_token();
}
inline void QueryDataV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.QueryDataV1.token)
}
inline std::string* QueryDataV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.QueryDataV1.token)
  return _internal_mutable_token();
}
inline const std::string& QueryDataV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void QueryDataV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryDataV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.QueryDataV1.token)
}
inline void QueryDataV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.QueryDataV1.token)
}
inline void QueryDataV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.QueryDataV1.token)
}
inline std::string* QueryDataV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryDataV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.QueryDataV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryDataV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.QueryDataV1.token)
}

// string file_name = 2;
inline void QueryDataV1::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryDataV1::file_name() const {
  // @@protoc_insertion_point(field_get:amtpap.QueryDataV1.file_name)
  return _internal_file_name();
}
inline void QueryDataV1::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:amtpap.QueryDataV1.file_name)
}
inline std::string* QueryDataV1::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:amtpap.QueryDataV1.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& QueryDataV1::_internal_file_name() const {
  return file_name_.GetNoArena();
}
inline void QueryDataV1::_internal_set_file_name(const std::string& value) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryDataV1::set_file_name(std::string&& value) {
  
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.QueryDataV1.file_name)
}
inline void QueryDataV1::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.QueryDataV1.file_name)
}
inline void QueryDataV1::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.QueryDataV1.file_name)
}
inline std::string* QueryDataV1::_internal_mutable_file_name() {
  
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryDataV1::release_file_name() {
  // @@protoc_insertion_point(field_release:amtpap.QueryDataV1.file_name)
  
  return file_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryDataV1::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:amtpap.QueryDataV1.file_name)
}

// uint32 file_id = 3;
inline void QueryDataV1::clear_file_id() {
  file_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryDataV1::_internal_file_id() const {
  return file_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryDataV1::file_id() const {
  // @@protoc_insertion_point(field_get:amtpap.QueryDataV1.file_id)
  return _internal_file_id();
}
inline void QueryDataV1::_internal_set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  file_id_ = value;
}
inline void QueryDataV1::set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_id(value);
  // @@protoc_insertion_point(field_set:amtpap.QueryDataV1.file_id)
}

// uint32 packet_no = 4;
inline void QueryDataV1::clear_packet_no() {
  packet_no_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryDataV1::_internal_packet_no() const {
  return packet_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryDataV1::packet_no() const {
  // @@protoc_insertion_point(field_get:amtpap.QueryDataV1.packet_no)
  return _internal_packet_no();
}
inline void QueryDataV1::_internal_set_packet_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packet_no_ = value;
}
inline void QueryDataV1::set_packet_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packet_no(value);
  // @@protoc_insertion_point(field_set:amtpap.QueryDataV1.packet_no)
}

// -------------------------------------------------------------------

// QueryDataRespV1

// bytes token = 1;
inline void QueryDataRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryDataRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.QueryDataRespV1.token)
  return _internal_token();
}
inline void QueryDataRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.QueryDataRespV1.token)
}
inline std::string* QueryDataRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.QueryDataRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& QueryDataRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void QueryDataRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryDataRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.QueryDataRespV1.token)
}
inline void QueryDataRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.QueryDataRespV1.token)
}
inline void QueryDataRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.QueryDataRespV1.token)
}
inline std::string* QueryDataRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryDataRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.QueryDataRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryDataRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.QueryDataRespV1.token)
}

// int32 result = 2;
inline void QueryDataRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryDataRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryDataRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.QueryDataRespV1.result)
  return _internal_result();
}
inline void QueryDataRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void QueryDataRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.QueryDataRespV1.result)
}

// -------------------------------------------------------------------

// ReatartCmdV1

// bytes token = 1;
inline void ReatartCmdV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReatartCmdV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.ReatartCmdV1.token)
  return _internal_token();
}
inline void ReatartCmdV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.ReatartCmdV1.token)
}
inline std::string* ReatartCmdV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.ReatartCmdV1.token)
  return _internal_mutable_token();
}
inline const std::string& ReatartCmdV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void ReatartCmdV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReatartCmdV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ReatartCmdV1.token)
}
inline void ReatartCmdV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ReatartCmdV1.token)
}
inline void ReatartCmdV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ReatartCmdV1.token)
}
inline std::string* ReatartCmdV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReatartCmdV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.ReatartCmdV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReatartCmdV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ReatartCmdV1.token)
}

// uint32 ts_sec = 2;
inline void ReatartCmdV1::clear_ts_sec() {
  ts_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReatartCmdV1::_internal_ts_sec() const {
  return ts_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReatartCmdV1::ts_sec() const {
  // @@protoc_insertion_point(field_get:amtpap.ReatartCmdV1.ts_sec)
  return _internal_ts_sec();
}
inline void ReatartCmdV1::_internal_set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ts_sec_ = value;
}
inline void ReatartCmdV1::set_ts_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ts_sec(value);
  // @@protoc_insertion_point(field_set:amtpap.ReatartCmdV1.ts_sec)
}

// uint32 ts_usec = 3;
inline void ReatartCmdV1::clear_ts_usec() {
  ts_usec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReatartCmdV1::_internal_ts_usec() const {
  return ts_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReatartCmdV1::ts_usec() const {
  // @@protoc_insertion_point(field_get:amtpap.ReatartCmdV1.ts_usec)
  return _internal_ts_usec();
}
inline void ReatartCmdV1::_internal_set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ts_usec_ = value;
}
inline void ReatartCmdV1::set_ts_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ts_usec(value);
  // @@protoc_insertion_point(field_set:amtpap.ReatartCmdV1.ts_usec)
}

// -------------------------------------------------------------------

// ReatartRespV1

// bytes token = 1;
inline void ReatartRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReatartRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.ReatartRespV1.token)
  return _internal_token();
}
inline void ReatartRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.ReatartRespV1.token)
}
inline std::string* ReatartRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.ReatartRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& ReatartRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void ReatartRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReatartRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ReatartRespV1.token)
}
inline void ReatartRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ReatartRespV1.token)
}
inline void ReatartRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ReatartRespV1.token)
}
inline std::string* ReatartRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReatartRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.ReatartRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReatartRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ReatartRespV1.token)
}

// int32 result = 2;
inline void ReatartRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReatartRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReatartRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.ReatartRespV1.result)
  return _internal_result();
}
inline void ReatartRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void ReatartRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.ReatartRespV1.result)
}

// -------------------------------------------------------------------

// ModuleConfV1

// bytes token = 1;
inline void ModuleConfV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleConfV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfV1.token)
  return _internal_token();
}
inline void ModuleConfV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfV1.token)
}
inline std::string* ModuleConfV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.ModuleConfV1.token)
  return _internal_mutable_token();
}
inline const std::string& ModuleConfV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void ModuleConfV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleConfV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ModuleConfV1.token)
}
inline void ModuleConfV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ModuleConfV1.token)
}
inline void ModuleConfV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ModuleConfV1.token)
}
inline std::string* ModuleConfV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleConfV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.ModuleConfV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleConfV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ModuleConfV1.token)
}

// uint32 module_type = 2;
inline void ModuleConfV1::clear_module_type() {
  module_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleConfV1::_internal_module_type() const {
  return module_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleConfV1::module_type() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfV1.module_type)
  return _internal_module_type();
}
inline void ModuleConfV1::_internal_set_module_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  module_type_ = value;
}
inline void ModuleConfV1::set_module_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_module_type(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfV1.module_type)
}

// uint32 chip_manufacturer = 3;
inline void ModuleConfV1::clear_chip_manufacturer() {
  chip_manufacturer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleConfV1::_internal_chip_manufacturer() const {
  return chip_manufacturer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleConfV1::chip_manufacturer() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfV1.chip_manufacturer)
  return _internal_chip_manufacturer();
}
inline void ModuleConfV1::_internal_set_chip_manufacturer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chip_manufacturer_ = value;
}
inline void ModuleConfV1::set_chip_manufacturer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chip_manufacturer(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfV1.chip_manufacturer)
}

// string chip_type = 4;
inline void ModuleConfV1::clear_chip_type() {
  chip_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleConfV1::chip_type() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfV1.chip_type)
  return _internal_chip_type();
}
inline void ModuleConfV1::set_chip_type(const std::string& value) {
  _internal_set_chip_type(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfV1.chip_type)
}
inline std::string* ModuleConfV1::mutable_chip_type() {
  // @@protoc_insertion_point(field_mutable:amtpap.ModuleConfV1.chip_type)
  return _internal_mutable_chip_type();
}
inline const std::string& ModuleConfV1::_internal_chip_type() const {
  return chip_type_.GetNoArena();
}
inline void ModuleConfV1::_internal_set_chip_type(const std::string& value) {
  
  chip_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleConfV1::set_chip_type(std::string&& value) {
  
  chip_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ModuleConfV1.chip_type)
}
inline void ModuleConfV1::set_chip_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chip_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ModuleConfV1.chip_type)
}
inline void ModuleConfV1::set_chip_type(const char* value, size_t size) {
  
  chip_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ModuleConfV1.chip_type)
}
inline std::string* ModuleConfV1::_internal_mutable_chip_type() {
  
  return chip_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleConfV1::release_chip_type() {
  // @@protoc_insertion_point(field_release:amtpap.ModuleConfV1.chip_type)
  
  return chip_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleConfV1::set_allocated_chip_type(std::string* chip_type) {
  if (chip_type != nullptr) {
    
  } else {
    
  }
  chip_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chip_type);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ModuleConfV1.chip_type)
}

// string icd_version = 5;
inline void ModuleConfV1::clear_icd_version() {
  icd_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleConfV1::icd_version() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfV1.icd_version)
  return _internal_icd_version();
}
inline void ModuleConfV1::set_icd_version(const std::string& value) {
  _internal_set_icd_version(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfV1.icd_version)
}
inline std::string* ModuleConfV1::mutable_icd_version() {
  // @@protoc_insertion_point(field_mutable:amtpap.ModuleConfV1.icd_version)
  return _internal_mutable_icd_version();
}
inline const std::string& ModuleConfV1::_internal_icd_version() const {
  return icd_version_.GetNoArena();
}
inline void ModuleConfV1::_internal_set_icd_version(const std::string& value) {
  
  icd_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleConfV1::set_icd_version(std::string&& value) {
  
  icd_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ModuleConfV1.icd_version)
}
inline void ModuleConfV1::set_icd_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icd_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ModuleConfV1.icd_version)
}
inline void ModuleConfV1::set_icd_version(const char* value, size_t size) {
  
  icd_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ModuleConfV1.icd_version)
}
inline std::string* ModuleConfV1::_internal_mutable_icd_version() {
  
  return icd_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleConfV1::release_icd_version() {
  // @@protoc_insertion_point(field_release:amtpap.ModuleConfV1.icd_version)
  
  return icd_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleConfV1::set_allocated_icd_version(std::string* icd_version) {
  if (icd_version != nullptr) {
    
  } else {
    
  }
  icd_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icd_version);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ModuleConfV1.icd_version)
}

// string imei = 6;
inline void ModuleConfV1::clear_imei() {
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleConfV1::imei() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfV1.imei)
  return _internal_imei();
}
inline void ModuleConfV1::set_imei(const std::string& value) {
  _internal_set_imei(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfV1.imei)
}
inline std::string* ModuleConfV1::mutable_imei() {
  // @@protoc_insertion_point(field_mutable:amtpap.ModuleConfV1.imei)
  return _internal_mutable_imei();
}
inline const std::string& ModuleConfV1::_internal_imei() const {
  return imei_.GetNoArena();
}
inline void ModuleConfV1::_internal_set_imei(const std::string& value) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleConfV1::set_imei(std::string&& value) {
  
  imei_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ModuleConfV1.imei)
}
inline void ModuleConfV1::set_imei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ModuleConfV1.imei)
}
inline void ModuleConfV1::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ModuleConfV1.imei)
}
inline std::string* ModuleConfV1::_internal_mutable_imei() {
  
  return imei_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleConfV1::release_imei() {
  // @@protoc_insertion_point(field_release:amtpap.ModuleConfV1.imei)
  
  return imei_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleConfV1::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ModuleConfV1.imei)
}

// string phone_number = 7;
inline void ModuleConfV1::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleConfV1::phone_number() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfV1.phone_number)
  return _internal_phone_number();
}
inline void ModuleConfV1::set_phone_number(const std::string& value) {
  _internal_set_phone_number(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfV1.phone_number)
}
inline std::string* ModuleConfV1::mutable_phone_number() {
  // @@protoc_insertion_point(field_mutable:amtpap.ModuleConfV1.phone_number)
  return _internal_mutable_phone_number();
}
inline const std::string& ModuleConfV1::_internal_phone_number() const {
  return phone_number_.GetNoArena();
}
inline void ModuleConfV1::_internal_set_phone_number(const std::string& value) {
  
  phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleConfV1::set_phone_number(std::string&& value) {
  
  phone_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ModuleConfV1.phone_number)
}
inline void ModuleConfV1::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ModuleConfV1.phone_number)
}
inline void ModuleConfV1::set_phone_number(const char* value, size_t size) {
  
  phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ModuleConfV1.phone_number)
}
inline std::string* ModuleConfV1::_internal_mutable_phone_number() {
  
  return phone_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleConfV1::release_phone_number() {
  // @@protoc_insertion_point(field_release:amtpap.ModuleConfV1.phone_number)
  
  return phone_number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleConfV1::set_allocated_phone_number(std::string* phone_number) {
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ModuleConfV1.phone_number)
}

// string network_operator = 8;
inline void ModuleConfV1::clear_network_operator() {
  network_operator_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleConfV1::network_operator() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfV1.network_operator)
  return _internal_network_operator();
}
inline void ModuleConfV1::set_network_operator(const std::string& value) {
  _internal_set_network_operator(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfV1.network_operator)
}
inline std::string* ModuleConfV1::mutable_network_operator() {
  // @@protoc_insertion_point(field_mutable:amtpap.ModuleConfV1.network_operator)
  return _internal_mutable_network_operator();
}
inline const std::string& ModuleConfV1::_internal_network_operator() const {
  return network_operator_.GetNoArena();
}
inline void ModuleConfV1::_internal_set_network_operator(const std::string& value) {
  
  network_operator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleConfV1::set_network_operator(std::string&& value) {
  
  network_operator_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ModuleConfV1.network_operator)
}
inline void ModuleConfV1::set_network_operator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  network_operator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ModuleConfV1.network_operator)
}
inline void ModuleConfV1::set_network_operator(const char* value, size_t size) {
  
  network_operator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ModuleConfV1.network_operator)
}
inline std::string* ModuleConfV1::_internal_mutable_network_operator() {
  
  return network_operator_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleConfV1::release_network_operator() {
  // @@protoc_insertion_point(field_release:amtpap.ModuleConfV1.network_operator)
  
  return network_operator_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleConfV1::set_allocated_network_operator(std::string* network_operator) {
  if (network_operator != nullptr) {
    
  } else {
    
  }
  network_operator_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network_operator);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ModuleConfV1.network_operator)
}

// uint32 module_num = 9;
inline void ModuleConfV1::clear_module_num() {
  module_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleConfV1::_internal_module_num() const {
  return module_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleConfV1::module_num() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfV1.module_num)
  return _internal_module_num();
}
inline void ModuleConfV1::_internal_set_module_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  module_num_ = value;
}
inline void ModuleConfV1::set_module_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_module_num(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfV1.module_num)
}

// string module_system = 10;
inline void ModuleConfV1::clear_module_system() {
  module_system_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleConfV1::module_system() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfV1.module_system)
  return _internal_module_system();
}
inline void ModuleConfV1::set_module_system(const std::string& value) {
  _internal_set_module_system(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfV1.module_system)
}
inline std::string* ModuleConfV1::mutable_module_system() {
  // @@protoc_insertion_point(field_mutable:amtpap.ModuleConfV1.module_system)
  return _internal_mutable_module_system();
}
inline const std::string& ModuleConfV1::_internal_module_system() const {
  return module_system_.GetNoArena();
}
inline void ModuleConfV1::_internal_set_module_system(const std::string& value) {
  
  module_system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleConfV1::set_module_system(std::string&& value) {
  
  module_system_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ModuleConfV1.module_system)
}
inline void ModuleConfV1::set_module_system(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  module_system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ModuleConfV1.module_system)
}
inline void ModuleConfV1::set_module_system(const char* value, size_t size) {
  
  module_system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ModuleConfV1.module_system)
}
inline std::string* ModuleConfV1::_internal_mutable_module_system() {
  
  return module_system_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleConfV1::release_module_system() {
  // @@protoc_insertion_point(field_release:amtpap.ModuleConfV1.module_system)
  
  return module_system_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleConfV1::set_allocated_module_system(std::string* module_system) {
  if (module_system != nullptr) {
    
  } else {
    
  }
  module_system_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_system);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ModuleConfV1.module_system)
}

// string module_factory = 11;
inline void ModuleConfV1::clear_module_factory() {
  module_factory_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleConfV1::module_factory() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfV1.module_factory)
  return _internal_module_factory();
}
inline void ModuleConfV1::set_module_factory(const std::string& value) {
  _internal_set_module_factory(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfV1.module_factory)
}
inline std::string* ModuleConfV1::mutable_module_factory() {
  // @@protoc_insertion_point(field_mutable:amtpap.ModuleConfV1.module_factory)
  return _internal_mutable_module_factory();
}
inline const std::string& ModuleConfV1::_internal_module_factory() const {
  return module_factory_.GetNoArena();
}
inline void ModuleConfV1::_internal_set_module_factory(const std::string& value) {
  
  module_factory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleConfV1::set_module_factory(std::string&& value) {
  
  module_factory_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ModuleConfV1.module_factory)
}
inline void ModuleConfV1::set_module_factory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  module_factory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ModuleConfV1.module_factory)
}
inline void ModuleConfV1::set_module_factory(const char* value, size_t size) {
  
  module_factory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ModuleConfV1.module_factory)
}
inline std::string* ModuleConfV1::_internal_mutable_module_factory() {
  
  return module_factory_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleConfV1::release_module_factory() {
  // @@protoc_insertion_point(field_release:amtpap.ModuleConfV1.module_factory)
  
  return module_factory_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleConfV1::set_allocated_module_factory(std::string* module_factory) {
  if (module_factory != nullptr) {
    
  } else {
    
  }
  module_factory_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_factory);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ModuleConfV1.module_factory)
}

// string imsi = 12;
inline void ModuleConfV1::clear_imsi() {
  imsi_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleConfV1::imsi() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfV1.imsi)
  return _internal_imsi();
}
inline void ModuleConfV1::set_imsi(const std::string& value) {
  _internal_set_imsi(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfV1.imsi)
}
inline std::string* ModuleConfV1::mutable_imsi() {
  // @@protoc_insertion_point(field_mutable:amtpap.ModuleConfV1.imsi)
  return _internal_mutable_imsi();
}
inline const std::string& ModuleConfV1::_internal_imsi() const {
  return imsi_.GetNoArena();
}
inline void ModuleConfV1::_internal_set_imsi(const std::string& value) {
  
  imsi_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleConfV1::set_imsi(std::string&& value) {
  
  imsi_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ModuleConfV1.imsi)
}
inline void ModuleConfV1::set_imsi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imsi_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ModuleConfV1.imsi)
}
inline void ModuleConfV1::set_imsi(const char* value, size_t size) {
  
  imsi_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ModuleConfV1.imsi)
}
inline std::string* ModuleConfV1::_internal_mutable_imsi() {
  
  return imsi_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleConfV1::release_imsi() {
  // @@protoc_insertion_point(field_release:amtpap.ModuleConfV1.imsi)
  
  return imsi_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleConfV1::set_allocated_imsi(std::string* imsi) {
  if (imsi != nullptr) {
    
  } else {
    
  }
  imsi_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imsi);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ModuleConfV1.imsi)
}

// string box_id = 13;
inline void ModuleConfV1::clear_box_id() {
  box_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleConfV1::box_id() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfV1.box_id)
  return _internal_box_id();
}
inline void ModuleConfV1::set_box_id(const std::string& value) {
  _internal_set_box_id(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfV1.box_id)
}
inline std::string* ModuleConfV1::mutable_box_id() {
  // @@protoc_insertion_point(field_mutable:amtpap.ModuleConfV1.box_id)
  return _internal_mutable_box_id();
}
inline const std::string& ModuleConfV1::_internal_box_id() const {
  return box_id_.GetNoArena();
}
inline void ModuleConfV1::_internal_set_box_id(const std::string& value) {
  
  box_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleConfV1::set_box_id(std::string&& value) {
  
  box_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ModuleConfV1.box_id)
}
inline void ModuleConfV1::set_box_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  box_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ModuleConfV1.box_id)
}
inline void ModuleConfV1::set_box_id(const char* value, size_t size) {
  
  box_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ModuleConfV1.box_id)
}
inline std::string* ModuleConfV1::_internal_mutable_box_id() {
  
  return box_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleConfV1::release_box_id() {
  // @@protoc_insertion_point(field_release:amtpap.ModuleConfV1.box_id)
  
  return box_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleConfV1::set_allocated_box_id(std::string* box_id) {
  if (box_id != nullptr) {
    
  } else {
    
  }
  box_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), box_id);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ModuleConfV1.box_id)
}

// -------------------------------------------------------------------

// ModuleConfRespV1

// bytes token = 1;
inline void ModuleConfRespV1::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleConfRespV1::token() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfRespV1.token)
  return _internal_token();
}
inline void ModuleConfRespV1::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfRespV1.token)
}
inline std::string* ModuleConfRespV1::mutable_token() {
  // @@protoc_insertion_point(field_mutable:amtpap.ModuleConfRespV1.token)
  return _internal_mutable_token();
}
inline const std::string& ModuleConfRespV1::_internal_token() const {
  return token_.GetNoArena();
}
inline void ModuleConfRespV1::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleConfRespV1::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amtpap.ModuleConfRespV1.token)
}
inline void ModuleConfRespV1::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amtpap.ModuleConfRespV1.token)
}
inline void ModuleConfRespV1::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amtpap.ModuleConfRespV1.token)
}
inline std::string* ModuleConfRespV1::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleConfRespV1::release_token() {
  // @@protoc_insertion_point(field_release:amtpap.ModuleConfRespV1.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleConfRespV1::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:amtpap.ModuleConfRespV1.token)
}

// int32 result = 2;
inline void ModuleConfRespV1::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModuleConfRespV1::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModuleConfRespV1::result() const {
  // @@protoc_insertion_point(field_get:amtpap.ModuleConfRespV1.result)
  return _internal_result();
}
inline void ModuleConfRespV1::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void ModuleConfRespV1::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:amtpap.ModuleConfRespV1.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace amtpap

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::amtpap::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::amtpap::MsgType>() {
  return ::amtpap::MsgType_descriptor();
}
template <> struct is_proto_enum< ::amtpap::MsgID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::amtpap::MsgID>() {
  return ::amtpap::MsgID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_amtpap_5fmsg_2eproto
