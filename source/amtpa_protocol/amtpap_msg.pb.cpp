// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: amtpap_msg.proto

#include "amtpap_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace amtpap {
class CmdPrimitiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmdPrimitive> _instance;
} _CmdPrimitive_default_instance_;
class LoginV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginV1> _instance;
} _LoginV1_default_instance_;
class LoginRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginRespV1> _instance;
} _LoginRespV1_default_instance_;
class LogoutV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogoutV1> _instance;
} _LogoutV1_default_instance_;
class LogoutRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogoutRespV1> _instance;
} _LogoutRespV1_default_instance_;
class ConfigV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigV1> _instance;
} _ConfigV1_default_instance_;
class ConfigRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigRespV1> _instance;
} _ConfigRespV1_default_instance_;
class ConfigNotifyV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigNotifyV1> _instance;
} _ConfigNotifyV1_default_instance_;
class ConfigNotifyRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigNotifyRespV1> _instance;
} _ConfigNotifyRespV1_default_instance_;
class ConfigDataV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigDataV1> _instance;
} _ConfigDataV1_default_instance_;
class ConfigDataRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigDataRespV1> _instance;
} _ConfigDataRespV1_default_instance_;
class ReportEventV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportEventV1> _instance;
} _ReportEventV1_default_instance_;
class ReportEventRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportEventRespV1> _instance;
} _ReportEventRespV1_default_instance_;
class AlarmV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmV1> _instance;
} _AlarmV1_default_instance_;
class AlarmRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmRespV1> _instance;
} _AlarmRespV1_default_instance_;
class AlarmClearV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmClearV1> _instance;
} _AlarmClearV1_default_instance_;
class AlarmClearRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmClearRespV1> _instance;
} _AlarmClearRespV1_default_instance_;
class GPSInfoV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPSInfoV1> _instance;
} _GPSInfoV1_default_instance_;
class GPSInfoRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPSInfoRespV1> _instance;
} _GPSInfoRespV1_default_instance_;
class StatusInfoV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusInfoV1> _instance;
} _StatusInfoV1_default_instance_;
class StatusInfoRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusInfoRespV1> _instance;
} _StatusInfoRespV1_default_instance_;
class UploadFileV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadFileV1> _instance;
} _UploadFileV1_default_instance_;
class UploadFileRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadFileRespV1> _instance;
} _UploadFileRespV1_default_instance_;
class UploadEofV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadEofV1> _instance;
} _UploadEofV1_default_instance_;
class UploadEofRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadEofRespV1> _instance;
} _UploadEofRespV1_default_instance_;
class UploadFileDataV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadFileDataV1> _instance;
} _UploadFileDataV1_default_instance_;
class UploadFileDataRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadFileDataRespV1> _instance;
} _UploadFileDataRespV1_default_instance_;
class QueryDataV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryDataV1> _instance;
} _QueryDataV1_default_instance_;
class QueryDataRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryDataRespV1> _instance;
} _QueryDataRespV1_default_instance_;
class ReatartCmdV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReatartCmdV1> _instance;
} _ReatartCmdV1_default_instance_;
class ReatartRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReatartRespV1> _instance;
} _ReatartRespV1_default_instance_;
class ModuleConfV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModuleConfV1> _instance;
} _ModuleConfV1_default_instance_;
class ModuleConfRespV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModuleConfRespV1> _instance;
} _ModuleConfRespV1_default_instance_;
}  // namespace amtpap
static void InitDefaultsscc_info_AlarmClearRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_AlarmClearRespV1_default_instance_;
    new (ptr) ::amtpap::AlarmClearRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::AlarmClearRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmClearRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlarmClearRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_AlarmClearV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_AlarmClearV1_default_instance_;
    new (ptr) ::amtpap::AlarmClearV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::AlarmClearV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmClearV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlarmClearV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_AlarmRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_AlarmRespV1_default_instance_;
    new (ptr) ::amtpap::AlarmRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::AlarmRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlarmRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_AlarmV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_AlarmV1_default_instance_;
    new (ptr) ::amtpap::AlarmV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::AlarmV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlarmV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CmdPrimitive_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_CmdPrimitive_default_instance_;
    new (ptr) ::amtpap::CmdPrimitive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::CmdPrimitive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdPrimitive_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CmdPrimitive_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ConfigDataRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_ConfigDataRespV1_default_instance_;
    new (ptr) ::amtpap::ConfigDataRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::ConfigDataRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigDataRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigDataRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ConfigDataV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_ConfigDataV1_default_instance_;
    new (ptr) ::amtpap::ConfigDataV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::ConfigDataV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigDataV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigDataV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ConfigNotifyRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_ConfigNotifyRespV1_default_instance_;
    new (ptr) ::amtpap::ConfigNotifyRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::ConfigNotifyRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigNotifyRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigNotifyRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ConfigNotifyV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_ConfigNotifyV1_default_instance_;
    new (ptr) ::amtpap::ConfigNotifyV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::ConfigNotifyV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigNotifyV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigNotifyV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ConfigRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_ConfigRespV1_default_instance_;
    new (ptr) ::amtpap::ConfigRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::ConfigRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ConfigV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_ConfigV1_default_instance_;
    new (ptr) ::amtpap::ConfigV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::ConfigV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_GPSInfoRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_GPSInfoRespV1_default_instance_;
    new (ptr) ::amtpap::GPSInfoRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::GPSInfoRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPSInfoRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPSInfoRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_GPSInfoV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_GPSInfoV1_default_instance_;
    new (ptr) ::amtpap::GPSInfoV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::GPSInfoV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPSInfoV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPSInfoV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_LoginRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_LoginRespV1_default_instance_;
    new (ptr) ::amtpap::LoginRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::LoginRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_LoginV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_LoginV1_default_instance_;
    new (ptr) ::amtpap::LoginV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::LoginV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_LogoutRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_LogoutRespV1_default_instance_;
    new (ptr) ::amtpap::LogoutRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::LogoutRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogoutRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogoutRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_LogoutV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_LogoutV1_default_instance_;
    new (ptr) ::amtpap::LogoutV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::LogoutV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogoutV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogoutV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ModuleConfRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_ModuleConfRespV1_default_instance_;
    new (ptr) ::amtpap::ModuleConfRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::ModuleConfRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModuleConfRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModuleConfRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ModuleConfV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_ModuleConfV1_default_instance_;
    new (ptr) ::amtpap::ModuleConfV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::ModuleConfV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModuleConfV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModuleConfV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_QueryDataRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_QueryDataRespV1_default_instance_;
    new (ptr) ::amtpap::QueryDataRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::QueryDataRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryDataRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryDataRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_QueryDataV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_QueryDataV1_default_instance_;
    new (ptr) ::amtpap::QueryDataV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::QueryDataV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryDataV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryDataV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ReatartCmdV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_ReatartCmdV1_default_instance_;
    new (ptr) ::amtpap::ReatartCmdV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::ReatartCmdV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReatartCmdV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReatartCmdV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ReatartRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_ReatartRespV1_default_instance_;
    new (ptr) ::amtpap::ReatartRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::ReatartRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReatartRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReatartRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ReportEventRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_ReportEventRespV1_default_instance_;
    new (ptr) ::amtpap::ReportEventRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::ReportEventRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportEventRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReportEventRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ReportEventV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_ReportEventV1_default_instance_;
    new (ptr) ::amtpap::ReportEventV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::ReportEventV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportEventV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReportEventV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_StatusInfoRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_StatusInfoRespV1_default_instance_;
    new (ptr) ::amtpap::StatusInfoRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::StatusInfoRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusInfoRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusInfoRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_StatusInfoV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_StatusInfoV1_default_instance_;
    new (ptr) ::amtpap::StatusInfoV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::StatusInfoV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusInfoV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusInfoV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_UploadEofRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_UploadEofRespV1_default_instance_;
    new (ptr) ::amtpap::UploadEofRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::UploadEofRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UploadEofRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UploadEofRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_UploadEofV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_UploadEofV1_default_instance_;
    new (ptr) ::amtpap::UploadEofV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::UploadEofV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UploadEofV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UploadEofV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_UploadFileDataRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_UploadFileDataRespV1_default_instance_;
    new (ptr) ::amtpap::UploadFileDataRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::UploadFileDataRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UploadFileDataRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UploadFileDataRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_UploadFileDataV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_UploadFileDataV1_default_instance_;
    new (ptr) ::amtpap::UploadFileDataV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::UploadFileDataV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UploadFileDataV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UploadFileDataV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_UploadFileRespV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_UploadFileRespV1_default_instance_;
    new (ptr) ::amtpap::UploadFileRespV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::UploadFileRespV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UploadFileRespV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UploadFileRespV1_amtpap_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_UploadFileV1_amtpap_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amtpap::_UploadFileV1_default_instance_;
    new (ptr) ::amtpap::UploadFileV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amtpap::UploadFileV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UploadFileV1_amtpap_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UploadFileV1_amtpap_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_amtpap_5fmsg_2eproto[33];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_amtpap_5fmsg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_amtpap_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_amtpap_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::CmdPrimitive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::CmdPrimitive, type_),
  PROTOBUF_FIELD_OFFSET(::amtpap::CmdPrimitive, serial_number_),
  PROTOBUF_FIELD_OFFSET(::amtpap::CmdPrimitive, msg_id_),
  PROTOBUF_FIELD_OFFSET(::amtpap::CmdPrimitive, direction_),
  PROTOBUF_FIELD_OFFSET(::amtpap::CmdPrimitive, payload_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::LoginV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::LoginV1, box_id_),
  PROTOBUF_FIELD_OFFSET(::amtpap::LoginV1, pwd_),
  PROTOBUF_FIELD_OFFSET(::amtpap::LoginV1, manufactor_),
  PROTOBUF_FIELD_OFFSET(::amtpap::LoginV1, begin_time_),
  PROTOBUF_FIELD_OFFSET(::amtpap::LoginV1, end_time_),
  PROTOBUF_FIELD_OFFSET(::amtpap::LoginV1, release_id_),
  PROTOBUF_FIELD_OFFSET(::amtpap::LoginV1, jwumq_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::LoginRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::LoginRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::LoginRespV1, manufactor_),
  PROTOBUF_FIELD_OFFSET(::amtpap::LoginRespV1, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::LogoutV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::LogoutV1, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::LogoutRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::LogoutRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::LogoutRespV1, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigV1, atuid_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigRespV1, atuid_version_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigRespV1, result_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigRespV1, update_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigRespV1, packet_count_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigRespV1, md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigNotifyV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigNotifyV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigNotifyV1, atuid_version_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigNotifyV1, packet_count_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigNotifyV1, md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigNotifyRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigNotifyRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigNotifyRespV1, atuid_version_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigNotifyRespV1, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigDataV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigDataV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigDataV1, atuid_version_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigDataV1, packet_count_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigDataV1, packet_no_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigDataV1, data_length_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigDataV1, config_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigDataRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigDataRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigDataRespV1, atuid_version_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigDataRespV1, packet_no_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ConfigDataRespV1, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::ReportEventV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::ReportEventV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ReportEventV1, ts_sec_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ReportEventV1, ts_usec_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ReportEventV1, module_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ReportEventV1, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::ReportEventRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::ReportEventRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ReportEventRespV1, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmV1, module_),
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmV1, seq_),
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmV1, alarm_code_),
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmV1, reason_code_),
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmV1, ts_sec_),
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmV1, ts_usec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmRespV1, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmClearV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmClearV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmClearV1, module_),
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmClearV1, seq_),
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmClearV1, alarm_code_),
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmClearV1, ts_sec_),
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmClearV1, ts_usec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmClearRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmClearRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::AlarmClearRespV1, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::GPSInfoV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::GPSInfoV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::GPSInfoV1, longitude_),
  PROTOBUF_FIELD_OFFSET(::amtpap::GPSInfoV1, latitude_),
  PROTOBUF_FIELD_OFFSET(::amtpap::GPSInfoV1, altitude_),
  PROTOBUF_FIELD_OFFSET(::amtpap::GPSInfoV1, speed_),
  PROTOBUF_FIELD_OFFSET(::amtpap::GPSInfoV1, heading_),
  PROTOBUF_FIELD_OFFSET(::amtpap::GPSInfoV1, ts_sec_),
  PROTOBUF_FIELD_OFFSET(::amtpap::GPSInfoV1, ts_usec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::GPSInfoRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::GPSInfoRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::GPSInfoRespV1, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::StatusInfoV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::StatusInfoV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::StatusInfoV1, power_mode_),
  PROTOBUF_FIELD_OFFSET(::amtpap::StatusInfoV1, files_letf_),
  PROTOBUF_FIELD_OFFSET(::amtpap::StatusInfoV1, temperature_),
  PROTOBUF_FIELD_OFFSET(::amtpap::StatusInfoV1, disk_space_),
  PROTOBUF_FIELD_OFFSET(::amtpap::StatusInfoV1, ts_sec_),
  PROTOBUF_FIELD_OFFSET(::amtpap::StatusInfoV1, ts_usec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::StatusInfoRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::StatusInfoRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::StatusInfoRespV1, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileV1, file_name_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileV1, retransmit_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileV1, module_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileRespV1, file_name_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileRespV1, file_id_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileRespV1, file_size_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileRespV1, module_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileRespV1, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofV1, file_name_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofV1, file_id_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofV1, packet_count_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofV1, total_size_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofV1, module_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofV1, md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofRespV1, file_name_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofRespV1, file_id_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofRespV1, packet_count_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofRespV1, module_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadEofRespV1, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileDataV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileDataV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileDataV1, file_id_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileDataV1, packet_no_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileDataV1, piece_len_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileDataV1, data_len_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileDataV1, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileDataRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileDataRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileDataRespV1, file_id_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileDataRespV1, packet_no_),
  PROTOBUF_FIELD_OFFSET(::amtpap::UploadFileDataRespV1, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::QueryDataV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::QueryDataV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::QueryDataV1, file_name_),
  PROTOBUF_FIELD_OFFSET(::amtpap::QueryDataV1, file_id_),
  PROTOBUF_FIELD_OFFSET(::amtpap::QueryDataV1, packet_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::QueryDataRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::QueryDataRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::QueryDataRespV1, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::ReatartCmdV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::ReatartCmdV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ReatartCmdV1, ts_sec_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ReatartCmdV1, ts_usec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::ReatartRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::ReatartRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ReatartRespV1, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::ModuleConfV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::ModuleConfV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ModuleConfV1, module_type_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ModuleConfV1, chip_manufacturer_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ModuleConfV1, chip_type_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ModuleConfV1, icd_version_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ModuleConfV1, imei_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ModuleConfV1, phone_number_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ModuleConfV1, network_operator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amtpap::ModuleConfRespV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amtpap::ModuleConfRespV1, token_),
  PROTOBUF_FIELD_OFFSET(::amtpap::ModuleConfRespV1, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::amtpap::CmdPrimitive)},
  { 10, -1, sizeof(::amtpap::LoginV1)},
  { 22, -1, sizeof(::amtpap::LoginRespV1)},
  { 30, -1, sizeof(::amtpap::LogoutV1)},
  { 36, -1, sizeof(::amtpap::LogoutRespV1)},
  { 43, -1, sizeof(::amtpap::ConfigV1)},
  { 50, -1, sizeof(::amtpap::ConfigRespV1)},
  { 61, -1, sizeof(::amtpap::ConfigNotifyV1)},
  { 70, -1, sizeof(::amtpap::ConfigNotifyRespV1)},
  { 78, -1, sizeof(::amtpap::ConfigDataV1)},
  { 89, -1, sizeof(::amtpap::ConfigDataRespV1)},
  { 98, -1, sizeof(::amtpap::ReportEventV1)},
  { 108, -1, sizeof(::amtpap::ReportEventRespV1)},
  { 115, -1, sizeof(::amtpap::AlarmV1)},
  { 127, -1, sizeof(::amtpap::AlarmRespV1)},
  { 134, -1, sizeof(::amtpap::AlarmClearV1)},
  { 145, -1, sizeof(::amtpap::AlarmClearRespV1)},
  { 152, -1, sizeof(::amtpap::GPSInfoV1)},
  { 165, -1, sizeof(::amtpap::GPSInfoRespV1)},
  { 172, -1, sizeof(::amtpap::StatusInfoV1)},
  { 184, -1, sizeof(::amtpap::StatusInfoRespV1)},
  { 191, -1, sizeof(::amtpap::UploadFileV1)},
  { 200, -1, sizeof(::amtpap::UploadFileRespV1)},
  { 211, -1, sizeof(::amtpap::UploadEofV1)},
  { 223, -1, sizeof(::amtpap::UploadEofRespV1)},
  { 234, -1, sizeof(::amtpap::UploadFileDataV1)},
  { 245, -1, sizeof(::amtpap::UploadFileDataRespV1)},
  { 254, -1, sizeof(::amtpap::QueryDataV1)},
  { 263, -1, sizeof(::amtpap::QueryDataRespV1)},
  { 270, -1, sizeof(::amtpap::ReatartCmdV1)},
  { 278, -1, sizeof(::amtpap::ReatartRespV1)},
  { 285, -1, sizeof(::amtpap::ModuleConfV1)},
  { 298, -1, sizeof(::amtpap::ModuleConfRespV1)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_CmdPrimitive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_LoginV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_LoginRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_LogoutV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_LogoutRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_ConfigV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_ConfigRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_ConfigNotifyV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_ConfigNotifyRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_ConfigDataV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_ConfigDataRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_ReportEventV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_ReportEventRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_AlarmV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_AlarmRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_AlarmClearV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_AlarmClearRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_GPSInfoV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_GPSInfoRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_StatusInfoV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_StatusInfoRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_UploadFileV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_UploadFileRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_UploadEofV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_UploadEofRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_UploadFileDataV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_UploadFileDataRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_QueryDataV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_QueryDataRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_ReatartCmdV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_ReatartRespV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_ModuleConfV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amtpap::_ModuleConfRespV1_default_instance_),
};

const char descriptor_table_protodef_amtpap_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020amtpap_msg.proto\022\006amtpap\"\214\001\n\014CmdPrimit"
  "ive\022\035\n\004type\030\001 \001(\0162\017.amtpap.MsgType\022\025\n\rse"
  "rial_number\030\002 \001(\007\022\035\n\006msg_id\030\003 \001(\0162\r.amtp"
  "ap.MsgID\022\021\n\tdirection\030\004 \001(\010\022\024\n\014payload_d"
  "ata\030\005 \001(\014\"\206\001\n\007LoginV1\022\016\n\006box_id\030\001 \001(\t\022\013\n"
  "\003pwd\030\002 \001(\t\022\022\n\nmanufactor\030\003 \001(\t\022\022\n\nbegin_"
  "time\030\004 \001(\004\022\020\n\010end_time\030\005 \001(\004\022\022\n\nrelease_"
  "id\030\006 \001(\r\022\020\n\010jwumq_id\030\007 \001(\t\"@\n\013LoginRespV"
  "1\022\r\n\005token\030\001 \001(\014\022\022\n\nmanufactor\030\002 \001(\t\022\016\n\006"
  "result\030\003 \001(\005\"\031\n\010LogoutV1\022\r\n\005token\030\001 \001(\014\""
  "-\n\014LogoutRespV1\022\r\n\005token\030\001 \001(\014\022\016\n\006result"
  "\030\002 \001(\005\"0\n\010ConfigV1\022\r\n\005token\030\001 \001(\014\022\025\n\ratu"
  "id_version\030\002 \001(\t\"w\n\014ConfigRespV1\022\r\n\005toke"
  "n\030\001 \001(\014\022\025\n\ratuid_version\030\002 \001(\t\022\016\n\006result"
  "\030\003 \001(\005\022\016\n\006update\030\004 \001(\010\022\024\n\014packet_count\030\005"
  " \001(\005\022\013\n\003md5\030\006 \001(\t\"Y\n\016ConfigNotifyV1\022\r\n\005t"
  "oken\030\001 \001(\014\022\025\n\ratuid_version\030\002 \001(\t\022\024\n\014pac"
  "ket_count\030\003 \001(\005\022\013\n\003md5\030\004 \001(\t\"J\n\022ConfigNo"
  "tifyRespV1\022\r\n\005token\030\001 \001(\014\022\025\n\ratuid_versi"
  "on\030\002 \001(\t\022\016\n\006result\030\003 \001(\005\"\207\001\n\014ConfigDataV"
  "1\022\r\n\005token\030\001 \001(\014\022\025\n\ratuid_version\030\002 \001(\t\022"
  "\024\n\014packet_count\030\003 \001(\005\022\021\n\tpacket_no\030\004 \001(\005"
  "\022\023\n\013data_length\030\005 \001(\r\022\023\n\013config_data\030\006 \001"
  "(\014\"[\n\020ConfigDataRespV1\022\r\n\005token\030\001 \001(\014\022\025\n"
  "\ratuid_version\030\002 \001(\t\022\021\n\tpacket_no\030\003 \001(\005\022"
  "\016\n\006result\030\004 \001(\005\"c\n\rReportEventV1\022\r\n\005toke"
  "n\030\001 \001(\014\022\016\n\006ts_sec\030\002 \001(\r\022\017\n\007ts_usec\030\003 \001(\r"
  "\022\016\n\006module\030\004 \001(\r\022\022\n\nevent_code\030\005 \001(\r\"2\n\021"
  "ReportEventRespV1\022\r\n\005token\030\001 \001(\014\022\016\n\006resu"
  "lt\030\002 \001(\005\"\177\n\007AlarmV1\022\r\n\005token\030\001 \001(\014\022\016\n\006mo"
  "dule\030\002 \001(\r\022\013\n\003seq\030\003 \001(\r\022\022\n\nalarm_code\030\004 "
  "\001(\r\022\023\n\013reason_code\030\005 \001(\r\022\016\n\006ts_sec\030\006 \001(\r"
  "\022\017\n\007ts_usec\030\007 \001(\r\",\n\013AlarmRespV1\022\r\n\005toke"
  "n\030\001 \001(\014\022\016\n\006result\030\002 \001(\005\"o\n\014AlarmClearV1\022"
  "\r\n\005token\030\001 \001(\014\022\016\n\006module\030\002 \001(\r\022\013\n\003seq\030\003 "
  "\001(\r\022\022\n\nalarm_code\030\004 \001(\r\022\016\n\006ts_sec\030\005 \001(\r\022"
  "\017\n\007ts_usec\030\006 \001(\r\"1\n\020AlarmClearRespV1\022\r\n\005"
  "token\030\001 \001(\014\022\016\n\006result\030\002 \001(\005\"\222\001\n\tGPSInfoV"
  "1\022\r\n\005token\030\001 \001(\014\022\021\n\tlongitude\030\002 \001(\002\022\020\n\010l"
  "atitude\030\003 \001(\002\022\020\n\010altitude\030\004 \001(\002\022\r\n\005speed"
  "\030\005 \001(\002\022\017\n\007heading\030\006 \001(\002\022\016\n\006ts_sec\030\007 \001(\r\022"
  "\017\n\007ts_usec\030\010 \001(\r\".\n\rGPSInfoRespV1\022\r\n\005tok"
  "en\030\001 \001(\014\022\016\n\006result\030\002 \001(\005\"\217\001\n\014StatusInfoV"
  "1\022\r\n\005token\030\001 \001(\014\022\022\n\npower_mode\030\002 \001(\r\022\022\n\n"
  "files_letf\030\003 \001(\r\022\023\n\013temperature\030\004 \001(\002\022\022\n"
  "\ndisk_space\030\005 \001(\002\022\016\n\006ts_sec\030\006 \001(\r\022\017\n\007ts_"
  "usec\030\007 \001(\r\"1\n\020StatusInfoRespV1\022\r\n\005token\030"
  "\001 \001(\014\022\016\n\006result\030\002 \001(\005\"T\n\014UploadFileV1\022\r\n"
  "\005token\030\001 \001(\014\022\021\n\tfile_name\030\002 \001(\t\022\022\n\nretra"
  "nsmit\030\003 \001(\010\022\016\n\006module\030\004 \001(\r\"x\n\020UploadFil"
  "eRespV1\022\r\n\005token\030\001 \001(\014\022\021\n\tfile_name\030\002 \001("
  "\t\022\017\n\007file_id\030\003 \001(\r\022\021\n\tfile_size\030\004 \001(\r\022\016\n"
  "\006module\030\005 \001(\r\022\016\n\006result\030\006 \001(\005\"\207\001\n\013Upload"
  "EofV1\022\r\n\005token\030\001 \001(\014\022\021\n\tfile_name\030\002 \001(\t\022"
  "\017\n\007file_id\030\003 \001(\r\022\024\n\014packet_count\030\004 \001(\r\022\022"
  "\n\ntotal_size\030\005 \001(\r\022\016\n\006module\030\006 \001(\r\022\013\n\003md"
  "5\030\007 \001(\t\"z\n\017UploadEofRespV1\022\r\n\005token\030\001 \001("
  "\014\022\021\n\tfile_name\030\002 \001(\t\022\017\n\007file_id\030\003 \001(\r\022\024\n"
  "\014packet_count\030\004 \001(\r\022\016\n\006module\030\005 \001(\r\022\016\n\006r"
  "esult\030\006 \001(\005\"x\n\020UploadFileDataV1\022\r\n\005token"
  "\030\001 \001(\014\022\017\n\007file_id\030\002 \001(\r\022\021\n\tpacket_no\030\003 \001"
  "(\r\022\021\n\tpiece_len\030\004 \001(\r\022\020\n\010data_len\030\005 \001(\r\022"
  "\014\n\004data\030\006 \001(\014\"Y\n\024UploadFileDataRespV1\022\r\n"
  "\005token\030\001 \001(\014\022\017\n\007file_id\030\002 \001(\r\022\021\n\tpacket_"
  "no\030\003 \001(\r\022\016\n\006result\030\004 \001(\005\"S\n\013QueryDataV1\022"
  "\r\n\005token\030\001 \001(\014\022\021\n\tfile_name\030\002 \001(\t\022\017\n\007fil"
  "e_id\030\003 \001(\r\022\021\n\tpacket_no\030\004 \001(\r\"0\n\017QueryDa"
  "taRespV1\022\r\n\005token\030\001 \001(\014\022\016\n\006result\030\002 \001(\005\""
  ">\n\014ReatartCmdV1\022\r\n\005token\030\001 \001(\014\022\016\n\006ts_sec"
  "\030\002 \001(\r\022\017\n\007ts_usec\030\003 \001(\r\".\n\rReatartRespV1"
  "\022\r\n\005token\030\001 \001(\014\022\016\n\006result\030\002 \001(\005\"\263\001\n\014Modu"
  "leConfV1\022\r\n\005token\030\001 \001(\014\022\023\n\013module_type\030\002"
  " \001(\r\022\031\n\021chip_manufacturer\030\003 \001(\r\022\021\n\tchip_"
  "type\030\004 \001(\t\022\023\n\013icd_version\030\005 \001(\t\022\014\n\004imei\030"
  "\006 \001(\t\022\024\n\014phone_number\030\007 \001(\t\022\030\n\020network_o"
  "perator\030\010 \001(\t\"1\n\020ModuleConfRespV1\022\r\n\005tok"
  "en\030\001 \001(\014\022\016\n\006result\030\002 \001(\005*\"\n\007MsgType\022\n\n\006P"
  "UBLIC\020\000\022\013\n\007PRIVATE\020\001*\217\006\n\005MsgID\022\013\n\007RESERV"
  "E\020\000\022\016\n\010LOGIN_V1\020\201\200\004\022\016\n\010LOGIN_V2\020\202\200\004\022\023\n\rL"
  "OGIN_RESP_V1\020\201\200\010\022\017\n\tLOGOUT_V1\020\201\200\014\022\024\n\016LOG"
  "OUT_RESP_V1\020\201\200\020\022\017\n\tCONFIG_V1\020\201\200\024\022\024\n\016CONF"
  "IG_RESP_V1\020\201\200\030\022\025\n\017REPORT_EVENT_V1\020\201\200\034\022\032\n"
  "\024REPORT_EVENT_RESP_V1\020\201\200 \022\016\n\010ALARM_V1\020\201\200"
  "$\022\023\n\rALARM_RESP_V1\020\201\200(\022\024\n\016ALARM_CLEAR_V1"
  "\020\201\200,\022\031\n\023ALARM_CLEAR_RESP_V1\020\201\2000\022\021\n\013GPS_I"
  "NFO_V1\020\201\2004\022\026\n\020GPS_INFO_RESP_V1\020\201\2008\022\024\n\016ST"
  "ATUS_INFO_V1\020\201\200<\022\031\n\023STATUS_INFO_RESP_V1\020"
  "\201\200@\022\024\n\016CONFIG_DATA_V1\020\201\200D\022\031\n\023CONFIG_DATA"
  "_RESP_V1\020\201\200H\022\026\n\020CONFIG_NOTIFY_V1\020\201\200L\022\033\n\025"
  "CONFIG_NOTIFY_RESP_V1\020\201\200P\022\024\n\016UPLOAD_FILE"
  "_V1\020\201\200T\022\031\n\023UPLOAD_FILE_RESP_V1\020\201\200X\022\023\n\rUP"
  "LOAD_EOF_V1\020\201\200\\\022\030\n\022UPLOAD_EOF_RESP_V1\020\201\200"
  "`\022\024\n\016RESTART_CMD_V1\020\201\200d\022\031\n\023RESTART_CMD_R"
  "ESP_V1\020\201\200h\022\023\n\rQUERY_DATA_V1\020\201\200l\022\030\n\022QUERY"
  "_DATA_RESP_V1\020\201\200p\022\031\n\023UPLOAD_FILE_DATA_V1"
  "\020\201\200t\022\036\n\030UPLOAD_FILE_DATA_RESP_V1\020\201\200x\022\024\n\016"
  "MODULE_CONF_V1\020\201\200|\022\032\n\023MODULE_CONF_RESP_V"
  "1\020\201\200\200\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_amtpap_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_amtpap_5fmsg_2eproto_sccs[33] = {
  &scc_info_AlarmClearRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_AlarmClearV1_amtpap_5fmsg_2eproto.base,
  &scc_info_AlarmRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_AlarmV1_amtpap_5fmsg_2eproto.base,
  &scc_info_CmdPrimitive_amtpap_5fmsg_2eproto.base,
  &scc_info_ConfigDataRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_ConfigDataV1_amtpap_5fmsg_2eproto.base,
  &scc_info_ConfigNotifyRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_ConfigNotifyV1_amtpap_5fmsg_2eproto.base,
  &scc_info_ConfigRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_ConfigV1_amtpap_5fmsg_2eproto.base,
  &scc_info_GPSInfoRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_GPSInfoV1_amtpap_5fmsg_2eproto.base,
  &scc_info_LoginRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_LoginV1_amtpap_5fmsg_2eproto.base,
  &scc_info_LogoutRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_LogoutV1_amtpap_5fmsg_2eproto.base,
  &scc_info_ModuleConfRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_ModuleConfV1_amtpap_5fmsg_2eproto.base,
  &scc_info_QueryDataRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_QueryDataV1_amtpap_5fmsg_2eproto.base,
  &scc_info_ReatartCmdV1_amtpap_5fmsg_2eproto.base,
  &scc_info_ReatartRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_ReportEventRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_ReportEventV1_amtpap_5fmsg_2eproto.base,
  &scc_info_StatusInfoRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_StatusInfoV1_amtpap_5fmsg_2eproto.base,
  &scc_info_UploadEofRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_UploadEofV1_amtpap_5fmsg_2eproto.base,
  &scc_info_UploadFileDataRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_UploadFileDataV1_amtpap_5fmsg_2eproto.base,
  &scc_info_UploadFileRespV1_amtpap_5fmsg_2eproto.base,
  &scc_info_UploadFileV1_amtpap_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_amtpap_5fmsg_2eproto_once;
static bool descriptor_table_amtpap_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_amtpap_5fmsg_2eproto = {
  &descriptor_table_amtpap_5fmsg_2eproto_initialized, descriptor_table_protodef_amtpap_5fmsg_2eproto, "amtpap_msg.proto", 3894,
  &descriptor_table_amtpap_5fmsg_2eproto_once, descriptor_table_amtpap_5fmsg_2eproto_sccs, descriptor_table_amtpap_5fmsg_2eproto_deps, 33, 0,
  schemas, file_default_instances, TableStruct_amtpap_5fmsg_2eproto::offsets,
  file_level_metadata_amtpap_5fmsg_2eproto, 33, file_level_enum_descriptors_amtpap_5fmsg_2eproto, file_level_service_descriptors_amtpap_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_amtpap_5fmsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_amtpap_5fmsg_2eproto), true);
namespace amtpap {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_amtpap_5fmsg_2eproto);
  return file_level_enum_descriptors_amtpap_5fmsg_2eproto[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_amtpap_5fmsg_2eproto);
  return file_level_enum_descriptors_amtpap_5fmsg_2eproto[1];
}
bool MsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 65537:
    case 65538:
    case 131073:
    case 196609:
    case 262145:
    case 327681:
    case 393217:
    case 458753:
    case 524289:
    case 589825:
    case 655361:
    case 720897:
    case 786433:
    case 851969:
    case 917505:
    case 983041:
    case 1048577:
    case 1114113:
    case 1179649:
    case 1245185:
    case 1310721:
    case 1376257:
    case 1441793:
    case 1507329:
    case 1572865:
    case 1638401:
    case 1703937:
    case 1769473:
    case 1835009:
    case 1900545:
    case 1966081:
    case 2031617:
    case 2097153:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CmdPrimitive::InitAsDefaultInstance() {
}
class CmdPrimitive::_Internal {
 public:
};

CmdPrimitive::CmdPrimitive()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.CmdPrimitive)
}
CmdPrimitive::CmdPrimitive(const CmdPrimitive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload_data().empty()) {
    payload_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_data_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&type_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:amtpap.CmdPrimitive)
}

void CmdPrimitive::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CmdPrimitive_amtpap_5fmsg_2eproto.base);
  payload_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&type_)) + sizeof(direction_));
}

CmdPrimitive::~CmdPrimitive() {
  // @@protoc_insertion_point(destructor:amtpap.CmdPrimitive)
  SharedDtor();
}

void CmdPrimitive::SharedDtor() {
  payload_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CmdPrimitive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdPrimitive& CmdPrimitive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmdPrimitive_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CmdPrimitive::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.CmdPrimitive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&type_)) + sizeof(direction_));
  _internal_metadata_.Clear();
}

const char* CmdPrimitive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .amtpap.MsgType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::amtpap::MsgType>(val));
        } else goto handle_unusual;
        continue;
      // fixed32 serial_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          serial_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // .amtpap.MsgID msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_msg_id(static_cast<::amtpap::MsgID>(val));
        } else goto handle_unusual;
        continue;
      // bool direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_payload_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmdPrimitive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.CmdPrimitive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .amtpap.MsgType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // fixed32 serial_number = 2;
  if (this->serial_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_serial_number(), target);
  }

  // .amtpap.MsgID msg_id = 3;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_msg_id(), target);
  }

  // bool direction = 4;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_direction(), target);
  }

  // bytes payload_data = 5;
  if (this->payload_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_payload_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.CmdPrimitive)
  return target;
}

size_t CmdPrimitive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.CmdPrimitive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload_data = 5;
  if (this->payload_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload_data());
  }

  // .amtpap.MsgType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // fixed32 serial_number = 2;
  if (this->serial_number() != 0) {
    total_size += 1 + 4;
  }

  // .amtpap.MsgID msg_id = 3;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_id());
  }

  // bool direction = 4;
  if (this->direction() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdPrimitive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.CmdPrimitive)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdPrimitive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmdPrimitive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.CmdPrimitive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.CmdPrimitive)
    MergeFrom(*source);
  }
}

void CmdPrimitive::MergeFrom(const CmdPrimitive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.CmdPrimitive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payload_data().size() > 0) {

    payload_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_data_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.serial_number() != 0) {
    _internal_set_serial_number(from._internal_serial_number());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void CmdPrimitive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.CmdPrimitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdPrimitive::CopyFrom(const CmdPrimitive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.CmdPrimitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdPrimitive::IsInitialized() const {
  return true;
}

void CmdPrimitive::InternalSwap(CmdPrimitive* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  payload_data_.Swap(&other->payload_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(serial_number_, other->serial_number_);
  swap(msg_id_, other->msg_id_);
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdPrimitive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginV1::InitAsDefaultInstance() {
}
class LoginV1::_Internal {
 public:
};

LoginV1::LoginV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.LoginV1)
}
LoginV1::LoginV1(const LoginV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  box_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_box_id().empty()) {
    box_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.box_id_);
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  manufactor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_manufactor().empty()) {
    manufactor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufactor_);
  }
  jwumq_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jwumq_id().empty()) {
    jwumq_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jwumq_id_);
  }
  ::memcpy(&begin_time_, &from.begin_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&release_id_) -
    reinterpret_cast<char*>(&begin_time_)) + sizeof(release_id_));
  // @@protoc_insertion_point(copy_constructor:amtpap.LoginV1)
}

void LoginV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginV1_amtpap_5fmsg_2eproto.base);
  box_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufactor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jwumq_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&begin_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&release_id_) -
      reinterpret_cast<char*>(&begin_time_)) + sizeof(release_id_));
}

LoginV1::~LoginV1() {
  // @@protoc_insertion_point(destructor:amtpap.LoginV1)
  SharedDtor();
}

void LoginV1::SharedDtor() {
  box_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufactor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jwumq_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginV1& LoginV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void LoginV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.LoginV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  box_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufactor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jwumq_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&begin_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&release_id_) -
      reinterpret_cast<char*>(&begin_time_)) + sizeof(release_id_));
  _internal_metadata_.Clear();
}

const char* LoginV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string box_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_box_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.LoginV1.box_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.LoginV1.pwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string manufactor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_manufactor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.LoginV1.manufactor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 begin_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 release_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          release_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string jwumq_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_jwumq_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.LoginV1.jwumq_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.LoginV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string box_id = 1;
  if (this->box_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_box_id().data(), static_cast<int>(this->_internal_box_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.LoginV1.box_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_box_id(), target);
  }

  // string pwd = 2;
  if (this->pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.LoginV1.pwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pwd(), target);
  }

  // string manufactor = 3;
  if (this->manufactor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manufactor().data(), static_cast<int>(this->_internal_manufactor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.LoginV1.manufactor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_manufactor(), target);
  }

  // uint64 begin_time = 4;
  if (this->begin_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_begin_time(), target);
  }

  // uint64 end_time = 5;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_end_time(), target);
  }

  // uint32 release_id = 6;
  if (this->release_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_release_id(), target);
  }

  // string jwumq_id = 7;
  if (this->jwumq_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jwumq_id().data(), static_cast<int>(this->_internal_jwumq_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.LoginV1.jwumq_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_jwumq_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.LoginV1)
  return target;
}

size_t LoginV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.LoginV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string box_id = 1;
  if (this->box_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_box_id());
  }

  // string pwd = 2;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  // string manufactor = 3;
  if (this->manufactor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufactor());
  }

  // string jwumq_id = 7;
  if (this->jwumq_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jwumq_id());
  }

  // uint64 begin_time = 4;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_begin_time());
  }

  // uint64 end_time = 5;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_time());
  }

  // uint32 release_id = 6;
  if (this->release_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_release_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.LoginV1)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.LoginV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.LoginV1)
    MergeFrom(*source);
  }
}

void LoginV1::MergeFrom(const LoginV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.LoginV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.box_id().size() > 0) {

    box_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.box_id_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.manufactor().size() > 0) {

    manufactor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufactor_);
  }
  if (from.jwumq_id().size() > 0) {

    jwumq_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jwumq_id_);
  }
  if (from.begin_time() != 0) {
    _internal_set_begin_time(from._internal_begin_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.release_id() != 0) {
    _internal_set_release_id(from._internal_release_id());
  }
}

void LoginV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.LoginV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginV1::CopyFrom(const LoginV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.LoginV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginV1::IsInitialized() const {
  return true;
}

void LoginV1::InternalSwap(LoginV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  box_id_.Swap(&other->box_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  manufactor_.Swap(&other->manufactor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  jwumq_id_.Swap(&other->jwumq_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(begin_time_, other->begin_time_);
  swap(end_time_, other->end_time_);
  swap(release_id_, other->release_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginRespV1::InitAsDefaultInstance() {
}
class LoginRespV1::_Internal {
 public:
};

LoginRespV1::LoginRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.LoginRespV1)
}
LoginRespV1::LoginRespV1(const LoginRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  manufactor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_manufactor().empty()) {
    manufactor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufactor_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:amtpap.LoginRespV1)
}

void LoginRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufactor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

LoginRespV1::~LoginRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.LoginRespV1)
  SharedDtor();
}

void LoginRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufactor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRespV1& LoginRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void LoginRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.LoginRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufactor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* LoginRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string manufactor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_manufactor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.LoginRespV1.manufactor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.LoginRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string manufactor = 2;
  if (this->manufactor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manufactor().data(), static_cast<int>(this->_internal_manufactor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.LoginRespV1.manufactor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_manufactor(), target);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.LoginRespV1)
  return target;
}

size_t LoginRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.LoginRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // string manufactor = 2;
  if (this->manufactor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufactor());
  }

  // int32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.LoginRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.LoginRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.LoginRespV1)
    MergeFrom(*source);
  }
}

void LoginRespV1::MergeFrom(const LoginRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.LoginRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.manufactor().size() > 0) {

    manufactor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufactor_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void LoginRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.LoginRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRespV1::CopyFrom(const LoginRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.LoginRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRespV1::IsInitialized() const {
  return true;
}

void LoginRespV1::InternalSwap(LoginRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  manufactor_.Swap(&other->manufactor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogoutV1::InitAsDefaultInstance() {
}
class LogoutV1::_Internal {
 public:
};

LogoutV1::LogoutV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.LogoutV1)
}
LogoutV1::LogoutV1(const LogoutV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:amtpap.LogoutV1)
}

void LogoutV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogoutV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LogoutV1::~LogoutV1() {
  // @@protoc_insertion_point(destructor:amtpap.LogoutV1)
  SharedDtor();
}

void LogoutV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogoutV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoutV1& LogoutV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogoutV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void LogoutV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.LogoutV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* LogoutV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogoutV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.LogoutV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.LogoutV1)
  return target;
}

size_t LogoutV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.LogoutV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.LogoutV1)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogoutV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.LogoutV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.LogoutV1)
    MergeFrom(*source);
  }
}

void LogoutV1::MergeFrom(const LogoutV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.LogoutV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void LogoutV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.LogoutV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutV1::CopyFrom(const LogoutV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.LogoutV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutV1::IsInitialized() const {
  return true;
}

void LogoutV1::InternalSwap(LogoutV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogoutRespV1::InitAsDefaultInstance() {
}
class LogoutRespV1::_Internal {
 public:
};

LogoutRespV1::LogoutRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.LogoutRespV1)
}
LogoutRespV1::LogoutRespV1(const LogoutRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:amtpap.LogoutRespV1)
}

void LogoutRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogoutRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

LogoutRespV1::~LogoutRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.LogoutRespV1)
  SharedDtor();
}

void LogoutRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogoutRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoutRespV1& LogoutRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogoutRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void LogoutRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.LogoutRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* LogoutRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogoutRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.LogoutRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.LogoutRespV1)
  return target;
}

size_t LogoutRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.LogoutRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.LogoutRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogoutRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.LogoutRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.LogoutRespV1)
    MergeFrom(*source);
  }
}

void LogoutRespV1::MergeFrom(const LogoutRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.LogoutRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void LogoutRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.LogoutRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRespV1::CopyFrom(const LogoutRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.LogoutRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRespV1::IsInitialized() const {
  return true;
}

void LogoutRespV1::InternalSwap(LogoutRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigV1::InitAsDefaultInstance() {
}
class ConfigV1::_Internal {
 public:
};

ConfigV1::ConfigV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.ConfigV1)
}
ConfigV1::ConfigV1(const ConfigV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  atuid_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_atuid_version().empty()) {
    atuid_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.atuid_version_);
  }
  // @@protoc_insertion_point(copy_constructor:amtpap.ConfigV1)
}

void ConfigV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConfigV1::~ConfigV1() {
  // @@protoc_insertion_point(destructor:amtpap.ConfigV1)
  SharedDtor();
}

void ConfigV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigV1& ConfigV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ConfigV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.ConfigV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ConfigV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string atuid_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_atuid_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.ConfigV1.atuid_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.ConfigV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string atuid_version = 2;
  if (this->atuid_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_atuid_version().data(), static_cast<int>(this->_internal_atuid_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.ConfigV1.atuid_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_atuid_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.ConfigV1)
  return target;
}

size_t ConfigV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.ConfigV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // string atuid_version = 2;
  if (this->atuid_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_atuid_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.ConfigV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.ConfigV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.ConfigV1)
    MergeFrom(*source);
  }
}

void ConfigV1::MergeFrom(const ConfigV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.ConfigV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.atuid_version().size() > 0) {

    atuid_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.atuid_version_);
  }
}

void ConfigV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.ConfigV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigV1::CopyFrom(const ConfigV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.ConfigV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigV1::IsInitialized() const {
  return true;
}

void ConfigV1::InternalSwap(ConfigV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  atuid_version_.Swap(&other->atuid_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigRespV1::InitAsDefaultInstance() {
}
class ConfigRespV1::_Internal {
 public:
};

ConfigRespV1::ConfigRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.ConfigRespV1)
}
ConfigRespV1::ConfigRespV1(const ConfigRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  atuid_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_atuid_version().empty()) {
    atuid_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.atuid_version_);
  }
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_md5().empty()) {
    md5_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&packet_count_) -
    reinterpret_cast<char*>(&result_)) + sizeof(packet_count_));
  // @@protoc_insertion_point(copy_constructor:amtpap.ConfigRespV1)
}

void ConfigRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_count_) -
      reinterpret_cast<char*>(&result_)) + sizeof(packet_count_));
}

ConfigRespV1::~ConfigRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.ConfigRespV1)
  SharedDtor();
}

void ConfigRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigRespV1& ConfigRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ConfigRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.ConfigRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_count_) -
      reinterpret_cast<char*>(&result_)) + sizeof(packet_count_));
  _internal_metadata_.Clear();
}

const char* ConfigRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string atuid_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_atuid_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.ConfigRespV1.atuid_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 packet_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          packet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string md5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_md5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.ConfigRespV1.md5"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.ConfigRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string atuid_version = 2;
  if (this->atuid_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_atuid_version().data(), static_cast<int>(this->_internal_atuid_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.ConfigRespV1.atuid_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_atuid_version(), target);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result(), target);
  }

  // bool update = 4;
  if (this->update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_update(), target);
  }

  // int32 packet_count = 5;
  if (this->packet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_packet_count(), target);
  }

  // string md5 = 6;
  if (this->md5().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_md5().data(), static_cast<int>(this->_internal_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.ConfigRespV1.md5");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.ConfigRespV1)
  return target;
}

size_t ConfigRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.ConfigRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // string atuid_version = 2;
  if (this->atuid_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_atuid_version());
  }

  // string md5 = 6;
  if (this->md5().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5());
  }

  // int32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  // bool update = 4;
  if (this->update() != 0) {
    total_size += 1 + 1;
  }

  // int32 packet_count = 5;
  if (this->packet_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_packet_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.ConfigRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.ConfigRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.ConfigRespV1)
    MergeFrom(*source);
  }
}

void ConfigRespV1::MergeFrom(const ConfigRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.ConfigRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.atuid_version().size() > 0) {

    atuid_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.atuid_version_);
  }
  if (from.md5().size() > 0) {

    md5_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.update() != 0) {
    _internal_set_update(from._internal_update());
  }
  if (from.packet_count() != 0) {
    _internal_set_packet_count(from._internal_packet_count());
  }
}

void ConfigRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.ConfigRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigRespV1::CopyFrom(const ConfigRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.ConfigRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRespV1::IsInitialized() const {
  return true;
}

void ConfigRespV1::InternalSwap(ConfigRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  atuid_version_.Swap(&other->atuid_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  md5_.Swap(&other->md5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
  swap(update_, other->update_);
  swap(packet_count_, other->packet_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigNotifyV1::InitAsDefaultInstance() {
}
class ConfigNotifyV1::_Internal {
 public:
};

ConfigNotifyV1::ConfigNotifyV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.ConfigNotifyV1)
}
ConfigNotifyV1::ConfigNotifyV1(const ConfigNotifyV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  atuid_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_atuid_version().empty()) {
    atuid_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.atuid_version_);
  }
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_md5().empty()) {
    md5_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  packet_count_ = from.packet_count_;
  // @@protoc_insertion_point(copy_constructor:amtpap.ConfigNotifyV1)
}

void ConfigNotifyV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigNotifyV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packet_count_ = 0;
}

ConfigNotifyV1::~ConfigNotifyV1() {
  // @@protoc_insertion_point(destructor:amtpap.ConfigNotifyV1)
  SharedDtor();
}

void ConfigNotifyV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigNotifyV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigNotifyV1& ConfigNotifyV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigNotifyV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ConfigNotifyV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.ConfigNotifyV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packet_count_ = 0;
  _internal_metadata_.Clear();
}

const char* ConfigNotifyV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string atuid_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_atuid_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.ConfigNotifyV1.atuid_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 packet_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          packet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string md5 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_md5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.ConfigNotifyV1.md5"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigNotifyV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.ConfigNotifyV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string atuid_version = 2;
  if (this->atuid_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_atuid_version().data(), static_cast<int>(this->_internal_atuid_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.ConfigNotifyV1.atuid_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_atuid_version(), target);
  }

  // int32 packet_count = 3;
  if (this->packet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_packet_count(), target);
  }

  // string md5 = 4;
  if (this->md5().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_md5().data(), static_cast<int>(this->_internal_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.ConfigNotifyV1.md5");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.ConfigNotifyV1)
  return target;
}

size_t ConfigNotifyV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.ConfigNotifyV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // string atuid_version = 2;
  if (this->atuid_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_atuid_version());
  }

  // string md5 = 4;
  if (this->md5().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5());
  }

  // int32 packet_count = 3;
  if (this->packet_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_packet_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigNotifyV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.ConfigNotifyV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigNotifyV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigNotifyV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.ConfigNotifyV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.ConfigNotifyV1)
    MergeFrom(*source);
  }
}

void ConfigNotifyV1::MergeFrom(const ConfigNotifyV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.ConfigNotifyV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.atuid_version().size() > 0) {

    atuid_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.atuid_version_);
  }
  if (from.md5().size() > 0) {

    md5_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  if (from.packet_count() != 0) {
    _internal_set_packet_count(from._internal_packet_count());
  }
}

void ConfigNotifyV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.ConfigNotifyV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigNotifyV1::CopyFrom(const ConfigNotifyV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.ConfigNotifyV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigNotifyV1::IsInitialized() const {
  return true;
}

void ConfigNotifyV1::InternalSwap(ConfigNotifyV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  atuid_version_.Swap(&other->atuid_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  md5_.Swap(&other->md5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(packet_count_, other->packet_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigNotifyV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigNotifyRespV1::InitAsDefaultInstance() {
}
class ConfigNotifyRespV1::_Internal {
 public:
};

ConfigNotifyRespV1::ConfigNotifyRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.ConfigNotifyRespV1)
}
ConfigNotifyRespV1::ConfigNotifyRespV1(const ConfigNotifyRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  atuid_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_atuid_version().empty()) {
    atuid_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.atuid_version_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:amtpap.ConfigNotifyRespV1)
}

void ConfigNotifyRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigNotifyRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

ConfigNotifyRespV1::~ConfigNotifyRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.ConfigNotifyRespV1)
  SharedDtor();
}

void ConfigNotifyRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigNotifyRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigNotifyRespV1& ConfigNotifyRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigNotifyRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ConfigNotifyRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.ConfigNotifyRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* ConfigNotifyRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string atuid_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_atuid_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.ConfigNotifyRespV1.atuid_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigNotifyRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.ConfigNotifyRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string atuid_version = 2;
  if (this->atuid_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_atuid_version().data(), static_cast<int>(this->_internal_atuid_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.ConfigNotifyRespV1.atuid_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_atuid_version(), target);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.ConfigNotifyRespV1)
  return target;
}

size_t ConfigNotifyRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.ConfigNotifyRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // string atuid_version = 2;
  if (this->atuid_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_atuid_version());
  }

  // int32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigNotifyRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.ConfigNotifyRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigNotifyRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigNotifyRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.ConfigNotifyRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.ConfigNotifyRespV1)
    MergeFrom(*source);
  }
}

void ConfigNotifyRespV1::MergeFrom(const ConfigNotifyRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.ConfigNotifyRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.atuid_version().size() > 0) {

    atuid_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.atuid_version_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ConfigNotifyRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.ConfigNotifyRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigNotifyRespV1::CopyFrom(const ConfigNotifyRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.ConfigNotifyRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigNotifyRespV1::IsInitialized() const {
  return true;
}

void ConfigNotifyRespV1::InternalSwap(ConfigNotifyRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  atuid_version_.Swap(&other->atuid_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigNotifyRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigDataV1::InitAsDefaultInstance() {
}
class ConfigDataV1::_Internal {
 public:
};

ConfigDataV1::ConfigDataV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.ConfigDataV1)
}
ConfigDataV1::ConfigDataV1(const ConfigDataV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  atuid_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_atuid_version().empty()) {
    atuid_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.atuid_version_);
  }
  config_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_data().empty()) {
    config_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_data_);
  }
  ::memcpy(&packet_count_, &from.packet_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_length_) -
    reinterpret_cast<char*>(&packet_count_)) + sizeof(data_length_));
  // @@protoc_insertion_point(copy_constructor:amtpap.ConfigDataV1)
}

void ConfigDataV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigDataV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&packet_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_length_) -
      reinterpret_cast<char*>(&packet_count_)) + sizeof(data_length_));
}

ConfigDataV1::~ConfigDataV1() {
  // @@protoc_insertion_point(destructor:amtpap.ConfigDataV1)
  SharedDtor();
}

void ConfigDataV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigDataV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigDataV1& ConfigDataV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigDataV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ConfigDataV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.ConfigDataV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&packet_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_length_) -
      reinterpret_cast<char*>(&packet_count_)) + sizeof(data_length_));
  _internal_metadata_.Clear();
}

const char* ConfigDataV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string atuid_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_atuid_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.ConfigDataV1.atuid_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 packet_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          packet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 packet_no = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          packet_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes config_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_config_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigDataV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.ConfigDataV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string atuid_version = 2;
  if (this->atuid_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_atuid_version().data(), static_cast<int>(this->_internal_atuid_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.ConfigDataV1.atuid_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_atuid_version(), target);
  }

  // int32 packet_count = 3;
  if (this->packet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_packet_count(), target);
  }

  // int32 packet_no = 4;
  if (this->packet_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_packet_no(), target);
  }

  // uint32 data_length = 5;
  if (this->data_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_length(), target);
  }

  // bytes config_data = 6;
  if (this->config_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_config_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.ConfigDataV1)
  return target;
}

size_t ConfigDataV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.ConfigDataV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // string atuid_version = 2;
  if (this->atuid_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_atuid_version());
  }

  // bytes config_data = 6;
  if (this->config_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_config_data());
  }

  // int32 packet_count = 3;
  if (this->packet_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_packet_count());
  }

  // int32 packet_no = 4;
  if (this->packet_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_packet_no());
  }

  // uint32 data_length = 5;
  if (this->data_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigDataV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.ConfigDataV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigDataV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigDataV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.ConfigDataV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.ConfigDataV1)
    MergeFrom(*source);
  }
}

void ConfigDataV1::MergeFrom(const ConfigDataV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.ConfigDataV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.atuid_version().size() > 0) {

    atuid_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.atuid_version_);
  }
  if (from.config_data().size() > 0) {

    config_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_data_);
  }
  if (from.packet_count() != 0) {
    _internal_set_packet_count(from._internal_packet_count());
  }
  if (from.packet_no() != 0) {
    _internal_set_packet_no(from._internal_packet_no());
  }
  if (from.data_length() != 0) {
    _internal_set_data_length(from._internal_data_length());
  }
}

void ConfigDataV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.ConfigDataV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigDataV1::CopyFrom(const ConfigDataV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.ConfigDataV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigDataV1::IsInitialized() const {
  return true;
}

void ConfigDataV1::InternalSwap(ConfigDataV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  atuid_version_.Swap(&other->atuid_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  config_data_.Swap(&other->config_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(packet_count_, other->packet_count_);
  swap(packet_no_, other->packet_no_);
  swap(data_length_, other->data_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigDataV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigDataRespV1::InitAsDefaultInstance() {
}
class ConfigDataRespV1::_Internal {
 public:
};

ConfigDataRespV1::ConfigDataRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.ConfigDataRespV1)
}
ConfigDataRespV1::ConfigDataRespV1(const ConfigDataRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  atuid_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_atuid_version().empty()) {
    atuid_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.atuid_version_);
  }
  ::memcpy(&packet_no_, &from.packet_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&packet_no_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:amtpap.ConfigDataRespV1)
}

void ConfigDataRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigDataRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&packet_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&packet_no_)) + sizeof(result_));
}

ConfigDataRespV1::~ConfigDataRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.ConfigDataRespV1)
  SharedDtor();
}

void ConfigDataRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigDataRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigDataRespV1& ConfigDataRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigDataRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ConfigDataRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.ConfigDataRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  atuid_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&packet_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&packet_no_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* ConfigDataRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string atuid_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_atuid_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.ConfigDataRespV1.atuid_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 packet_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          packet_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigDataRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.ConfigDataRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string atuid_version = 2;
  if (this->atuid_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_atuid_version().data(), static_cast<int>(this->_internal_atuid_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.ConfigDataRespV1.atuid_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_atuid_version(), target);
  }

  // int32 packet_no = 3;
  if (this->packet_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_packet_no(), target);
  }

  // int32 result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.ConfigDataRespV1)
  return target;
}

size_t ConfigDataRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.ConfigDataRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // string atuid_version = 2;
  if (this->atuid_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_atuid_version());
  }

  // int32 packet_no = 3;
  if (this->packet_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_packet_no());
  }

  // int32 result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigDataRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.ConfigDataRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigDataRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigDataRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.ConfigDataRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.ConfigDataRespV1)
    MergeFrom(*source);
  }
}

void ConfigDataRespV1::MergeFrom(const ConfigDataRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.ConfigDataRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.atuid_version().size() > 0) {

    atuid_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.atuid_version_);
  }
  if (from.packet_no() != 0) {
    _internal_set_packet_no(from._internal_packet_no());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ConfigDataRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.ConfigDataRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigDataRespV1::CopyFrom(const ConfigDataRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.ConfigDataRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigDataRespV1::IsInitialized() const {
  return true;
}

void ConfigDataRespV1::InternalSwap(ConfigDataRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  atuid_version_.Swap(&other->atuid_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(packet_no_, other->packet_no_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigDataRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReportEventV1::InitAsDefaultInstance() {
}
class ReportEventV1::_Internal {
 public:
};

ReportEventV1::ReportEventV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.ReportEventV1)
}
ReportEventV1::ReportEventV1(const ReportEventV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&ts_sec_, &from.ts_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&ts_sec_)) + sizeof(event_code_));
  // @@protoc_insertion_point(copy_constructor:amtpap.ReportEventV1)
}

void ReportEventV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportEventV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ts_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_code_) -
      reinterpret_cast<char*>(&ts_sec_)) + sizeof(event_code_));
}

ReportEventV1::~ReportEventV1() {
  // @@protoc_insertion_point(destructor:amtpap.ReportEventV1)
  SharedDtor();
}

void ReportEventV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReportEventV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportEventV1& ReportEventV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportEventV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ReportEventV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.ReportEventV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ts_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_code_) -
      reinterpret_cast<char*>(&ts_sec_)) + sizeof(event_code_));
  _internal_metadata_.Clear();
}

const char* ReportEventV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ts_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ts_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ts_usec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ts_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 module = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          module_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 event_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          event_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportEventV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.ReportEventV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint32 ts_sec = 2;
  if (this->ts_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ts_sec(), target);
  }

  // uint32 ts_usec = 3;
  if (this->ts_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ts_usec(), target);
  }

  // uint32 module = 4;
  if (this->module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_module(), target);
  }

  // uint32 event_code = 5;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.ReportEventV1)
  return target;
}

size_t ReportEventV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.ReportEventV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // uint32 ts_sec = 2;
  if (this->ts_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ts_sec());
  }

  // uint32 ts_usec = 3;
  if (this->ts_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ts_usec());
  }

  // uint32 module = 4;
  if (this->module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_module());
  }

  // uint32 event_code = 5;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportEventV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.ReportEventV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportEventV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportEventV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.ReportEventV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.ReportEventV1)
    MergeFrom(*source);
  }
}

void ReportEventV1::MergeFrom(const ReportEventV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.ReportEventV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.ts_sec() != 0) {
    _internal_set_ts_sec(from._internal_ts_sec());
  }
  if (from.ts_usec() != 0) {
    _internal_set_ts_usec(from._internal_ts_usec());
  }
  if (from.module() != 0) {
    _internal_set_module(from._internal_module());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void ReportEventV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.ReportEventV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportEventV1::CopyFrom(const ReportEventV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.ReportEventV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportEventV1::IsInitialized() const {
  return true;
}

void ReportEventV1::InternalSwap(ReportEventV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ts_sec_, other->ts_sec_);
  swap(ts_usec_, other->ts_usec_);
  swap(module_, other->module_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportEventV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReportEventRespV1::InitAsDefaultInstance() {
}
class ReportEventRespV1::_Internal {
 public:
};

ReportEventRespV1::ReportEventRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.ReportEventRespV1)
}
ReportEventRespV1::ReportEventRespV1(const ReportEventRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:amtpap.ReportEventRespV1)
}

void ReportEventRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportEventRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

ReportEventRespV1::~ReportEventRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.ReportEventRespV1)
  SharedDtor();
}

void ReportEventRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReportEventRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportEventRespV1& ReportEventRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportEventRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ReportEventRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.ReportEventRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* ReportEventRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportEventRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.ReportEventRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.ReportEventRespV1)
  return target;
}

size_t ReportEventRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.ReportEventRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportEventRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.ReportEventRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportEventRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportEventRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.ReportEventRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.ReportEventRespV1)
    MergeFrom(*source);
  }
}

void ReportEventRespV1::MergeFrom(const ReportEventRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.ReportEventRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ReportEventRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.ReportEventRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportEventRespV1::CopyFrom(const ReportEventRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.ReportEventRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportEventRespV1::IsInitialized() const {
  return true;
}

void ReportEventRespV1::InternalSwap(ReportEventRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportEventRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmV1::InitAsDefaultInstance() {
}
class AlarmV1::_Internal {
 public:
};

AlarmV1::AlarmV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.AlarmV1)
}
AlarmV1::AlarmV1(const AlarmV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&module_, &from.module_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_usec_) -
    reinterpret_cast<char*>(&module_)) + sizeof(ts_usec_));
  // @@protoc_insertion_point(copy_constructor:amtpap.AlarmV1)
}

void AlarmV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&module_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_usec_) -
      reinterpret_cast<char*>(&module_)) + sizeof(ts_usec_));
}

AlarmV1::~AlarmV1() {
  // @@protoc_insertion_point(destructor:amtpap.AlarmV1)
  SharedDtor();
}

void AlarmV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AlarmV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmV1& AlarmV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void AlarmV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.AlarmV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&module_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_usec_) -
      reinterpret_cast<char*>(&module_)) + sizeof(ts_usec_));
  _internal_metadata_.Clear();
}

const char* AlarmV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 module = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          module_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 alarm_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          alarm_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reason_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reason_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ts_sec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ts_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ts_usec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ts_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.AlarmV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint32 module = 2;
  if (this->module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_module(), target);
  }

  // uint32 seq = 3;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seq(), target);
  }

  // uint32 alarm_code = 4;
  if (this->alarm_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_alarm_code(), target);
  }

  // uint32 reason_code = 5;
  if (this->reason_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reason_code(), target);
  }

  // uint32 ts_sec = 6;
  if (this->ts_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ts_sec(), target);
  }

  // uint32 ts_usec = 7;
  if (this->ts_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ts_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.AlarmV1)
  return target;
}

size_t AlarmV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.AlarmV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // uint32 module = 2;
  if (this->module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_module());
  }

  // uint32 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // uint32 alarm_code = 4;
  if (this->alarm_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarm_code());
  }

  // uint32 reason_code = 5;
  if (this->reason_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reason_code());
  }

  // uint32 ts_sec = 6;
  if (this->ts_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ts_sec());
  }

  // uint32 ts_usec = 7;
  if (this->ts_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ts_usec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.AlarmV1)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.AlarmV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.AlarmV1)
    MergeFrom(*source);
  }
}

void AlarmV1::MergeFrom(const AlarmV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.AlarmV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.module() != 0) {
    _internal_set_module(from._internal_module());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.alarm_code() != 0) {
    _internal_set_alarm_code(from._internal_alarm_code());
  }
  if (from.reason_code() != 0) {
    _internal_set_reason_code(from._internal_reason_code());
  }
  if (from.ts_sec() != 0) {
    _internal_set_ts_sec(from._internal_ts_sec());
  }
  if (from.ts_usec() != 0) {
    _internal_set_ts_usec(from._internal_ts_usec());
  }
}

void AlarmV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.AlarmV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmV1::CopyFrom(const AlarmV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.AlarmV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmV1::IsInitialized() const {
  return true;
}

void AlarmV1::InternalSwap(AlarmV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(module_, other->module_);
  swap(seq_, other->seq_);
  swap(alarm_code_, other->alarm_code_);
  swap(reason_code_, other->reason_code_);
  swap(ts_sec_, other->ts_sec_);
  swap(ts_usec_, other->ts_usec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmRespV1::InitAsDefaultInstance() {
}
class AlarmRespV1::_Internal {
 public:
};

AlarmRespV1::AlarmRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.AlarmRespV1)
}
AlarmRespV1::AlarmRespV1(const AlarmRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:amtpap.AlarmRespV1)
}

void AlarmRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

AlarmRespV1::~AlarmRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.AlarmRespV1)
  SharedDtor();
}

void AlarmRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AlarmRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmRespV1& AlarmRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void AlarmRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.AlarmRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* AlarmRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.AlarmRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.AlarmRespV1)
  return target;
}

size_t AlarmRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.AlarmRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.AlarmRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.AlarmRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.AlarmRespV1)
    MergeFrom(*source);
  }
}

void AlarmRespV1::MergeFrom(const AlarmRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.AlarmRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void AlarmRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.AlarmRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmRespV1::CopyFrom(const AlarmRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.AlarmRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmRespV1::IsInitialized() const {
  return true;
}

void AlarmRespV1::InternalSwap(AlarmRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmClearV1::InitAsDefaultInstance() {
}
class AlarmClearV1::_Internal {
 public:
};

AlarmClearV1::AlarmClearV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.AlarmClearV1)
}
AlarmClearV1::AlarmClearV1(const AlarmClearV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&module_, &from.module_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_usec_) -
    reinterpret_cast<char*>(&module_)) + sizeof(ts_usec_));
  // @@protoc_insertion_point(copy_constructor:amtpap.AlarmClearV1)
}

void AlarmClearV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmClearV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&module_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_usec_) -
      reinterpret_cast<char*>(&module_)) + sizeof(ts_usec_));
}

AlarmClearV1::~AlarmClearV1() {
  // @@protoc_insertion_point(destructor:amtpap.AlarmClearV1)
  SharedDtor();
}

void AlarmClearV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AlarmClearV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmClearV1& AlarmClearV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmClearV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void AlarmClearV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.AlarmClearV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&module_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_usec_) -
      reinterpret_cast<char*>(&module_)) + sizeof(ts_usec_));
  _internal_metadata_.Clear();
}

const char* AlarmClearV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 module = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          module_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 alarm_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          alarm_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ts_sec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ts_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ts_usec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ts_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmClearV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.AlarmClearV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint32 module = 2;
  if (this->module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_module(), target);
  }

  // uint32 seq = 3;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seq(), target);
  }

  // uint32 alarm_code = 4;
  if (this->alarm_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_alarm_code(), target);
  }

  // uint32 ts_sec = 5;
  if (this->ts_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ts_sec(), target);
  }

  // uint32 ts_usec = 6;
  if (this->ts_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ts_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.AlarmClearV1)
  return target;
}

size_t AlarmClearV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.AlarmClearV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // uint32 module = 2;
  if (this->module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_module());
  }

  // uint32 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // uint32 alarm_code = 4;
  if (this->alarm_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarm_code());
  }

  // uint32 ts_sec = 5;
  if (this->ts_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ts_sec());
  }

  // uint32 ts_usec = 6;
  if (this->ts_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ts_usec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmClearV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.AlarmClearV1)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmClearV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmClearV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.AlarmClearV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.AlarmClearV1)
    MergeFrom(*source);
  }
}

void AlarmClearV1::MergeFrom(const AlarmClearV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.AlarmClearV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.module() != 0) {
    _internal_set_module(from._internal_module());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.alarm_code() != 0) {
    _internal_set_alarm_code(from._internal_alarm_code());
  }
  if (from.ts_sec() != 0) {
    _internal_set_ts_sec(from._internal_ts_sec());
  }
  if (from.ts_usec() != 0) {
    _internal_set_ts_usec(from._internal_ts_usec());
  }
}

void AlarmClearV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.AlarmClearV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmClearV1::CopyFrom(const AlarmClearV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.AlarmClearV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmClearV1::IsInitialized() const {
  return true;
}

void AlarmClearV1::InternalSwap(AlarmClearV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(module_, other->module_);
  swap(seq_, other->seq_);
  swap(alarm_code_, other->alarm_code_);
  swap(ts_sec_, other->ts_sec_);
  swap(ts_usec_, other->ts_usec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmClearV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmClearRespV1::InitAsDefaultInstance() {
}
class AlarmClearRespV1::_Internal {
 public:
};

AlarmClearRespV1::AlarmClearRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.AlarmClearRespV1)
}
AlarmClearRespV1::AlarmClearRespV1(const AlarmClearRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:amtpap.AlarmClearRespV1)
}

void AlarmClearRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmClearRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

AlarmClearRespV1::~AlarmClearRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.AlarmClearRespV1)
  SharedDtor();
}

void AlarmClearRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AlarmClearRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmClearRespV1& AlarmClearRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmClearRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void AlarmClearRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.AlarmClearRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* AlarmClearRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmClearRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.AlarmClearRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.AlarmClearRespV1)
  return target;
}

size_t AlarmClearRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.AlarmClearRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmClearRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.AlarmClearRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmClearRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmClearRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.AlarmClearRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.AlarmClearRespV1)
    MergeFrom(*source);
  }
}

void AlarmClearRespV1::MergeFrom(const AlarmClearRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.AlarmClearRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void AlarmClearRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.AlarmClearRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmClearRespV1::CopyFrom(const AlarmClearRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.AlarmClearRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmClearRespV1::IsInitialized() const {
  return true;
}

void AlarmClearRespV1::InternalSwap(AlarmClearRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmClearRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPSInfoV1::InitAsDefaultInstance() {
}
class GPSInfoV1::_Internal {
 public:
};

GPSInfoV1::GPSInfoV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.GPSInfoV1)
}
GPSInfoV1::GPSInfoV1(const GPSInfoV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_usec_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(ts_usec_));
  // @@protoc_insertion_point(copy_constructor:amtpap.GPSInfoV1)
}

void GPSInfoV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPSInfoV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_usec_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(ts_usec_));
}

GPSInfoV1::~GPSInfoV1() {
  // @@protoc_insertion_point(destructor:amtpap.GPSInfoV1)
  SharedDtor();
}

void GPSInfoV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GPSInfoV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPSInfoV1& GPSInfoV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPSInfoV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void GPSInfoV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.GPSInfoV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_usec_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(ts_usec_));
  _internal_metadata_.Clear();
}

const char* GPSInfoV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float altitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 ts_sec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ts_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ts_usec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ts_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPSInfoV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.GPSInfoV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // float longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_longitude(), target);
  }

  // float latitude = 3;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_latitude(), target);
  }

  // float altitude = 4;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_altitude(), target);
  }

  // float speed = 5;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_speed(), target);
  }

  // float heading = 6;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_heading(), target);
  }

  // uint32 ts_sec = 7;
  if (this->ts_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ts_sec(), target);
  }

  // uint32 ts_usec = 8;
  if (this->ts_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_ts_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.GPSInfoV1)
  return target;
}

size_t GPSInfoV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.GPSInfoV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // float longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float latitude = 3;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float altitude = 4;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float speed = 5;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading = 6;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 ts_sec = 7;
  if (this->ts_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ts_sec());
  }

  // uint32 ts_usec = 8;
  if (this->ts_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ts_usec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPSInfoV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.GPSInfoV1)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSInfoV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPSInfoV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.GPSInfoV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.GPSInfoV1)
    MergeFrom(*source);
  }
}

void GPSInfoV1::MergeFrom(const GPSInfoV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.GPSInfoV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (from.ts_sec() != 0) {
    _internal_set_ts_sec(from._internal_ts_sec());
  }
  if (from.ts_usec() != 0) {
    _internal_set_ts_usec(from._internal_ts_usec());
  }
}

void GPSInfoV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.GPSInfoV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSInfoV1::CopyFrom(const GPSInfoV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.GPSInfoV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSInfoV1::IsInitialized() const {
  return true;
}

void GPSInfoV1::InternalSwap(GPSInfoV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  swap(speed_, other->speed_);
  swap(heading_, other->heading_);
  swap(ts_sec_, other->ts_sec_);
  swap(ts_usec_, other->ts_usec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPSInfoV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPSInfoRespV1::InitAsDefaultInstance() {
}
class GPSInfoRespV1::_Internal {
 public:
};

GPSInfoRespV1::GPSInfoRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.GPSInfoRespV1)
}
GPSInfoRespV1::GPSInfoRespV1(const GPSInfoRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:amtpap.GPSInfoRespV1)
}

void GPSInfoRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPSInfoRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

GPSInfoRespV1::~GPSInfoRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.GPSInfoRespV1)
  SharedDtor();
}

void GPSInfoRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GPSInfoRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPSInfoRespV1& GPSInfoRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPSInfoRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void GPSInfoRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.GPSInfoRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* GPSInfoRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPSInfoRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.GPSInfoRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.GPSInfoRespV1)
  return target;
}

size_t GPSInfoRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.GPSInfoRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPSInfoRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.GPSInfoRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSInfoRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPSInfoRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.GPSInfoRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.GPSInfoRespV1)
    MergeFrom(*source);
  }
}

void GPSInfoRespV1::MergeFrom(const GPSInfoRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.GPSInfoRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void GPSInfoRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.GPSInfoRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSInfoRespV1::CopyFrom(const GPSInfoRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.GPSInfoRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSInfoRespV1::IsInitialized() const {
  return true;
}

void GPSInfoRespV1::InternalSwap(GPSInfoRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPSInfoRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusInfoV1::InitAsDefaultInstance() {
}
class StatusInfoV1::_Internal {
 public:
};

StatusInfoV1::StatusInfoV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.StatusInfoV1)
}
StatusInfoV1::StatusInfoV1(const StatusInfoV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&power_mode_, &from.power_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_usec_) -
    reinterpret_cast<char*>(&power_mode_)) + sizeof(ts_usec_));
  // @@protoc_insertion_point(copy_constructor:amtpap.StatusInfoV1)
}

void StatusInfoV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusInfoV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&power_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_usec_) -
      reinterpret_cast<char*>(&power_mode_)) + sizeof(ts_usec_));
}

StatusInfoV1::~StatusInfoV1() {
  // @@protoc_insertion_point(destructor:amtpap.StatusInfoV1)
  SharedDtor();
}

void StatusInfoV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatusInfoV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusInfoV1& StatusInfoV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusInfoV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void StatusInfoV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.StatusInfoV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&power_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_usec_) -
      reinterpret_cast<char*>(&power_mode_)) + sizeof(ts_usec_));
  _internal_metadata_.Clear();
}

const char* StatusInfoV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 power_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          power_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 files_letf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          files_letf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float disk_space = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          disk_space_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 ts_sec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ts_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ts_usec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ts_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusInfoV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.StatusInfoV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint32 power_mode = 2;
  if (this->power_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_power_mode(), target);
  }

  // uint32 files_letf = 3;
  if (this->files_letf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_files_letf(), target);
  }

  // float temperature = 4;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_temperature(), target);
  }

  // float disk_space = 5;
  if (!(this->disk_space() <= 0 && this->disk_space() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_disk_space(), target);
  }

  // uint32 ts_sec = 6;
  if (this->ts_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ts_sec(), target);
  }

  // uint32 ts_usec = 7;
  if (this->ts_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ts_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.StatusInfoV1)
  return target;
}

size_t StatusInfoV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.StatusInfoV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // uint32 power_mode = 2;
  if (this->power_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_power_mode());
  }

  // uint32 files_letf = 3;
  if (this->files_letf() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_files_letf());
  }

  // float temperature = 4;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    total_size += 1 + 4;
  }

  // float disk_space = 5;
  if (!(this->disk_space() <= 0 && this->disk_space() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 ts_sec = 6;
  if (this->ts_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ts_sec());
  }

  // uint32 ts_usec = 7;
  if (this->ts_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ts_usec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusInfoV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.StatusInfoV1)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusInfoV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusInfoV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.StatusInfoV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.StatusInfoV1)
    MergeFrom(*source);
  }
}

void StatusInfoV1::MergeFrom(const StatusInfoV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.StatusInfoV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.power_mode() != 0) {
    _internal_set_power_mode(from._internal_power_mode());
  }
  if (from.files_letf() != 0) {
    _internal_set_files_letf(from._internal_files_letf());
  }
  if (!(from.temperature() <= 0 && from.temperature() >= 0)) {
    _internal_set_temperature(from._internal_temperature());
  }
  if (!(from.disk_space() <= 0 && from.disk_space() >= 0)) {
    _internal_set_disk_space(from._internal_disk_space());
  }
  if (from.ts_sec() != 0) {
    _internal_set_ts_sec(from._internal_ts_sec());
  }
  if (from.ts_usec() != 0) {
    _internal_set_ts_usec(from._internal_ts_usec());
  }
}

void StatusInfoV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.StatusInfoV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusInfoV1::CopyFrom(const StatusInfoV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.StatusInfoV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusInfoV1::IsInitialized() const {
  return true;
}

void StatusInfoV1::InternalSwap(StatusInfoV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(power_mode_, other->power_mode_);
  swap(files_letf_, other->files_letf_);
  swap(temperature_, other->temperature_);
  swap(disk_space_, other->disk_space_);
  swap(ts_sec_, other->ts_sec_);
  swap(ts_usec_, other->ts_usec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusInfoV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusInfoRespV1::InitAsDefaultInstance() {
}
class StatusInfoRespV1::_Internal {
 public:
};

StatusInfoRespV1::StatusInfoRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.StatusInfoRespV1)
}
StatusInfoRespV1::StatusInfoRespV1(const StatusInfoRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:amtpap.StatusInfoRespV1)
}

void StatusInfoRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusInfoRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

StatusInfoRespV1::~StatusInfoRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.StatusInfoRespV1)
  SharedDtor();
}

void StatusInfoRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatusInfoRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusInfoRespV1& StatusInfoRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusInfoRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void StatusInfoRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.StatusInfoRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* StatusInfoRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusInfoRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.StatusInfoRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.StatusInfoRespV1)
  return target;
}

size_t StatusInfoRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.StatusInfoRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusInfoRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.StatusInfoRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusInfoRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusInfoRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.StatusInfoRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.StatusInfoRespV1)
    MergeFrom(*source);
  }
}

void StatusInfoRespV1::MergeFrom(const StatusInfoRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.StatusInfoRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void StatusInfoRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.StatusInfoRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusInfoRespV1::CopyFrom(const StatusInfoRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.StatusInfoRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusInfoRespV1::IsInitialized() const {
  return true;
}

void StatusInfoRespV1::InternalSwap(StatusInfoRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusInfoRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadFileV1::InitAsDefaultInstance() {
}
class UploadFileV1::_Internal {
 public:
};

UploadFileV1::UploadFileV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.UploadFileV1)
}
UploadFileV1::UploadFileV1(const UploadFileV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&retransmit_, &from.retransmit_,
    static_cast<size_t>(reinterpret_cast<char*>(&module_) -
    reinterpret_cast<char*>(&retransmit_)) + sizeof(module_));
  // @@protoc_insertion_point(copy_constructor:amtpap.UploadFileV1)
}

void UploadFileV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadFileV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&retransmit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&module_) -
      reinterpret_cast<char*>(&retransmit_)) + sizeof(module_));
}

UploadFileV1::~UploadFileV1() {
  // @@protoc_insertion_point(destructor:amtpap.UploadFileV1)
  SharedDtor();
}

void UploadFileV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UploadFileV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadFileV1& UploadFileV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadFileV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void UploadFileV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.UploadFileV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&retransmit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&module_) -
      reinterpret_cast<char*>(&retransmit_)) + sizeof(module_));
  _internal_metadata_.Clear();
}

const char* UploadFileV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.UploadFileV1.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool retransmit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          retransmit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 module = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          module_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadFileV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.UploadFileV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.UploadFileV1.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // bool retransmit = 3;
  if (this->retransmit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_retransmit(), target);
  }

  // uint32 module = 4;
  if (this->module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_module(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.UploadFileV1)
  return target;
}

size_t UploadFileV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.UploadFileV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // bool retransmit = 3;
  if (this->retransmit() != 0) {
    total_size += 1 + 1;
  }

  // uint32 module = 4;
  if (this->module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_module());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadFileV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.UploadFileV1)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadFileV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadFileV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.UploadFileV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.UploadFileV1)
    MergeFrom(*source);
  }
}

void UploadFileV1::MergeFrom(const UploadFileV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.UploadFileV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.retransmit() != 0) {
    _internal_set_retransmit(from._internal_retransmit());
  }
  if (from.module() != 0) {
    _internal_set_module(from._internal_module());
  }
}

void UploadFileV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.UploadFileV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileV1::CopyFrom(const UploadFileV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.UploadFileV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileV1::IsInitialized() const {
  return true;
}

void UploadFileV1::InternalSwap(UploadFileV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(retransmit_, other->retransmit_);
  swap(module_, other->module_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadFileV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadFileRespV1::InitAsDefaultInstance() {
}
class UploadFileRespV1::_Internal {
 public:
};

UploadFileRespV1::UploadFileRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.UploadFileRespV1)
}
UploadFileRespV1::UploadFileRespV1(const UploadFileRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:amtpap.UploadFileRespV1)
}

void UploadFileRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadFileRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(result_));
}

UploadFileRespV1::~UploadFileRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.UploadFileRespV1)
  SharedDtor();
}

void UploadFileRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UploadFileRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadFileRespV1& UploadFileRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadFileRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void UploadFileRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.UploadFileRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* UploadFileRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.UploadFileRespV1.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 module = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          module_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadFileRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.UploadFileRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.UploadFileRespV1.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // uint32 file_id = 3;
  if (this->file_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_file_id(), target);
  }

  // uint32 file_size = 4;
  if (this->file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_size(), target);
  }

  // uint32 module = 5;
  if (this->module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_module(), target);
  }

  // int32 result = 6;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.UploadFileRespV1)
  return target;
}

size_t UploadFileRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.UploadFileRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // uint32 file_id = 3;
  if (this->file_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_id());
  }

  // uint32 file_size = 4;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_size());
  }

  // uint32 module = 5;
  if (this->module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_module());
  }

  // int32 result = 6;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadFileRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.UploadFileRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadFileRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadFileRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.UploadFileRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.UploadFileRespV1)
    MergeFrom(*source);
  }
}

void UploadFileRespV1::MergeFrom(const UploadFileRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.UploadFileRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.file_id() != 0) {
    _internal_set_file_id(from._internal_file_id());
  }
  if (from.file_size() != 0) {
    _internal_set_file_size(from._internal_file_size());
  }
  if (from.module() != 0) {
    _internal_set_module(from._internal_module());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void UploadFileRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.UploadFileRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileRespV1::CopyFrom(const UploadFileRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.UploadFileRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileRespV1::IsInitialized() const {
  return true;
}

void UploadFileRespV1::InternalSwap(UploadFileRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_id_, other->file_id_);
  swap(file_size_, other->file_size_);
  swap(module_, other->module_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadFileRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadEofV1::InitAsDefaultInstance() {
}
class UploadEofV1::_Internal {
 public:
};

UploadEofV1::UploadEofV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.UploadEofV1)
}
UploadEofV1::UploadEofV1(const UploadEofV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_md5().empty()) {
    md5_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&module_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(module_));
  // @@protoc_insertion_point(copy_constructor:amtpap.UploadEofV1)
}

void UploadEofV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadEofV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&module_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(module_));
}

UploadEofV1::~UploadEofV1() {
  // @@protoc_insertion_point(destructor:amtpap.UploadEofV1)
  SharedDtor();
}

void UploadEofV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UploadEofV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadEofV1& UploadEofV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadEofV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void UploadEofV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.UploadEofV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&module_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(module_));
  _internal_metadata_.Clear();
}

const char* UploadEofV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.UploadEofV1.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 packet_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          packet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 module = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          module_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string md5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_md5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.UploadEofV1.md5"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadEofV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.UploadEofV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.UploadEofV1.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // uint32 file_id = 3;
  if (this->file_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_file_id(), target);
  }

  // uint32 packet_count = 4;
  if (this->packet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_packet_count(), target);
  }

  // uint32 total_size = 5;
  if (this->total_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_total_size(), target);
  }

  // uint32 module = 6;
  if (this->module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_module(), target);
  }

  // string md5 = 7;
  if (this->md5().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_md5().data(), static_cast<int>(this->_internal_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.UploadEofV1.md5");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.UploadEofV1)
  return target;
}

size_t UploadEofV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.UploadEofV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string md5 = 7;
  if (this->md5().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5());
  }

  // uint32 file_id = 3;
  if (this->file_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_id());
  }

  // uint32 packet_count = 4;
  if (this->packet_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_packet_count());
  }

  // uint32 total_size = 5;
  if (this->total_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_size());
  }

  // uint32 module = 6;
  if (this->module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_module());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadEofV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.UploadEofV1)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadEofV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadEofV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.UploadEofV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.UploadEofV1)
    MergeFrom(*source);
  }
}

void UploadEofV1::MergeFrom(const UploadEofV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.UploadEofV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.md5().size() > 0) {

    md5_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  if (from.file_id() != 0) {
    _internal_set_file_id(from._internal_file_id());
  }
  if (from.packet_count() != 0) {
    _internal_set_packet_count(from._internal_packet_count());
  }
  if (from.total_size() != 0) {
    _internal_set_total_size(from._internal_total_size());
  }
  if (from.module() != 0) {
    _internal_set_module(from._internal_module());
  }
}

void UploadEofV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.UploadEofV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadEofV1::CopyFrom(const UploadEofV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.UploadEofV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadEofV1::IsInitialized() const {
  return true;
}

void UploadEofV1::InternalSwap(UploadEofV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  md5_.Swap(&other->md5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_id_, other->file_id_);
  swap(packet_count_, other->packet_count_);
  swap(total_size_, other->total_size_);
  swap(module_, other->module_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadEofV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadEofRespV1::InitAsDefaultInstance() {
}
class UploadEofRespV1::_Internal {
 public:
};

UploadEofRespV1::UploadEofRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.UploadEofRespV1)
}
UploadEofRespV1::UploadEofRespV1(const UploadEofRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:amtpap.UploadEofRespV1)
}

void UploadEofRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadEofRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(result_));
}

UploadEofRespV1::~UploadEofRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.UploadEofRespV1)
  SharedDtor();
}

void UploadEofRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UploadEofRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadEofRespV1& UploadEofRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadEofRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void UploadEofRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.UploadEofRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* UploadEofRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.UploadEofRespV1.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 packet_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          packet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 module = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          module_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadEofRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.UploadEofRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.UploadEofRespV1.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // uint32 file_id = 3;
  if (this->file_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_file_id(), target);
  }

  // uint32 packet_count = 4;
  if (this->packet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_packet_count(), target);
  }

  // uint32 module = 5;
  if (this->module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_module(), target);
  }

  // int32 result = 6;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.UploadEofRespV1)
  return target;
}

size_t UploadEofRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.UploadEofRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // uint32 file_id = 3;
  if (this->file_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_id());
  }

  // uint32 packet_count = 4;
  if (this->packet_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_packet_count());
  }

  // uint32 module = 5;
  if (this->module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_module());
  }

  // int32 result = 6;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadEofRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.UploadEofRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadEofRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadEofRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.UploadEofRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.UploadEofRespV1)
    MergeFrom(*source);
  }
}

void UploadEofRespV1::MergeFrom(const UploadEofRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.UploadEofRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.file_id() != 0) {
    _internal_set_file_id(from._internal_file_id());
  }
  if (from.packet_count() != 0) {
    _internal_set_packet_count(from._internal_packet_count());
  }
  if (from.module() != 0) {
    _internal_set_module(from._internal_module());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void UploadEofRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.UploadEofRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadEofRespV1::CopyFrom(const UploadEofRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.UploadEofRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadEofRespV1::IsInitialized() const {
  return true;
}

void UploadEofRespV1::InternalSwap(UploadEofRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_id_, other->file_id_);
  swap(packet_count_, other->packet_count_);
  swap(module_, other->module_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadEofRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadFileDataV1::InitAsDefaultInstance() {
}
class UploadFileDataV1::_Internal {
 public:
};

UploadFileDataV1::UploadFileDataV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.UploadFileDataV1)
}
UploadFileDataV1::UploadFileDataV1(const UploadFileDataV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_len_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(data_len_));
  // @@protoc_insertion_point(copy_constructor:amtpap.UploadFileDataV1)
}

void UploadFileDataV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadFileDataV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_len_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(data_len_));
}

UploadFileDataV1::~UploadFileDataV1() {
  // @@protoc_insertion_point(destructor:amtpap.UploadFileDataV1)
  SharedDtor();
}

void UploadFileDataV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UploadFileDataV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadFileDataV1& UploadFileDataV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadFileDataV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void UploadFileDataV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.UploadFileDataV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_len_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(data_len_));
  _internal_metadata_.Clear();
}

const char* UploadFileDataV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 packet_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          packet_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 piece_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          piece_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadFileDataV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.UploadFileDataV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint32 file_id = 2;
  if (this->file_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_file_id(), target);
  }

  // uint32 packet_no = 3;
  if (this->packet_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_no(), target);
  }

  // uint32 piece_len = 4;
  if (this->piece_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_piece_len(), target);
  }

  // uint32 data_len = 5;
  if (this->data_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_len(), target);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.UploadFileDataV1)
  return target;
}

size_t UploadFileDataV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.UploadFileDataV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 file_id = 2;
  if (this->file_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_id());
  }

  // uint32 packet_no = 3;
  if (this->packet_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_packet_no());
  }

  // uint32 piece_len = 4;
  if (this->piece_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_piece_len());
  }

  // uint32 data_len = 5;
  if (this->data_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadFileDataV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.UploadFileDataV1)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadFileDataV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadFileDataV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.UploadFileDataV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.UploadFileDataV1)
    MergeFrom(*source);
  }
}

void UploadFileDataV1::MergeFrom(const UploadFileDataV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.UploadFileDataV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.file_id() != 0) {
    _internal_set_file_id(from._internal_file_id());
  }
  if (from.packet_no() != 0) {
    _internal_set_packet_no(from._internal_packet_no());
  }
  if (from.piece_len() != 0) {
    _internal_set_piece_len(from._internal_piece_len());
  }
  if (from.data_len() != 0) {
    _internal_set_data_len(from._internal_data_len());
  }
}

void UploadFileDataV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.UploadFileDataV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileDataV1::CopyFrom(const UploadFileDataV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.UploadFileDataV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileDataV1::IsInitialized() const {
  return true;
}

void UploadFileDataV1::InternalSwap(UploadFileDataV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_id_, other->file_id_);
  swap(packet_no_, other->packet_no_);
  swap(piece_len_, other->piece_len_);
  swap(data_len_, other->data_len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadFileDataV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadFileDataRespV1::InitAsDefaultInstance() {
}
class UploadFileDataRespV1::_Internal {
 public:
};

UploadFileDataRespV1::UploadFileDataRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.UploadFileDataRespV1)
}
UploadFileDataRespV1::UploadFileDataRespV1(const UploadFileDataRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:amtpap.UploadFileDataRespV1)
}

void UploadFileDataRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadFileDataRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(result_));
}

UploadFileDataRespV1::~UploadFileDataRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.UploadFileDataRespV1)
  SharedDtor();
}

void UploadFileDataRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UploadFileDataRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadFileDataRespV1& UploadFileDataRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadFileDataRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void UploadFileDataRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.UploadFileDataRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* UploadFileDataRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 packet_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          packet_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadFileDataRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.UploadFileDataRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint32 file_id = 2;
  if (this->file_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_file_id(), target);
  }

  // uint32 packet_no = 3;
  if (this->packet_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_no(), target);
  }

  // int32 result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.UploadFileDataRespV1)
  return target;
}

size_t UploadFileDataRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.UploadFileDataRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // uint32 file_id = 2;
  if (this->file_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_id());
  }

  // uint32 packet_no = 3;
  if (this->packet_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_packet_no());
  }

  // int32 result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadFileDataRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.UploadFileDataRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadFileDataRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadFileDataRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.UploadFileDataRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.UploadFileDataRespV1)
    MergeFrom(*source);
  }
}

void UploadFileDataRespV1::MergeFrom(const UploadFileDataRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.UploadFileDataRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.file_id() != 0) {
    _internal_set_file_id(from._internal_file_id());
  }
  if (from.packet_no() != 0) {
    _internal_set_packet_no(from._internal_packet_no());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void UploadFileDataRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.UploadFileDataRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileDataRespV1::CopyFrom(const UploadFileDataRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.UploadFileDataRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileDataRespV1::IsInitialized() const {
  return true;
}

void UploadFileDataRespV1::InternalSwap(UploadFileDataRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_id_, other->file_id_);
  swap(packet_no_, other->packet_no_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadFileDataRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryDataV1::InitAsDefaultInstance() {
}
class QueryDataV1::_Internal {
 public:
};

QueryDataV1::QueryDataV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.QueryDataV1)
}
QueryDataV1::QueryDataV1(const QueryDataV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&packet_no_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(packet_no_));
  // @@protoc_insertion_point(copy_constructor:amtpap.QueryDataV1)
}

void QueryDataV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryDataV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_no_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(packet_no_));
}

QueryDataV1::~QueryDataV1() {
  // @@protoc_insertion_point(destructor:amtpap.QueryDataV1)
  SharedDtor();
}

void QueryDataV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryDataV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryDataV1& QueryDataV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryDataV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void QueryDataV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.QueryDataV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_no_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(packet_no_));
  _internal_metadata_.Clear();
}

const char* QueryDataV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.QueryDataV1.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 packet_no = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          packet_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryDataV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.QueryDataV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.QueryDataV1.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // uint32 file_id = 3;
  if (this->file_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_file_id(), target);
  }

  // uint32 packet_no = 4;
  if (this->packet_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_packet_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.QueryDataV1)
  return target;
}

size_t QueryDataV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.QueryDataV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // uint32 file_id = 3;
  if (this->file_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_id());
  }

  // uint32 packet_no = 4;
  if (this->packet_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_packet_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryDataV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.QueryDataV1)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryDataV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryDataV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.QueryDataV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.QueryDataV1)
    MergeFrom(*source);
  }
}

void QueryDataV1::MergeFrom(const QueryDataV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.QueryDataV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.file_id() != 0) {
    _internal_set_file_id(from._internal_file_id());
  }
  if (from.packet_no() != 0) {
    _internal_set_packet_no(from._internal_packet_no());
  }
}

void QueryDataV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.QueryDataV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDataV1::CopyFrom(const QueryDataV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.QueryDataV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDataV1::IsInitialized() const {
  return true;
}

void QueryDataV1::InternalSwap(QueryDataV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_id_, other->file_id_);
  swap(packet_no_, other->packet_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDataV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryDataRespV1::InitAsDefaultInstance() {
}
class QueryDataRespV1::_Internal {
 public:
};

QueryDataRespV1::QueryDataRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.QueryDataRespV1)
}
QueryDataRespV1::QueryDataRespV1(const QueryDataRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:amtpap.QueryDataRespV1)
}

void QueryDataRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryDataRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

QueryDataRespV1::~QueryDataRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.QueryDataRespV1)
  SharedDtor();
}

void QueryDataRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryDataRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryDataRespV1& QueryDataRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryDataRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void QueryDataRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.QueryDataRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* QueryDataRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryDataRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.QueryDataRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.QueryDataRespV1)
  return target;
}

size_t QueryDataRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.QueryDataRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryDataRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.QueryDataRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryDataRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryDataRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.QueryDataRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.QueryDataRespV1)
    MergeFrom(*source);
  }
}

void QueryDataRespV1::MergeFrom(const QueryDataRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.QueryDataRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void QueryDataRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.QueryDataRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDataRespV1::CopyFrom(const QueryDataRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.QueryDataRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDataRespV1::IsInitialized() const {
  return true;
}

void QueryDataRespV1::InternalSwap(QueryDataRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDataRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReatartCmdV1::InitAsDefaultInstance() {
}
class ReatartCmdV1::_Internal {
 public:
};

ReatartCmdV1::ReatartCmdV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.ReatartCmdV1)
}
ReatartCmdV1::ReatartCmdV1(const ReatartCmdV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&ts_sec_, &from.ts_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_usec_) -
    reinterpret_cast<char*>(&ts_sec_)) + sizeof(ts_usec_));
  // @@protoc_insertion_point(copy_constructor:amtpap.ReatartCmdV1)
}

void ReatartCmdV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReatartCmdV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ts_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_usec_) -
      reinterpret_cast<char*>(&ts_sec_)) + sizeof(ts_usec_));
}

ReatartCmdV1::~ReatartCmdV1() {
  // @@protoc_insertion_point(destructor:amtpap.ReatartCmdV1)
  SharedDtor();
}

void ReatartCmdV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReatartCmdV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReatartCmdV1& ReatartCmdV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReatartCmdV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ReatartCmdV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.ReatartCmdV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ts_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_usec_) -
      reinterpret_cast<char*>(&ts_sec_)) + sizeof(ts_usec_));
  _internal_metadata_.Clear();
}

const char* ReatartCmdV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ts_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ts_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ts_usec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ts_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReatartCmdV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.ReatartCmdV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint32 ts_sec = 2;
  if (this->ts_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ts_sec(), target);
  }

  // uint32 ts_usec = 3;
  if (this->ts_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ts_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.ReatartCmdV1)
  return target;
}

size_t ReatartCmdV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.ReatartCmdV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // uint32 ts_sec = 2;
  if (this->ts_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ts_sec());
  }

  // uint32 ts_usec = 3;
  if (this->ts_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ts_usec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReatartCmdV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.ReatartCmdV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ReatartCmdV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReatartCmdV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.ReatartCmdV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.ReatartCmdV1)
    MergeFrom(*source);
  }
}

void ReatartCmdV1::MergeFrom(const ReatartCmdV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.ReatartCmdV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.ts_sec() != 0) {
    _internal_set_ts_sec(from._internal_ts_sec());
  }
  if (from.ts_usec() != 0) {
    _internal_set_ts_usec(from._internal_ts_usec());
  }
}

void ReatartCmdV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.ReatartCmdV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReatartCmdV1::CopyFrom(const ReatartCmdV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.ReatartCmdV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReatartCmdV1::IsInitialized() const {
  return true;
}

void ReatartCmdV1::InternalSwap(ReatartCmdV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ts_sec_, other->ts_sec_);
  swap(ts_usec_, other->ts_usec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReatartCmdV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReatartRespV1::InitAsDefaultInstance() {
}
class ReatartRespV1::_Internal {
 public:
};

ReatartRespV1::ReatartRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.ReatartRespV1)
}
ReatartRespV1::ReatartRespV1(const ReatartRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:amtpap.ReatartRespV1)
}

void ReatartRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReatartRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

ReatartRespV1::~ReatartRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.ReatartRespV1)
  SharedDtor();
}

void ReatartRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReatartRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReatartRespV1& ReatartRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReatartRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ReatartRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.ReatartRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* ReatartRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReatartRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.ReatartRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.ReatartRespV1)
  return target;
}

size_t ReatartRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.ReatartRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReatartRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.ReatartRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ReatartRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReatartRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.ReatartRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.ReatartRespV1)
    MergeFrom(*source);
  }
}

void ReatartRespV1::MergeFrom(const ReatartRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.ReatartRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ReatartRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.ReatartRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReatartRespV1::CopyFrom(const ReatartRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.ReatartRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReatartRespV1::IsInitialized() const {
  return true;
}

void ReatartRespV1::InternalSwap(ReatartRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReatartRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModuleConfV1::InitAsDefaultInstance() {
}
class ModuleConfV1::_Internal {
 public:
};

ModuleConfV1::ModuleConfV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.ModuleConfV1)
}
ModuleConfV1::ModuleConfV1(const ModuleConfV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  chip_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chip_type().empty()) {
    chip_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chip_type_);
  }
  icd_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icd_version().empty()) {
    icd_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icd_version_);
  }
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imei().empty()) {
    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone_number().empty()) {
    phone_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_number_);
  }
  network_operator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network_operator().empty()) {
    network_operator_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.network_operator_);
  }
  ::memcpy(&module_type_, &from.module_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&chip_manufacturer_) -
    reinterpret_cast<char*>(&module_type_)) + sizeof(chip_manufacturer_));
  // @@protoc_insertion_point(copy_constructor:amtpap.ModuleConfV1)
}

void ModuleConfV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModuleConfV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chip_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icd_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_operator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&module_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chip_manufacturer_) -
      reinterpret_cast<char*>(&module_type_)) + sizeof(chip_manufacturer_));
}

ModuleConfV1::~ModuleConfV1() {
  // @@protoc_insertion_point(destructor:amtpap.ModuleConfV1)
  SharedDtor();
}

void ModuleConfV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chip_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icd_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imei_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_operator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModuleConfV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModuleConfV1& ModuleConfV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModuleConfV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ModuleConfV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.ModuleConfV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chip_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icd_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_operator_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&module_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chip_manufacturer_) -
      reinterpret_cast<char*>(&module_type_)) + sizeof(chip_manufacturer_));
  _internal_metadata_.Clear();
}

const char* ModuleConfV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 module_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          module_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 chip_manufacturer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chip_manufacturer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chip_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_chip_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.ModuleConfV1.chip_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icd_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_icd_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.ModuleConfV1.icd_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imei = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_imei();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.ModuleConfV1.imei"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone_number = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_phone_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.ModuleConfV1.phone_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string network_operator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_network_operator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amtpap.ModuleConfV1.network_operator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModuleConfV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.ModuleConfV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint32 module_type = 2;
  if (this->module_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_module_type(), target);
  }

  // uint32 chip_manufacturer = 3;
  if (this->chip_manufacturer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chip_manufacturer(), target);
  }

  // string chip_type = 4;
  if (this->chip_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chip_type().data(), static_cast<int>(this->_internal_chip_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.ModuleConfV1.chip_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chip_type(), target);
  }

  // string icd_version = 5;
  if (this->icd_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icd_version().data(), static_cast<int>(this->_internal_icd_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.ModuleConfV1.icd_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_icd_version(), target);
  }

  // string imei = 6;
  if (this->imei().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.ModuleConfV1.imei");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_imei(), target);
  }

  // string phone_number = 7;
  if (this->phone_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_number().data(), static_cast<int>(this->_internal_phone_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.ModuleConfV1.phone_number");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_phone_number(), target);
  }

  // string network_operator = 8;
  if (this->network_operator().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network_operator().data(), static_cast<int>(this->_internal_network_operator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amtpap.ModuleConfV1.network_operator");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_network_operator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.ModuleConfV1)
  return target;
}

size_t ModuleConfV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.ModuleConfV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // string chip_type = 4;
  if (this->chip_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chip_type());
  }

  // string icd_version = 5;
  if (this->icd_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icd_version());
  }

  // string imei = 6;
  if (this->imei().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imei());
  }

  // string phone_number = 7;
  if (this->phone_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_number());
  }

  // string network_operator = 8;
  if (this->network_operator().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network_operator());
  }

  // uint32 module_type = 2;
  if (this->module_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_module_type());
  }

  // uint32 chip_manufacturer = 3;
  if (this->chip_manufacturer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chip_manufacturer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModuleConfV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.ModuleConfV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ModuleConfV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModuleConfV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.ModuleConfV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.ModuleConfV1)
    MergeFrom(*source);
  }
}

void ModuleConfV1::MergeFrom(const ModuleConfV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.ModuleConfV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.chip_type().size() > 0) {

    chip_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chip_type_);
  }
  if (from.icd_version().size() > 0) {

    icd_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icd_version_);
  }
  if (from.imei().size() > 0) {

    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  if (from.phone_number().size() > 0) {

    phone_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_number_);
  }
  if (from.network_operator().size() > 0) {

    network_operator_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.network_operator_);
  }
  if (from.module_type() != 0) {
    _internal_set_module_type(from._internal_module_type());
  }
  if (from.chip_manufacturer() != 0) {
    _internal_set_chip_manufacturer(from._internal_chip_manufacturer());
  }
}

void ModuleConfV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.ModuleConfV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleConfV1::CopyFrom(const ModuleConfV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.ModuleConfV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleConfV1::IsInitialized() const {
  return true;
}

void ModuleConfV1::InternalSwap(ModuleConfV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chip_type_.Swap(&other->chip_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icd_version_.Swap(&other->icd_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  imei_.Swap(&other->imei_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_number_.Swap(&other->phone_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  network_operator_.Swap(&other->network_operator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(module_type_, other->module_type_);
  swap(chip_manufacturer_, other->chip_manufacturer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleConfV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModuleConfRespV1::InitAsDefaultInstance() {
}
class ModuleConfRespV1::_Internal {
 public:
};

ModuleConfRespV1::ModuleConfRespV1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amtpap.ModuleConfRespV1)
}
ModuleConfRespV1::ModuleConfRespV1(const ModuleConfRespV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:amtpap.ModuleConfRespV1)
}

void ModuleConfRespV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModuleConfRespV1_amtpap_5fmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

ModuleConfRespV1::~ModuleConfRespV1() {
  // @@protoc_insertion_point(destructor:amtpap.ModuleConfRespV1)
  SharedDtor();
}

void ModuleConfRespV1::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModuleConfRespV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModuleConfRespV1& ModuleConfRespV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModuleConfRespV1_amtpap_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ModuleConfRespV1::Clear() {
// @@protoc_insertion_point(message_clear_start:amtpap.ModuleConfRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* ModuleConfRespV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModuleConfRespV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amtpap.ModuleConfRespV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amtpap.ModuleConfRespV1)
  return target;
}

size_t ModuleConfRespV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amtpap.ModuleConfRespV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModuleConfRespV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amtpap.ModuleConfRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ModuleConfRespV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModuleConfRespV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amtpap.ModuleConfRespV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amtpap.ModuleConfRespV1)
    MergeFrom(*source);
  }
}

void ModuleConfRespV1::MergeFrom(const ModuleConfRespV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amtpap.ModuleConfRespV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ModuleConfRespV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amtpap.ModuleConfRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleConfRespV1::CopyFrom(const ModuleConfRespV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amtpap.ModuleConfRespV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleConfRespV1::IsInitialized() const {
  return true;
}

void ModuleConfRespV1::InternalSwap(ModuleConfRespV1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleConfRespV1::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace amtpap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::amtpap::CmdPrimitive* Arena::CreateMaybeMessage< ::amtpap::CmdPrimitive >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::CmdPrimitive >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::LoginV1* Arena::CreateMaybeMessage< ::amtpap::LoginV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::LoginV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::LoginRespV1* Arena::CreateMaybeMessage< ::amtpap::LoginRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::LoginRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::LogoutV1* Arena::CreateMaybeMessage< ::amtpap::LogoutV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::LogoutV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::LogoutRespV1* Arena::CreateMaybeMessage< ::amtpap::LogoutRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::LogoutRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::ConfigV1* Arena::CreateMaybeMessage< ::amtpap::ConfigV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::ConfigV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::ConfigRespV1* Arena::CreateMaybeMessage< ::amtpap::ConfigRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::ConfigRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::ConfigNotifyV1* Arena::CreateMaybeMessage< ::amtpap::ConfigNotifyV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::ConfigNotifyV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::ConfigNotifyRespV1* Arena::CreateMaybeMessage< ::amtpap::ConfigNotifyRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::ConfigNotifyRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::ConfigDataV1* Arena::CreateMaybeMessage< ::amtpap::ConfigDataV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::ConfigDataV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::ConfigDataRespV1* Arena::CreateMaybeMessage< ::amtpap::ConfigDataRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::ConfigDataRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::ReportEventV1* Arena::CreateMaybeMessage< ::amtpap::ReportEventV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::ReportEventV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::ReportEventRespV1* Arena::CreateMaybeMessage< ::amtpap::ReportEventRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::ReportEventRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::AlarmV1* Arena::CreateMaybeMessage< ::amtpap::AlarmV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::AlarmV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::AlarmRespV1* Arena::CreateMaybeMessage< ::amtpap::AlarmRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::AlarmRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::AlarmClearV1* Arena::CreateMaybeMessage< ::amtpap::AlarmClearV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::AlarmClearV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::AlarmClearRespV1* Arena::CreateMaybeMessage< ::amtpap::AlarmClearRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::AlarmClearRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::GPSInfoV1* Arena::CreateMaybeMessage< ::amtpap::GPSInfoV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::GPSInfoV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::GPSInfoRespV1* Arena::CreateMaybeMessage< ::amtpap::GPSInfoRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::GPSInfoRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::StatusInfoV1* Arena::CreateMaybeMessage< ::amtpap::StatusInfoV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::StatusInfoV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::StatusInfoRespV1* Arena::CreateMaybeMessage< ::amtpap::StatusInfoRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::StatusInfoRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::UploadFileV1* Arena::CreateMaybeMessage< ::amtpap::UploadFileV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::UploadFileV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::UploadFileRespV1* Arena::CreateMaybeMessage< ::amtpap::UploadFileRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::UploadFileRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::UploadEofV1* Arena::CreateMaybeMessage< ::amtpap::UploadEofV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::UploadEofV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::UploadEofRespV1* Arena::CreateMaybeMessage< ::amtpap::UploadEofRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::UploadEofRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::UploadFileDataV1* Arena::CreateMaybeMessage< ::amtpap::UploadFileDataV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::UploadFileDataV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::UploadFileDataRespV1* Arena::CreateMaybeMessage< ::amtpap::UploadFileDataRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::UploadFileDataRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::QueryDataV1* Arena::CreateMaybeMessage< ::amtpap::QueryDataV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::QueryDataV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::QueryDataRespV1* Arena::CreateMaybeMessage< ::amtpap::QueryDataRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::QueryDataRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::ReatartCmdV1* Arena::CreateMaybeMessage< ::amtpap::ReatartCmdV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::ReatartCmdV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::ReatartRespV1* Arena::CreateMaybeMessage< ::amtpap::ReatartRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::ReatartRespV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::ModuleConfV1* Arena::CreateMaybeMessage< ::amtpap::ModuleConfV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::ModuleConfV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::amtpap::ModuleConfRespV1* Arena::CreateMaybeMessage< ::amtpap::ModuleConfRespV1 >(Arena* arena) {
  return Arena::CreateInternal< ::amtpap::ModuleConfRespV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
