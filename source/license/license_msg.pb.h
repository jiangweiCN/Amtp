// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: license_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_license_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_license_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_license_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_license_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_license_5fmsg_2eproto;
namespace license_msg {
class License;
class LicenseDefaultTypeInternal;
extern LicenseDefaultTypeInternal _License_default_instance_;
class LicenseInfo;
class LicenseInfoDefaultTypeInternal;
extern LicenseInfoDefaultTypeInternal _LicenseInfo_default_instance_;
}  // namespace license_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::license_msg::License* Arena::CreateMaybeMessage<::license_msg::License>(Arena*);
template<> ::license_msg::LicenseInfo* Arena::CreateMaybeMessage<::license_msg::LicenseInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace license_msg {

enum LicenseType : int {
  dev = 0,
  atu = 1,
  LicenseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LicenseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LicenseType_IsValid(int value);
constexpr LicenseType LicenseType_MIN = dev;
constexpr LicenseType LicenseType_MAX = atu;
constexpr int LicenseType_ARRAYSIZE = LicenseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LicenseType_descriptor();
template<typename T>
inline const std::string& LicenseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LicenseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LicenseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LicenseType_descriptor(), enum_t_value);
}
inline bool LicenseType_Parse(
    const std::string& name, LicenseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LicenseType>(
    LicenseType_descriptor(), name, value);
}
// ===================================================================

class License :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:license_msg.License) */ {
 public:
  License();
  virtual ~License();

  License(const License& from);
  License(License&& from) noexcept
    : License() {
    *this = ::std::move(from);
  }

  inline License& operator=(const License& from) {
    CopyFrom(from);
    return *this;
  }
  inline License& operator=(License&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const License& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const License* internal_default_instance() {
    return reinterpret_cast<const License*>(
               &_License_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(License& a, License& b) {
    a.Swap(&b);
  }
  inline void Swap(License* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline License* New() const final {
    return CreateMaybeMessage<License>(nullptr);
  }

  License* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<License>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const License& from);
  void MergeFrom(const License& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(License* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "license_msg.License";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_license_5fmsg_2eproto);
    return ::descriptor_table_license_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 4,
    kTypeFieldNumber = 1,
    kCheckFieldNumber = 2,
    kInfoLenFieldNumber = 3,
  };
  // bytes info = 4;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const void* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // .license_msg.LicenseType type = 1;
  void clear_type();
  ::license_msg::LicenseType type() const;
  void set_type(::license_msg::LicenseType value);
  private:
  ::license_msg::LicenseType _internal_type() const;
  void _internal_set_type(::license_msg::LicenseType value);
  public:

  // uint32 check = 2;
  void clear_check();
  ::PROTOBUF_NAMESPACE_ID::uint32 check() const;
  void set_check(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_check() const;
  void _internal_set_check(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 info_len = 3;
  void clear_info_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 info_len() const;
  void set_info_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_info_len() const;
  void _internal_set_info_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:license_msg.License)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 check_;
  ::PROTOBUF_NAMESPACE_ID::uint32 info_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_license_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class LicenseInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:license_msg.LicenseInfo) */ {
 public:
  LicenseInfo();
  virtual ~LicenseInfo();

  LicenseInfo(const LicenseInfo& from);
  LicenseInfo(LicenseInfo&& from) noexcept
    : LicenseInfo() {
    *this = ::std::move(from);
  }

  inline LicenseInfo& operator=(const LicenseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LicenseInfo& operator=(LicenseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LicenseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LicenseInfo* internal_default_instance() {
    return reinterpret_cast<const LicenseInfo*>(
               &_LicenseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LicenseInfo& a, LicenseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LicenseInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LicenseInfo* New() const final {
    return CreateMaybeMessage<LicenseInfo>(nullptr);
  }

  LicenseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LicenseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LicenseInfo& from);
  void MergeFrom(const LicenseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LicenseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "license_msg.LicenseInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_license_5fmsg_2eproto);
    return ::descriptor_table_license_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdIpFieldNumber = 1,
    kDataIpFieldNumber = 3,
    kBoxIdFieldNumber = 5,
    kPwdFieldNumber = 6,
    kManufactorFieldNumber = 7,
    kJwumqIdFieldNumber = 11,
    kCmdPortFieldNumber = 2,
    kDataPortFieldNumber = 4,
    kBeginTimeFieldNumber = 8,
    kEndTimeFieldNumber = 9,
    kReleaseIdFieldNumber = 10,
  };
  // string cmd_ip = 1;
  void clear_cmd_ip();
  const std::string& cmd_ip() const;
  void set_cmd_ip(const std::string& value);
  void set_cmd_ip(std::string&& value);
  void set_cmd_ip(const char* value);
  void set_cmd_ip(const char* value, size_t size);
  std::string* mutable_cmd_ip();
  std::string* release_cmd_ip();
  void set_allocated_cmd_ip(std::string* cmd_ip);
  private:
  const std::string& _internal_cmd_ip() const;
  void _internal_set_cmd_ip(const std::string& value);
  std::string* _internal_mutable_cmd_ip();
  public:

  // string data_ip = 3;
  void clear_data_ip();
  const std::string& data_ip() const;
  void set_data_ip(const std::string& value);
  void set_data_ip(std::string&& value);
  void set_data_ip(const char* value);
  void set_data_ip(const char* value, size_t size);
  std::string* mutable_data_ip();
  std::string* release_data_ip();
  void set_allocated_data_ip(std::string* data_ip);
  private:
  const std::string& _internal_data_ip() const;
  void _internal_set_data_ip(const std::string& value);
  std::string* _internal_mutable_data_ip();
  public:

  // string box_id = 5;
  void clear_box_id();
  const std::string& box_id() const;
  void set_box_id(const std::string& value);
  void set_box_id(std::string&& value);
  void set_box_id(const char* value);
  void set_box_id(const char* value, size_t size);
  std::string* mutable_box_id();
  std::string* release_box_id();
  void set_allocated_box_id(std::string* box_id);
  private:
  const std::string& _internal_box_id() const;
  void _internal_set_box_id(const std::string& value);
  std::string* _internal_mutable_box_id();
  public:

  // string pwd = 6;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // string manufactor = 7;
  void clear_manufactor();
  const std::string& manufactor() const;
  void set_manufactor(const std::string& value);
  void set_manufactor(std::string&& value);
  void set_manufactor(const char* value);
  void set_manufactor(const char* value, size_t size);
  std::string* mutable_manufactor();
  std::string* release_manufactor();
  void set_allocated_manufactor(std::string* manufactor);
  private:
  const std::string& _internal_manufactor() const;
  void _internal_set_manufactor(const std::string& value);
  std::string* _internal_mutable_manufactor();
  public:

  // string jwumq_id = 11;
  void clear_jwumq_id();
  const std::string& jwumq_id() const;
  void set_jwumq_id(const std::string& value);
  void set_jwumq_id(std::string&& value);
  void set_jwumq_id(const char* value);
  void set_jwumq_id(const char* value, size_t size);
  std::string* mutable_jwumq_id();
  std::string* release_jwumq_id();
  void set_allocated_jwumq_id(std::string* jwumq_id);
  private:
  const std::string& _internal_jwumq_id() const;
  void _internal_set_jwumq_id(const std::string& value);
  std::string* _internal_mutable_jwumq_id();
  public:

  // uint32 cmd_port = 2;
  void clear_cmd_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_port() const;
  void set_cmd_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cmd_port() const;
  void _internal_set_cmd_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 data_port = 4;
  void clear_data_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_port() const;
  void set_data_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_port() const;
  void _internal_set_data_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 begin_time = 8;
  void clear_begin_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_time() const;
  void set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_begin_time() const;
  void _internal_set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end_time = 9;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 release_id = 10;
  void clear_release_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 release_id() const;
  void set_release_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_release_id() const;
  void _internal_set_release_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:license_msg.LicenseInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr box_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufactor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwumq_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 release_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_license_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// License

// .license_msg.LicenseType type = 1;
inline void License::clear_type() {
  type_ = 0;
}
inline ::license_msg::LicenseType License::_internal_type() const {
  return static_cast< ::license_msg::LicenseType >(type_);
}
inline ::license_msg::LicenseType License::type() const {
  // @@protoc_insertion_point(field_get:license_msg.License.type)
  return _internal_type();
}
inline void License::_internal_set_type(::license_msg::LicenseType value) {
  
  type_ = value;
}
inline void License::set_type(::license_msg::LicenseType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:license_msg.License.type)
}

// uint32 check = 2;
inline void License::clear_check() {
  check_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 License::_internal_check() const {
  return check_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 License::check() const {
  // @@protoc_insertion_point(field_get:license_msg.License.check)
  return _internal_check();
}
inline void License::_internal_set_check(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  check_ = value;
}
inline void License::set_check(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_check(value);
  // @@protoc_insertion_point(field_set:license_msg.License.check)
}

// uint32 info_len = 3;
inline void License::clear_info_len() {
  info_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 License::_internal_info_len() const {
  return info_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 License::info_len() const {
  // @@protoc_insertion_point(field_get:license_msg.License.info_len)
  return _internal_info_len();
}
inline void License::_internal_set_info_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  info_len_ = value;
}
inline void License::set_info_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_info_len(value);
  // @@protoc_insertion_point(field_set:license_msg.License.info_len)
}

// bytes info = 4;
inline void License::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& License::info() const {
  // @@protoc_insertion_point(field_get:license_msg.License.info)
  return _internal_info();
}
inline void License::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:license_msg.License.info)
}
inline std::string* License::mutable_info() {
  // @@protoc_insertion_point(field_mutable:license_msg.License.info)
  return _internal_mutable_info();
}
inline const std::string& License::_internal_info() const {
  return info_.GetNoArena();
}
inline void License::_internal_set_info(const std::string& value) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void License::set_info(std::string&& value) {
  
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:license_msg.License.info)
}
inline void License::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:license_msg.License.info)
}
inline void License::set_info(const void* value, size_t size) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:license_msg.License.info)
}
inline std::string* License::_internal_mutable_info() {
  
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* License::release_info() {
  // @@protoc_insertion_point(field_release:license_msg.License.info)
  
  return info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void License::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:license_msg.License.info)
}

// -------------------------------------------------------------------

// LicenseInfo

// string cmd_ip = 1;
inline void LicenseInfo::clear_cmd_ip() {
  cmd_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LicenseInfo::cmd_ip() const {
  // @@protoc_insertion_point(field_get:license_msg.LicenseInfo.cmd_ip)
  return _internal_cmd_ip();
}
inline void LicenseInfo::set_cmd_ip(const std::string& value) {
  _internal_set_cmd_ip(value);
  // @@protoc_insertion_point(field_set:license_msg.LicenseInfo.cmd_ip)
}
inline std::string* LicenseInfo::mutable_cmd_ip() {
  // @@protoc_insertion_point(field_mutable:license_msg.LicenseInfo.cmd_ip)
  return _internal_mutable_cmd_ip();
}
inline const std::string& LicenseInfo::_internal_cmd_ip() const {
  return cmd_ip_.GetNoArena();
}
inline void LicenseInfo::_internal_set_cmd_ip(const std::string& value) {
  
  cmd_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LicenseInfo::set_cmd_ip(std::string&& value) {
  
  cmd_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:license_msg.LicenseInfo.cmd_ip)
}
inline void LicenseInfo::set_cmd_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:license_msg.LicenseInfo.cmd_ip)
}
inline void LicenseInfo::set_cmd_ip(const char* value, size_t size) {
  
  cmd_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:license_msg.LicenseInfo.cmd_ip)
}
inline std::string* LicenseInfo::_internal_mutable_cmd_ip() {
  
  return cmd_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LicenseInfo::release_cmd_ip() {
  // @@protoc_insertion_point(field_release:license_msg.LicenseInfo.cmd_ip)
  
  return cmd_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseInfo::set_allocated_cmd_ip(std::string* cmd_ip) {
  if (cmd_ip != nullptr) {
    
  } else {
    
  }
  cmd_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd_ip);
  // @@protoc_insertion_point(field_set_allocated:license_msg.LicenseInfo.cmd_ip)
}

// uint32 cmd_port = 2;
inline void LicenseInfo::clear_cmd_port() {
  cmd_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LicenseInfo::_internal_cmd_port() const {
  return cmd_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LicenseInfo::cmd_port() const {
  // @@protoc_insertion_point(field_get:license_msg.LicenseInfo.cmd_port)
  return _internal_cmd_port();
}
inline void LicenseInfo::_internal_set_cmd_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cmd_port_ = value;
}
inline void LicenseInfo::set_cmd_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cmd_port(value);
  // @@protoc_insertion_point(field_set:license_msg.LicenseInfo.cmd_port)
}

// string data_ip = 3;
inline void LicenseInfo::clear_data_ip() {
  data_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LicenseInfo::data_ip() const {
  // @@protoc_insertion_point(field_get:license_msg.LicenseInfo.data_ip)
  return _internal_data_ip();
}
inline void LicenseInfo::set_data_ip(const std::string& value) {
  _internal_set_data_ip(value);
  // @@protoc_insertion_point(field_set:license_msg.LicenseInfo.data_ip)
}
inline std::string* LicenseInfo::mutable_data_ip() {
  // @@protoc_insertion_point(field_mutable:license_msg.LicenseInfo.data_ip)
  return _internal_mutable_data_ip();
}
inline const std::string& LicenseInfo::_internal_data_ip() const {
  return data_ip_.GetNoArena();
}
inline void LicenseInfo::_internal_set_data_ip(const std::string& value) {
  
  data_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LicenseInfo::set_data_ip(std::string&& value) {
  
  data_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:license_msg.LicenseInfo.data_ip)
}
inline void LicenseInfo::set_data_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:license_msg.LicenseInfo.data_ip)
}
inline void LicenseInfo::set_data_ip(const char* value, size_t size) {
  
  data_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:license_msg.LicenseInfo.data_ip)
}
inline std::string* LicenseInfo::_internal_mutable_data_ip() {
  
  return data_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LicenseInfo::release_data_ip() {
  // @@protoc_insertion_point(field_release:license_msg.LicenseInfo.data_ip)
  
  return data_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseInfo::set_allocated_data_ip(std::string* data_ip) {
  if (data_ip != nullptr) {
    
  } else {
    
  }
  data_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_ip);
  // @@protoc_insertion_point(field_set_allocated:license_msg.LicenseInfo.data_ip)
}

// uint32 data_port = 4;
inline void LicenseInfo::clear_data_port() {
  data_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LicenseInfo::_internal_data_port() const {
  return data_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LicenseInfo::data_port() const {
  // @@protoc_insertion_point(field_get:license_msg.LicenseInfo.data_port)
  return _internal_data_port();
}
inline void LicenseInfo::_internal_set_data_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_port_ = value;
}
inline void LicenseInfo::set_data_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_port(value);
  // @@protoc_insertion_point(field_set:license_msg.LicenseInfo.data_port)
}

// string box_id = 5;
inline void LicenseInfo::clear_box_id() {
  box_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LicenseInfo::box_id() const {
  // @@protoc_insertion_point(field_get:license_msg.LicenseInfo.box_id)
  return _internal_box_id();
}
inline void LicenseInfo::set_box_id(const std::string& value) {
  _internal_set_box_id(value);
  // @@protoc_insertion_point(field_set:license_msg.LicenseInfo.box_id)
}
inline std::string* LicenseInfo::mutable_box_id() {
  // @@protoc_insertion_point(field_mutable:license_msg.LicenseInfo.box_id)
  return _internal_mutable_box_id();
}
inline const std::string& LicenseInfo::_internal_box_id() const {
  return box_id_.GetNoArena();
}
inline void LicenseInfo::_internal_set_box_id(const std::string& value) {
  
  box_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LicenseInfo::set_box_id(std::string&& value) {
  
  box_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:license_msg.LicenseInfo.box_id)
}
inline void LicenseInfo::set_box_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  box_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:license_msg.LicenseInfo.box_id)
}
inline void LicenseInfo::set_box_id(const char* value, size_t size) {
  
  box_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:license_msg.LicenseInfo.box_id)
}
inline std::string* LicenseInfo::_internal_mutable_box_id() {
  
  return box_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LicenseInfo::release_box_id() {
  // @@protoc_insertion_point(field_release:license_msg.LicenseInfo.box_id)
  
  return box_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseInfo::set_allocated_box_id(std::string* box_id) {
  if (box_id != nullptr) {
    
  } else {
    
  }
  box_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), box_id);
  // @@protoc_insertion_point(field_set_allocated:license_msg.LicenseInfo.box_id)
}

// string pwd = 6;
inline void LicenseInfo::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LicenseInfo::pwd() const {
  // @@protoc_insertion_point(field_get:license_msg.LicenseInfo.pwd)
  return _internal_pwd();
}
inline void LicenseInfo::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:license_msg.LicenseInfo.pwd)
}
inline std::string* LicenseInfo::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:license_msg.LicenseInfo.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& LicenseInfo::_internal_pwd() const {
  return pwd_.GetNoArena();
}
inline void LicenseInfo::_internal_set_pwd(const std::string& value) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LicenseInfo::set_pwd(std::string&& value) {
  
  pwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:license_msg.LicenseInfo.pwd)
}
inline void LicenseInfo::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:license_msg.LicenseInfo.pwd)
}
inline void LicenseInfo::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:license_msg.LicenseInfo.pwd)
}
inline std::string* LicenseInfo::_internal_mutable_pwd() {
  
  return pwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LicenseInfo::release_pwd() {
  // @@protoc_insertion_point(field_release:license_msg.LicenseInfo.pwd)
  
  return pwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseInfo::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:license_msg.LicenseInfo.pwd)
}

// string manufactor = 7;
inline void LicenseInfo::clear_manufactor() {
  manufactor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LicenseInfo::manufactor() const {
  // @@protoc_insertion_point(field_get:license_msg.LicenseInfo.manufactor)
  return _internal_manufactor();
}
inline void LicenseInfo::set_manufactor(const std::string& value) {
  _internal_set_manufactor(value);
  // @@protoc_insertion_point(field_set:license_msg.LicenseInfo.manufactor)
}
inline std::string* LicenseInfo::mutable_manufactor() {
  // @@protoc_insertion_point(field_mutable:license_msg.LicenseInfo.manufactor)
  return _internal_mutable_manufactor();
}
inline const std::string& LicenseInfo::_internal_manufactor() const {
  return manufactor_.GetNoArena();
}
inline void LicenseInfo::_internal_set_manufactor(const std::string& value) {
  
  manufactor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LicenseInfo::set_manufactor(std::string&& value) {
  
  manufactor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:license_msg.LicenseInfo.manufactor)
}
inline void LicenseInfo::set_manufactor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manufactor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:license_msg.LicenseInfo.manufactor)
}
inline void LicenseInfo::set_manufactor(const char* value, size_t size) {
  
  manufactor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:license_msg.LicenseInfo.manufactor)
}
inline std::string* LicenseInfo::_internal_mutable_manufactor() {
  
  return manufactor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LicenseInfo::release_manufactor() {
  // @@protoc_insertion_point(field_release:license_msg.LicenseInfo.manufactor)
  
  return manufactor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseInfo::set_allocated_manufactor(std::string* manufactor) {
  if (manufactor != nullptr) {
    
  } else {
    
  }
  manufactor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufactor);
  // @@protoc_insertion_point(field_set_allocated:license_msg.LicenseInfo.manufactor)
}

// uint64 begin_time = 8;
inline void LicenseInfo::clear_begin_time() {
  begin_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LicenseInfo::_internal_begin_time() const {
  return begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LicenseInfo::begin_time() const {
  // @@protoc_insertion_point(field_get:license_msg.LicenseInfo.begin_time)
  return _internal_begin_time();
}
inline void LicenseInfo::_internal_set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  begin_time_ = value;
}
inline void LicenseInfo::set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_begin_time(value);
  // @@protoc_insertion_point(field_set:license_msg.LicenseInfo.begin_time)
}

// uint64 end_time = 9;
inline void LicenseInfo::clear_end_time() {
  end_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LicenseInfo::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LicenseInfo::end_time() const {
  // @@protoc_insertion_point(field_get:license_msg.LicenseInfo.end_time)
  return _internal_end_time();
}
inline void LicenseInfo::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_time_ = value;
}
inline void LicenseInfo::set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:license_msg.LicenseInfo.end_time)
}

// uint32 release_id = 10;
inline void LicenseInfo::clear_release_id() {
  release_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LicenseInfo::_internal_release_id() const {
  return release_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LicenseInfo::release_id() const {
  // @@protoc_insertion_point(field_get:license_msg.LicenseInfo.release_id)
  return _internal_release_id();
}
inline void LicenseInfo::_internal_set_release_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  release_id_ = value;
}
inline void LicenseInfo::set_release_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_release_id(value);
  // @@protoc_insertion_point(field_set:license_msg.LicenseInfo.release_id)
}

// string jwumq_id = 11;
inline void LicenseInfo::clear_jwumq_id() {
  jwumq_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LicenseInfo::jwumq_id() const {
  // @@protoc_insertion_point(field_get:license_msg.LicenseInfo.jwumq_id)
  return _internal_jwumq_id();
}
inline void LicenseInfo::set_jwumq_id(const std::string& value) {
  _internal_set_jwumq_id(value);
  // @@protoc_insertion_point(field_set:license_msg.LicenseInfo.jwumq_id)
}
inline std::string* LicenseInfo::mutable_jwumq_id() {
  // @@protoc_insertion_point(field_mutable:license_msg.LicenseInfo.jwumq_id)
  return _internal_mutable_jwumq_id();
}
inline const std::string& LicenseInfo::_internal_jwumq_id() const {
  return jwumq_id_.GetNoArena();
}
inline void LicenseInfo::_internal_set_jwumq_id(const std::string& value) {
  
  jwumq_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LicenseInfo::set_jwumq_id(std::string&& value) {
  
  jwumq_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:license_msg.LicenseInfo.jwumq_id)
}
inline void LicenseInfo::set_jwumq_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jwumq_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:license_msg.LicenseInfo.jwumq_id)
}
inline void LicenseInfo::set_jwumq_id(const char* value, size_t size) {
  
  jwumq_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:license_msg.LicenseInfo.jwumq_id)
}
inline std::string* LicenseInfo::_internal_mutable_jwumq_id() {
  
  return jwumq_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LicenseInfo::release_jwumq_id() {
  // @@protoc_insertion_point(field_release:license_msg.LicenseInfo.jwumq_id)
  
  return jwumq_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseInfo::set_allocated_jwumq_id(std::string* jwumq_id) {
  if (jwumq_id != nullptr) {
    
  } else {
    
  }
  jwumq_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jwumq_id);
  // @@protoc_insertion_point(field_set_allocated:license_msg.LicenseInfo.jwumq_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace license_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::license_msg::LicenseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::license_msg::LicenseType>() {
  return ::license_msg::LicenseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_license_5fmsg_2eproto
