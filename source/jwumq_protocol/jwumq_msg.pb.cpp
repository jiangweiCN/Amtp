// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jwumq_msg.proto

#include "jwumq_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_jwumq_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueStatus_jwumq_5fmsg_2eproto;
namespace jwumq_pb_msg {
class PoolStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoolStatusRequest> _instance;
} _PoolStatusRequest_default_instance_;
class QueueStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueueStatus> _instance;
} _QueueStatus_default_instance_;
class PoolStatusReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoolStatusReport> _instance;
} _PoolStatusReport_default_instance_;
class SessionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionResponse> _instance;
} _SessionResponse_default_instance_;
class CreateQueueRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateQueueRequest> _instance;
} _CreateQueueRequest_default_instance_;
class CreateQueueResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateQueueResponse> _instance;
} _CreateQueueResponse_default_instance_;
class AssignedQueueRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssignedQueueRequest> _instance;
} _AssignedQueueRequest_default_instance_;
class CreatePipeQueueRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePipeQueueRequest> _instance;
} _CreatePipeQueueRequest_default_instance_;
class CreatePipeQueueResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePipeQueueResponse> _instance;
} _CreatePipeQueueResponse_default_instance_;
class CreateMemberQueueRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateMemberQueueRequest> _instance;
} _CreateMemberQueueRequest_default_instance_;
class CreateMemberQueueResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateMemberQueueResponse> _instance;
} _CreateMemberQueueResponse_default_instance_;
class CreateProducerQueueRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateProducerQueueRequest> _instance;
} _CreateProducerQueueRequest_default_instance_;
class CreateProducerQueueResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateProducerQueueResponse> _instance;
} _CreateProducerQueueResponse_default_instance_;
class CreateConsumerQueueRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateConsumerQueueRequest> _instance;
} _CreateConsumerQueueRequest_default_instance_;
class CreateConsumerQueueResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateConsumerQueueResponse> _instance;
} _CreateConsumerQueueResponse_default_instance_;
}  // namespace jwumq_pb_msg
static void InitDefaultsscc_info_AssignedQueueRequest_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_AssignedQueueRequest_default_instance_;
    new (ptr) ::jwumq_pb_msg::AssignedQueueRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::AssignedQueueRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssignedQueueRequest_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AssignedQueueRequest_jwumq_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CreateConsumerQueueRequest_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_CreateConsumerQueueRequest_default_instance_;
    new (ptr) ::jwumq_pb_msg::CreateConsumerQueueRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::CreateConsumerQueueRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateConsumerQueueRequest_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateConsumerQueueRequest_jwumq_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CreateConsumerQueueResponse_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_CreateConsumerQueueResponse_default_instance_;
    new (ptr) ::jwumq_pb_msg::CreateConsumerQueueResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::CreateConsumerQueueResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateConsumerQueueResponse_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateConsumerQueueResponse_jwumq_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CreateMemberQueueRequest_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_CreateMemberQueueRequest_default_instance_;
    new (ptr) ::jwumq_pb_msg::CreateMemberQueueRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::CreateMemberQueueRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateMemberQueueRequest_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateMemberQueueRequest_jwumq_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CreateMemberQueueResponse_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_CreateMemberQueueResponse_default_instance_;
    new (ptr) ::jwumq_pb_msg::CreateMemberQueueResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::CreateMemberQueueResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateMemberQueueResponse_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateMemberQueueResponse_jwumq_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CreatePipeQueueRequest_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_CreatePipeQueueRequest_default_instance_;
    new (ptr) ::jwumq_pb_msg::CreatePipeQueueRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::CreatePipeQueueRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePipeQueueRequest_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreatePipeQueueRequest_jwumq_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CreatePipeQueueResponse_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_CreatePipeQueueResponse_default_instance_;
    new (ptr) ::jwumq_pb_msg::CreatePipeQueueResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::CreatePipeQueueResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePipeQueueResponse_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreatePipeQueueResponse_jwumq_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CreateProducerQueueRequest_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_CreateProducerQueueRequest_default_instance_;
    new (ptr) ::jwumq_pb_msg::CreateProducerQueueRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::CreateProducerQueueRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateProducerQueueRequest_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateProducerQueueRequest_jwumq_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CreateProducerQueueResponse_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_CreateProducerQueueResponse_default_instance_;
    new (ptr) ::jwumq_pb_msg::CreateProducerQueueResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::CreateProducerQueueResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateProducerQueueResponse_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateProducerQueueResponse_jwumq_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CreateQueueRequest_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_CreateQueueRequest_default_instance_;
    new (ptr) ::jwumq_pb_msg::CreateQueueRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::CreateQueueRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateQueueRequest_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateQueueRequest_jwumq_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CreateQueueResponse_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_CreateQueueResponse_default_instance_;
    new (ptr) ::jwumq_pb_msg::CreateQueueResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::CreateQueueResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateQueueResponse_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateQueueResponse_jwumq_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_PoolStatusReport_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_PoolStatusReport_default_instance_;
    new (ptr) ::jwumq_pb_msg::PoolStatusReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::PoolStatusReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoolStatusReport_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PoolStatusReport_jwumq_5fmsg_2eproto}, {
      &scc_info_QueueStatus_jwumq_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_PoolStatusRequest_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_PoolStatusRequest_default_instance_;
    new (ptr) ::jwumq_pb_msg::PoolStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::PoolStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolStatusRequest_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoolStatusRequest_jwumq_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_QueueStatus_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_QueueStatus_default_instance_;
    new (ptr) ::jwumq_pb_msg::QueueStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::QueueStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueStatus_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueueStatus_jwumq_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_SessionResponse_jwumq_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jwumq_pb_msg::_SessionResponse_default_instance_;
    new (ptr) ::jwumq_pb_msg::SessionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jwumq_pb_msg::SessionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionResponse_jwumq_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionResponse_jwumq_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_jwumq_5fmsg_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_jwumq_5fmsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_jwumq_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_jwumq_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::PoolStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::PoolStatusRequest, sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::QueueStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::QueueStatus, name_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::QueueStatus, total_bytes_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::QueueStatus, package_count_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::QueueStatus, flow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::PoolStatusReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::PoolStatusReport, name_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::PoolStatusReport, sn_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::PoolStatusReport, private_bytes_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::PoolStatusReport, private_count_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::PoolStatusReport, access_port_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::PoolStatusReport, report_time_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::PoolStatusReport, queue_count_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::PoolStatusReport, queue_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::SessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::SessionResponse, session_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateQueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateQueueRequest, session_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateQueueRequest, queue_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateQueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateQueueResponse, session_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateQueueResponse, queue_name_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateQueueResponse, queue_port_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateQueueResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::AssignedQueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::AssignedQueueRequest, sn_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::AssignedQueueRequest, session_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::AssignedQueueRequest, queue_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreatePipeQueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreatePipeQueueRequest, queue_name_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreatePipeQueueRequest, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreatePipeQueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreatePipeQueueResponse, queue_name_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreatePipeQueueResponse, node_id_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreatePipeQueueResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateMemberQueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateMemberQueueRequest, queue_name_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateMemberQueueRequest, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateMemberQueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateMemberQueueResponse, queue_name_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateMemberQueueResponse, node_id_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateMemberQueueResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateProducerQueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateProducerQueueRequest, queue_name_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateProducerQueueRequest, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateProducerQueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateProducerQueueResponse, queue_name_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateProducerQueueResponse, node_id_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateProducerQueueResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateConsumerQueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateConsumerQueueRequest, queue_name_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateConsumerQueueRequest, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateConsumerQueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateConsumerQueueResponse, queue_name_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateConsumerQueueResponse, node_id_),
  PROTOBUF_FIELD_OFFSET(::jwumq_pb_msg::CreateConsumerQueueResponse, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::jwumq_pb_msg::PoolStatusRequest)},
  { 6, -1, sizeof(::jwumq_pb_msg::QueueStatus)},
  { 15, -1, sizeof(::jwumq_pb_msg::PoolStatusReport)},
  { 28, -1, sizeof(::jwumq_pb_msg::SessionResponse)},
  { 34, -1, sizeof(::jwumq_pb_msg::CreateQueueRequest)},
  { 41, -1, sizeof(::jwumq_pb_msg::CreateQueueResponse)},
  { 50, -1, sizeof(::jwumq_pb_msg::AssignedQueueRequest)},
  { 58, -1, sizeof(::jwumq_pb_msg::CreatePipeQueueRequest)},
  { 65, -1, sizeof(::jwumq_pb_msg::CreatePipeQueueResponse)},
  { 73, -1, sizeof(::jwumq_pb_msg::CreateMemberQueueRequest)},
  { 80, -1, sizeof(::jwumq_pb_msg::CreateMemberQueueResponse)},
  { 88, -1, sizeof(::jwumq_pb_msg::CreateProducerQueueRequest)},
  { 95, -1, sizeof(::jwumq_pb_msg::CreateProducerQueueResponse)},
  { 103, -1, sizeof(::jwumq_pb_msg::CreateConsumerQueueRequest)},
  { 110, -1, sizeof(::jwumq_pb_msg::CreateConsumerQueueResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_PoolStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_QueueStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_PoolStatusReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_SessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_CreateQueueRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_CreateQueueResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_AssignedQueueRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_CreatePipeQueueRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_CreatePipeQueueResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_CreateMemberQueueRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_CreateMemberQueueResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_CreateProducerQueueRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_CreateProducerQueueResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_CreateConsumerQueueRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jwumq_pb_msg::_CreateConsumerQueueResponse_default_instance_),
};

const char descriptor_table_protodef_jwumq_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017jwumq_msg.proto\022\014jwumq_pb_msg\"\037\n\021PoolS"
  "tatusRequest\022\n\n\002sn\030\001 \001(\r\"U\n\013QueueStatus\022"
  "\014\n\004name\030\001 \001(\t\022\023\n\013total_bytes\030\002 \001(\r\022\025\n\rpa"
  "ckage_count\030\003 \001(\r\022\014\n\004flow\030\004 \001(\002\"\312\001\n\020Pool"
  "StatusReport\022\014\n\004name\030\001 \001(\t\022\n\n\002sn\030\002 \001(\r\022\025"
  "\n\rprivate_bytes\030\003 \001(\r\022\025\n\rprivate_count\030\004"
  " \001(\r\022\023\n\013access_port\030\005 \001(\r\022\023\n\013report_time"
  "\030\006 \001(\004\022\023\n\013queue_count\030\007 \001(\r\022/\n\014queue_sta"
  "tus\030\010 \003(\0132\031.jwumq_pb_msg.QueueStatus\"\"\n\017"
  "SessionResponse\022\017\n\007session\030\001 \001(\004\"9\n\022Crea"
  "teQueueRequest\022\017\n\007session\030\001 \001(\004\022\022\n\nqueue"
  "_name\030\002 \001(\t\"\200\001\n\023CreateQueueResponse\022\017\n\007s"
  "ession\030\001 \001(\004\022\022\n\nqueue_name\030\002 \001(\t\022\022\n\nqueu"
  "e_port\030\003 \001(\r\0220\n\006result\030\004 \001(\0162 .jwumq_pb_"
  "msg.JWUMQ_MSG_RESULT_E\"G\n\024AssignedQueueR"
  "equest\022\n\n\002sn\030\001 \001(\r\022\017\n\007session\030\002 \001(\004\022\022\n\nq"
  "ueue_name\030\003 \001(\t\"=\n\026CreatePipeQueueReques"
  "t\022\022\n\nqueue_name\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\t\"p"
  "\n\027CreatePipeQueueResponse\022\022\n\nqueue_name\030"
  "\001 \001(\t\022\017\n\007node_id\030\002 \001(\t\0220\n\006result\030\003 \001(\0162 "
  ".jwumq_pb_msg.JWUMQ_MSG_RESULT_E\"\?\n\030Crea"
  "teMemberQueueRequest\022\022\n\nqueue_name\030\001 \001(\t"
  "\022\017\n\007node_id\030\002 \001(\t\"r\n\031CreateMemberQueueRe"
  "sponse\022\022\n\nqueue_name\030\001 \001(\t\022\017\n\007node_id\030\002 "
  "\001(\t\0220\n\006result\030\003 \001(\0162 .jwumq_pb_msg.JWUMQ"
  "_MSG_RESULT_E\"A\n\032CreateProducerQueueRequ"
  "est\022\022\n\nqueue_name\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\t"
  "\"t\n\033CreateProducerQueueResponse\022\022\n\nqueue"
  "_name\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\t\0220\n\006result\030\003"
  " \001(\0162 .jwumq_pb_msg.JWUMQ_MSG_RESULT_E\"A"
  "\n\032CreateConsumerQueueRequest\022\022\n\nqueue_na"
  "me\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\t\"t\n\033CreateConsu"
  "merQueueResponse\022\022\n\nqueue_name\030\001 \001(\t\022\017\n\007"
  "node_id\030\002 \001(\t\0220\n\006result\030\003 \001(\0162 .jwumq_pb"
  "_msg.JWUMQ_MSG_RESULT_E*w\n\022JWUMQ_MSG_RES"
  "ULT_E\022\013\n\007SUCCESS\020\000\022\026\n\022CREATE_QUEUE_ERROR"
  "\020\001\022\023\n\017QUEUE_NOT_EXIST\020\002\022\021\n\rQUEUE_IS_FULL"
  "\020\003\022\024\n\020QUEUE_TYPE_ERROR\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_jwumq_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_jwumq_5fmsg_2eproto_sccs[15] = {
  &scc_info_AssignedQueueRequest_jwumq_5fmsg_2eproto.base,
  &scc_info_CreateConsumerQueueRequest_jwumq_5fmsg_2eproto.base,
  &scc_info_CreateConsumerQueueResponse_jwumq_5fmsg_2eproto.base,
  &scc_info_CreateMemberQueueRequest_jwumq_5fmsg_2eproto.base,
  &scc_info_CreateMemberQueueResponse_jwumq_5fmsg_2eproto.base,
  &scc_info_CreatePipeQueueRequest_jwumq_5fmsg_2eproto.base,
  &scc_info_CreatePipeQueueResponse_jwumq_5fmsg_2eproto.base,
  &scc_info_CreateProducerQueueRequest_jwumq_5fmsg_2eproto.base,
  &scc_info_CreateProducerQueueResponse_jwumq_5fmsg_2eproto.base,
  &scc_info_CreateQueueRequest_jwumq_5fmsg_2eproto.base,
  &scc_info_CreateQueueResponse_jwumq_5fmsg_2eproto.base,
  &scc_info_PoolStatusReport_jwumq_5fmsg_2eproto.base,
  &scc_info_PoolStatusRequest_jwumq_5fmsg_2eproto.base,
  &scc_info_QueueStatus_jwumq_5fmsg_2eproto.base,
  &scc_info_SessionResponse_jwumq_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_jwumq_5fmsg_2eproto_once;
static bool descriptor_table_jwumq_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jwumq_5fmsg_2eproto = {
  &descriptor_table_jwumq_5fmsg_2eproto_initialized, descriptor_table_protodef_jwumq_5fmsg_2eproto, "jwumq_msg.proto", 1512,
  &descriptor_table_jwumq_5fmsg_2eproto_once, descriptor_table_jwumq_5fmsg_2eproto_sccs, descriptor_table_jwumq_5fmsg_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_jwumq_5fmsg_2eproto::offsets,
  file_level_metadata_jwumq_5fmsg_2eproto, 15, file_level_enum_descriptors_jwumq_5fmsg_2eproto, file_level_service_descriptors_jwumq_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_jwumq_5fmsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_jwumq_5fmsg_2eproto), true);
namespace jwumq_pb_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JWUMQ_MSG_RESULT_E_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_jwumq_5fmsg_2eproto);
  return file_level_enum_descriptors_jwumq_5fmsg_2eproto[0];
}
bool JWUMQ_MSG_RESULT_E_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PoolStatusRequest::InitAsDefaultInstance() {
}
class PoolStatusRequest::_Internal {
 public:
};

PoolStatusRequest::PoolStatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.PoolStatusRequest)
}
PoolStatusRequest::PoolStatusRequest(const PoolStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sn_ = from.sn_;
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.PoolStatusRequest)
}

void PoolStatusRequest::SharedCtor() {
  sn_ = 0u;
}

PoolStatusRequest::~PoolStatusRequest() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.PoolStatusRequest)
  SharedDtor();
}

void PoolStatusRequest::SharedDtor() {
}

void PoolStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoolStatusRequest& PoolStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoolStatusRequest_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void PoolStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.PoolStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sn_ = 0u;
  _internal_metadata_.Clear();
}

const char* PoolStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoolStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.PoolStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sn = 1;
  if (this->sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.PoolStatusRequest)
  return target;
}

size_t PoolStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.PoolStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sn = 1;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoolStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.PoolStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoolStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.PoolStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.PoolStatusRequest)
    MergeFrom(*source);
  }
}

void PoolStatusRequest::MergeFrom(const PoolStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.PoolStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn() != 0) {
    _internal_set_sn(from._internal_sn());
  }
}

void PoolStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.PoolStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolStatusRequest::CopyFrom(const PoolStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.PoolStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolStatusRequest::IsInitialized() const {
  return true;
}

void PoolStatusRequest::InternalSwap(PoolStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sn_, other->sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoolStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueueStatus::InitAsDefaultInstance() {
}
class QueueStatus::_Internal {
 public:
};

QueueStatus::QueueStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.QueueStatus)
}
QueueStatus::QueueStatus(const QueueStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&total_bytes_, &from.total_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&flow_) -
    reinterpret_cast<char*>(&total_bytes_)) + sizeof(flow_));
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.QueueStatus)
}

void QueueStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueueStatus_jwumq_5fmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flow_) -
      reinterpret_cast<char*>(&total_bytes_)) + sizeof(flow_));
}

QueueStatus::~QueueStatus() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.QueueStatus)
  SharedDtor();
}

void QueueStatus::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueueStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueueStatus& QueueStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueueStatus_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void QueueStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.QueueStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flow_) -
      reinterpret_cast<char*>(&total_bytes_)) + sizeof(flow_));
  _internal_metadata_.Clear();
}

const char* QueueStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.QueueStatus.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 package_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          package_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float flow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          flow_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueueStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.QueueStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.QueueStatus.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 total_bytes = 2;
  if (this->total_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_bytes(), target);
  }

  // uint32 package_count = 3;
  if (this->package_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_package_count(), target);
  }

  // float flow = 4;
  if (!(this->flow() <= 0 && this->flow() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_flow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.QueueStatus)
  return target;
}

size_t QueueStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.QueueStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 total_bytes = 2;
  if (this->total_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_bytes());
  }

  // uint32 package_count = 3;
  if (this->package_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_package_count());
  }

  // float flow = 4;
  if (!(this->flow() <= 0 && this->flow() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueueStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.QueueStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const QueueStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueueStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.QueueStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.QueueStatus)
    MergeFrom(*source);
  }
}

void QueueStatus::MergeFrom(const QueueStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.QueueStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.total_bytes() != 0) {
    _internal_set_total_bytes(from._internal_total_bytes());
  }
  if (from.package_count() != 0) {
    _internal_set_package_count(from._internal_package_count());
  }
  if (!(from.flow() <= 0 && from.flow() >= 0)) {
    _internal_set_flow(from._internal_flow());
  }
}

void QueueStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.QueueStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueStatus::CopyFrom(const QueueStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.QueueStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueStatus::IsInitialized() const {
  return true;
}

void QueueStatus::InternalSwap(QueueStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_bytes_, other->total_bytes_);
  swap(package_count_, other->package_count_);
  swap(flow_, other->flow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoolStatusReport::InitAsDefaultInstance() {
}
class PoolStatusReport::_Internal {
 public:
};

PoolStatusReport::PoolStatusReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.PoolStatusReport)
}
PoolStatusReport::PoolStatusReport(const PoolStatusReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      queue_status_(from.queue_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&sn_, &from.sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&queue_count_) -
    reinterpret_cast<char*>(&sn_)) + sizeof(queue_count_));
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.PoolStatusReport)
}

void PoolStatusReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoolStatusReport_jwumq_5fmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_count_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(queue_count_));
}

PoolStatusReport::~PoolStatusReport() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.PoolStatusReport)
  SharedDtor();
}

void PoolStatusReport::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PoolStatusReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoolStatusReport& PoolStatusReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoolStatusReport_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void PoolStatusReport::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.PoolStatusReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_status_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_count_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(queue_count_));
  _internal_metadata_.Clear();
}

const char* PoolStatusReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.PoolStatusReport.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 private_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          private_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 private_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          private_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 access_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          access_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 report_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          report_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 queue_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          queue_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .jwumq_pb_msg.QueueStatus queue_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queue_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoolStatusReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.PoolStatusReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.PoolStatusReport.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 sn = 2;
  if (this->sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sn(), target);
  }

  // uint32 private_bytes = 3;
  if (this->private_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_private_bytes(), target);
  }

  // uint32 private_count = 4;
  if (this->private_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_private_count(), target);
  }

  // uint32 access_port = 5;
  if (this->access_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_access_port(), target);
  }

  // uint64 report_time = 6;
  if (this->report_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_report_time(), target);
  }

  // uint32 queue_count = 7;
  if (this->queue_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_queue_count(), target);
  }

  // repeated .jwumq_pb_msg.QueueStatus queue_status = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_queue_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_queue_status(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.PoolStatusReport)
  return target;
}

size_t PoolStatusReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.PoolStatusReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jwumq_pb_msg.QueueStatus queue_status = 8;
  total_size += 1UL * this->_internal_queue_status_size();
  for (const auto& msg : this->queue_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 sn = 2;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sn());
  }

  // uint32 private_bytes = 3;
  if (this->private_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_private_bytes());
  }

  // uint32 private_count = 4;
  if (this->private_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_private_count());
  }

  // uint32 access_port = 5;
  if (this->access_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_access_port());
  }

  // uint64 report_time = 6;
  if (this->report_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_report_time());
  }

  // uint32 queue_count = 7;
  if (this->queue_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_queue_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoolStatusReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.PoolStatusReport)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolStatusReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoolStatusReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.PoolStatusReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.PoolStatusReport)
    MergeFrom(*source);
  }
}

void PoolStatusReport::MergeFrom(const PoolStatusReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.PoolStatusReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queue_status_.MergeFrom(from.queue_status_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.sn() != 0) {
    _internal_set_sn(from._internal_sn());
  }
  if (from.private_bytes() != 0) {
    _internal_set_private_bytes(from._internal_private_bytes());
  }
  if (from.private_count() != 0) {
    _internal_set_private_count(from._internal_private_count());
  }
  if (from.access_port() != 0) {
    _internal_set_access_port(from._internal_access_port());
  }
  if (from.report_time() != 0) {
    _internal_set_report_time(from._internal_report_time());
  }
  if (from.queue_count() != 0) {
    _internal_set_queue_count(from._internal_queue_count());
  }
}

void PoolStatusReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.PoolStatusReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolStatusReport::CopyFrom(const PoolStatusReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.PoolStatusReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolStatusReport::IsInitialized() const {
  return true;
}

void PoolStatusReport::InternalSwap(PoolStatusReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queue_status_.InternalSwap(&other->queue_status_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sn_, other->sn_);
  swap(private_bytes_, other->private_bytes_);
  swap(private_count_, other->private_count_);
  swap(access_port_, other->access_port_);
  swap(report_time_, other->report_time_);
  swap(queue_count_, other->queue_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoolStatusReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionResponse::InitAsDefaultInstance() {
}
class SessionResponse::_Internal {
 public:
};

SessionResponse::SessionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.SessionResponse)
}
SessionResponse::SessionResponse(const SessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_ = from.session_;
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.SessionResponse)
}

void SessionResponse::SharedCtor() {
  session_ = PROTOBUF_ULONGLONG(0);
}

SessionResponse::~SessionResponse() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.SessionResponse)
  SharedDtor();
}

void SessionResponse::SharedDtor() {
}

void SessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionResponse& SessionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionResponse_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void SessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.SessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.SessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session = 1;
  if (this->session() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.SessionResponse)
  return target;
}

size_t SessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.SessionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 session = 1;
  if (this->session() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.SessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.SessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.SessionResponse)
    MergeFrom(*source);
  }
}

void SessionResponse::MergeFrom(const SessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.SessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session() != 0) {
    _internal_set_session(from._internal_session());
  }
}

void SessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.SessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionResponse::CopyFrom(const SessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.SessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionResponse::IsInitialized() const {
  return true;
}

void SessionResponse::InternalSwap(SessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(session_, other->session_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateQueueRequest::InitAsDefaultInstance() {
}
class CreateQueueRequest::_Internal {
 public:
};

CreateQueueRequest::CreateQueueRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.CreateQueueRequest)
}
CreateQueueRequest::CreateQueueRequest(const CreateQueueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue_name().empty()) {
    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  session_ = from.session_;
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.CreateQueueRequest)
}

void CreateQueueRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateQueueRequest_jwumq_5fmsg_2eproto.base);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_ = PROTOBUF_ULONGLONG(0);
}

CreateQueueRequest::~CreateQueueRequest() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.CreateQueueRequest)
  SharedDtor();
}

void CreateQueueRequest::SharedDtor() {
  queue_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateQueueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateQueueRequest& CreateQueueRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateQueueRequest_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CreateQueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.CreateQueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CreateQueueRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string queue_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreateQueueRequest.queue_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateQueueRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.CreateQueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session = 1;
  if (this->session() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session(), target);
  }

  // string queue_name = 2;
  if (this->queue_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreateQueueRequest.queue_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_queue_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.CreateQueueRequest)
  return target;
}

size_t CreateQueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.CreateQueueRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queue_name = 2;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // uint64 session = 1;
  if (this->session() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateQueueRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.CreateQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateQueueRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateQueueRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.CreateQueueRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.CreateQueueRequest)
    MergeFrom(*source);
  }
}

void CreateQueueRequest::MergeFrom(const CreateQueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.CreateQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.session() != 0) {
    _internal_set_session(from._internal_session());
  }
}

void CreateQueueRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.CreateQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateQueueRequest::CopyFrom(const CreateQueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.CreateQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateQueueRequest::IsInitialized() const {
  return true;
}

void CreateQueueRequest::InternalSwap(CreateQueueRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queue_name_.Swap(&other->queue_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_, other->session_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateQueueRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateQueueResponse::InitAsDefaultInstance() {
}
class CreateQueueResponse::_Internal {
 public:
};

CreateQueueResponse::CreateQueueResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.CreateQueueResponse)
}
CreateQueueResponse::CreateQueueResponse(const CreateQueueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue_name().empty()) {
    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  ::memcpy(&session_, &from.session_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&session_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.CreateQueueResponse)
}

void CreateQueueResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateQueueResponse_jwumq_5fmsg_2eproto.base);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&session_)) + sizeof(result_));
}

CreateQueueResponse::~CreateQueueResponse() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.CreateQueueResponse)
  SharedDtor();
}

void CreateQueueResponse::SharedDtor() {
  queue_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateQueueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateQueueResponse& CreateQueueResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateQueueResponse_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CreateQueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.CreateQueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&session_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* CreateQueueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string queue_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreateQueueResponse.queue_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 queue_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          queue_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::jwumq_pb_msg::JWUMQ_MSG_RESULT_E>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateQueueResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.CreateQueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session = 1;
  if (this->session() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session(), target);
  }

  // string queue_name = 2;
  if (this->queue_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreateQueueResponse.queue_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_queue_name(), target);
  }

  // uint32 queue_port = 3;
  if (this->queue_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_queue_port(), target);
  }

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.CreateQueueResponse)
  return target;
}

size_t CreateQueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.CreateQueueResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queue_name = 2;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // uint64 session = 1;
  if (this->session() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session());
  }

  // uint32 queue_port = 3;
  if (this->queue_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_queue_port());
  }

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateQueueResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.CreateQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateQueueResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateQueueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.CreateQueueResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.CreateQueueResponse)
    MergeFrom(*source);
  }
}

void CreateQueueResponse::MergeFrom(const CreateQueueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.CreateQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.session() != 0) {
    _internal_set_session(from._internal_session());
  }
  if (from.queue_port() != 0) {
    _internal_set_queue_port(from._internal_queue_port());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CreateQueueResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.CreateQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateQueueResponse::CopyFrom(const CreateQueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.CreateQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateQueueResponse::IsInitialized() const {
  return true;
}

void CreateQueueResponse::InternalSwap(CreateQueueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queue_name_.Swap(&other->queue_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_, other->session_);
  swap(queue_port_, other->queue_port_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateQueueResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssignedQueueRequest::InitAsDefaultInstance() {
}
class AssignedQueueRequest::_Internal {
 public:
};

AssignedQueueRequest::AssignedQueueRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.AssignedQueueRequest)
}
AssignedQueueRequest::AssignedQueueRequest(const AssignedQueueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue_name().empty()) {
    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  ::memcpy(&session_, &from.session_,
    static_cast<size_t>(reinterpret_cast<char*>(&sn_) -
    reinterpret_cast<char*>(&session_)) + sizeof(sn_));
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.AssignedQueueRequest)
}

void AssignedQueueRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssignedQueueRequest_jwumq_5fmsg_2eproto.base);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sn_) -
      reinterpret_cast<char*>(&session_)) + sizeof(sn_));
}

AssignedQueueRequest::~AssignedQueueRequest() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.AssignedQueueRequest)
  SharedDtor();
}

void AssignedQueueRequest::SharedDtor() {
  queue_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssignedQueueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssignedQueueRequest& AssignedQueueRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssignedQueueRequest_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void AssignedQueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.AssignedQueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sn_) -
      reinterpret_cast<char*>(&session_)) + sizeof(sn_));
  _internal_metadata_.Clear();
}

const char* AssignedQueueRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string queue_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.AssignedQueueRequest.queue_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssignedQueueRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.AssignedQueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sn = 1;
  if (this->sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sn(), target);
  }

  // uint64 session = 2;
  if (this->session() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_session(), target);
  }

  // string queue_name = 3;
  if (this->queue_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.AssignedQueueRequest.queue_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_queue_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.AssignedQueueRequest)
  return target;
}

size_t AssignedQueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.AssignedQueueRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queue_name = 3;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // uint64 session = 2;
  if (this->session() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session());
  }

  // uint32 sn = 1;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssignedQueueRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.AssignedQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AssignedQueueRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssignedQueueRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.AssignedQueueRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.AssignedQueueRequest)
    MergeFrom(*source);
  }
}

void AssignedQueueRequest::MergeFrom(const AssignedQueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.AssignedQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.session() != 0) {
    _internal_set_session(from._internal_session());
  }
  if (from.sn() != 0) {
    _internal_set_sn(from._internal_sn());
  }
}

void AssignedQueueRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.AssignedQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignedQueueRequest::CopyFrom(const AssignedQueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.AssignedQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignedQueueRequest::IsInitialized() const {
  return true;
}

void AssignedQueueRequest::InternalSwap(AssignedQueueRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queue_name_.Swap(&other->queue_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_, other->session_);
  swap(sn_, other->sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignedQueueRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePipeQueueRequest::InitAsDefaultInstance() {
}
class CreatePipeQueueRequest::_Internal {
 public:
};

CreatePipeQueueRequest::CreatePipeQueueRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.CreatePipeQueueRequest)
}
CreatePipeQueueRequest::CreatePipeQueueRequest(const CreatePipeQueueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue_name().empty()) {
    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.CreatePipeQueueRequest)
}

void CreatePipeQueueRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePipeQueueRequest_jwumq_5fmsg_2eproto.base);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreatePipeQueueRequest::~CreatePipeQueueRequest() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.CreatePipeQueueRequest)
  SharedDtor();
}

void CreatePipeQueueRequest::SharedDtor() {
  queue_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePipeQueueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePipeQueueRequest& CreatePipeQueueRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePipeQueueRequest_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CreatePipeQueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.CreatePipeQueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreatePipeQueueRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string queue_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreatePipeQueueRequest.queue_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreatePipeQueueRequest.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePipeQueueRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.CreatePipeQueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreatePipeQueueRequest.queue_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_queue_name(), target);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreatePipeQueueRequest.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.CreatePipeQueueRequest)
  return target;
}

size_t CreatePipeQueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.CreatePipeQueueRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePipeQueueRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.CreatePipeQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePipeQueueRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePipeQueueRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.CreatePipeQueueRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.CreatePipeQueueRequest)
    MergeFrom(*source);
  }
}

void CreatePipeQueueRequest::MergeFrom(const CreatePipeQueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.CreatePipeQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
}

void CreatePipeQueueRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.CreatePipeQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePipeQueueRequest::CopyFrom(const CreatePipeQueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.CreatePipeQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePipeQueueRequest::IsInitialized() const {
  return true;
}

void CreatePipeQueueRequest::InternalSwap(CreatePipeQueueRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queue_name_.Swap(&other->queue_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePipeQueueRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePipeQueueResponse::InitAsDefaultInstance() {
}
class CreatePipeQueueResponse::_Internal {
 public:
};

CreatePipeQueueResponse::CreatePipeQueueResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.CreatePipeQueueResponse)
}
CreatePipeQueueResponse::CreatePipeQueueResponse(const CreatePipeQueueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue_name().empty()) {
    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.CreatePipeQueueResponse)
}

void CreatePipeQueueResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePipeQueueResponse_jwumq_5fmsg_2eproto.base);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CreatePipeQueueResponse::~CreatePipeQueueResponse() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.CreatePipeQueueResponse)
  SharedDtor();
}

void CreatePipeQueueResponse::SharedDtor() {
  queue_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePipeQueueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePipeQueueResponse& CreatePipeQueueResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePipeQueueResponse_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CreatePipeQueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.CreatePipeQueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* CreatePipeQueueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string queue_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreatePipeQueueResponse.queue_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreatePipeQueueResponse.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::jwumq_pb_msg::JWUMQ_MSG_RESULT_E>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePipeQueueResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.CreatePipeQueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreatePipeQueueResponse.queue_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_queue_name(), target);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreatePipeQueueResponse.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.CreatePipeQueueResponse)
  return target;
}

size_t CreatePipeQueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.CreatePipeQueueResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePipeQueueResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.CreatePipeQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePipeQueueResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePipeQueueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.CreatePipeQueueResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.CreatePipeQueueResponse)
    MergeFrom(*source);
  }
}

void CreatePipeQueueResponse::MergeFrom(const CreatePipeQueueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.CreatePipeQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CreatePipeQueueResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.CreatePipeQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePipeQueueResponse::CopyFrom(const CreatePipeQueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.CreatePipeQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePipeQueueResponse::IsInitialized() const {
  return true;
}

void CreatePipeQueueResponse::InternalSwap(CreatePipeQueueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queue_name_.Swap(&other->queue_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePipeQueueResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateMemberQueueRequest::InitAsDefaultInstance() {
}
class CreateMemberQueueRequest::_Internal {
 public:
};

CreateMemberQueueRequest::CreateMemberQueueRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.CreateMemberQueueRequest)
}
CreateMemberQueueRequest::CreateMemberQueueRequest(const CreateMemberQueueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue_name().empty()) {
    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.CreateMemberQueueRequest)
}

void CreateMemberQueueRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateMemberQueueRequest_jwumq_5fmsg_2eproto.base);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateMemberQueueRequest::~CreateMemberQueueRequest() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.CreateMemberQueueRequest)
  SharedDtor();
}

void CreateMemberQueueRequest::SharedDtor() {
  queue_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateMemberQueueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateMemberQueueRequest& CreateMemberQueueRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateMemberQueueRequest_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CreateMemberQueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.CreateMemberQueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateMemberQueueRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string queue_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreateMemberQueueRequest.queue_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreateMemberQueueRequest.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateMemberQueueRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.CreateMemberQueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreateMemberQueueRequest.queue_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_queue_name(), target);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreateMemberQueueRequest.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.CreateMemberQueueRequest)
  return target;
}

size_t CreateMemberQueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.CreateMemberQueueRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateMemberQueueRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.CreateMemberQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateMemberQueueRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateMemberQueueRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.CreateMemberQueueRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.CreateMemberQueueRequest)
    MergeFrom(*source);
  }
}

void CreateMemberQueueRequest::MergeFrom(const CreateMemberQueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.CreateMemberQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
}

void CreateMemberQueueRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.CreateMemberQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMemberQueueRequest::CopyFrom(const CreateMemberQueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.CreateMemberQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMemberQueueRequest::IsInitialized() const {
  return true;
}

void CreateMemberQueueRequest::InternalSwap(CreateMemberQueueRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queue_name_.Swap(&other->queue_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateMemberQueueRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateMemberQueueResponse::InitAsDefaultInstance() {
}
class CreateMemberQueueResponse::_Internal {
 public:
};

CreateMemberQueueResponse::CreateMemberQueueResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.CreateMemberQueueResponse)
}
CreateMemberQueueResponse::CreateMemberQueueResponse(const CreateMemberQueueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue_name().empty()) {
    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.CreateMemberQueueResponse)
}

void CreateMemberQueueResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateMemberQueueResponse_jwumq_5fmsg_2eproto.base);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CreateMemberQueueResponse::~CreateMemberQueueResponse() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.CreateMemberQueueResponse)
  SharedDtor();
}

void CreateMemberQueueResponse::SharedDtor() {
  queue_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateMemberQueueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateMemberQueueResponse& CreateMemberQueueResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateMemberQueueResponse_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CreateMemberQueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.CreateMemberQueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* CreateMemberQueueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string queue_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreateMemberQueueResponse.queue_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreateMemberQueueResponse.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::jwumq_pb_msg::JWUMQ_MSG_RESULT_E>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateMemberQueueResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.CreateMemberQueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreateMemberQueueResponse.queue_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_queue_name(), target);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreateMemberQueueResponse.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.CreateMemberQueueResponse)
  return target;
}

size_t CreateMemberQueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.CreateMemberQueueResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateMemberQueueResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.CreateMemberQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateMemberQueueResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateMemberQueueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.CreateMemberQueueResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.CreateMemberQueueResponse)
    MergeFrom(*source);
  }
}

void CreateMemberQueueResponse::MergeFrom(const CreateMemberQueueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.CreateMemberQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CreateMemberQueueResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.CreateMemberQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMemberQueueResponse::CopyFrom(const CreateMemberQueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.CreateMemberQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMemberQueueResponse::IsInitialized() const {
  return true;
}

void CreateMemberQueueResponse::InternalSwap(CreateMemberQueueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queue_name_.Swap(&other->queue_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateMemberQueueResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateProducerQueueRequest::InitAsDefaultInstance() {
}
class CreateProducerQueueRequest::_Internal {
 public:
};

CreateProducerQueueRequest::CreateProducerQueueRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.CreateProducerQueueRequest)
}
CreateProducerQueueRequest::CreateProducerQueueRequest(const CreateProducerQueueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue_name().empty()) {
    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.CreateProducerQueueRequest)
}

void CreateProducerQueueRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateProducerQueueRequest_jwumq_5fmsg_2eproto.base);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateProducerQueueRequest::~CreateProducerQueueRequest() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.CreateProducerQueueRequest)
  SharedDtor();
}

void CreateProducerQueueRequest::SharedDtor() {
  queue_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateProducerQueueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateProducerQueueRequest& CreateProducerQueueRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateProducerQueueRequest_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CreateProducerQueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.CreateProducerQueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateProducerQueueRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string queue_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreateProducerQueueRequest.queue_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreateProducerQueueRequest.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateProducerQueueRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.CreateProducerQueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreateProducerQueueRequest.queue_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_queue_name(), target);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreateProducerQueueRequest.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.CreateProducerQueueRequest)
  return target;
}

size_t CreateProducerQueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.CreateProducerQueueRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateProducerQueueRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.CreateProducerQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateProducerQueueRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateProducerQueueRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.CreateProducerQueueRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.CreateProducerQueueRequest)
    MergeFrom(*source);
  }
}

void CreateProducerQueueRequest::MergeFrom(const CreateProducerQueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.CreateProducerQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
}

void CreateProducerQueueRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.CreateProducerQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateProducerQueueRequest::CopyFrom(const CreateProducerQueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.CreateProducerQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProducerQueueRequest::IsInitialized() const {
  return true;
}

void CreateProducerQueueRequest::InternalSwap(CreateProducerQueueRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queue_name_.Swap(&other->queue_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProducerQueueRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateProducerQueueResponse::InitAsDefaultInstance() {
}
class CreateProducerQueueResponse::_Internal {
 public:
};

CreateProducerQueueResponse::CreateProducerQueueResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.CreateProducerQueueResponse)
}
CreateProducerQueueResponse::CreateProducerQueueResponse(const CreateProducerQueueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue_name().empty()) {
    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.CreateProducerQueueResponse)
}

void CreateProducerQueueResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateProducerQueueResponse_jwumq_5fmsg_2eproto.base);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CreateProducerQueueResponse::~CreateProducerQueueResponse() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.CreateProducerQueueResponse)
  SharedDtor();
}

void CreateProducerQueueResponse::SharedDtor() {
  queue_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateProducerQueueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateProducerQueueResponse& CreateProducerQueueResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateProducerQueueResponse_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CreateProducerQueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.CreateProducerQueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* CreateProducerQueueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string queue_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreateProducerQueueResponse.queue_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreateProducerQueueResponse.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::jwumq_pb_msg::JWUMQ_MSG_RESULT_E>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateProducerQueueResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.CreateProducerQueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreateProducerQueueResponse.queue_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_queue_name(), target);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreateProducerQueueResponse.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.CreateProducerQueueResponse)
  return target;
}

size_t CreateProducerQueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.CreateProducerQueueResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateProducerQueueResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.CreateProducerQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateProducerQueueResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateProducerQueueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.CreateProducerQueueResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.CreateProducerQueueResponse)
    MergeFrom(*source);
  }
}

void CreateProducerQueueResponse::MergeFrom(const CreateProducerQueueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.CreateProducerQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CreateProducerQueueResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.CreateProducerQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateProducerQueueResponse::CopyFrom(const CreateProducerQueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.CreateProducerQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProducerQueueResponse::IsInitialized() const {
  return true;
}

void CreateProducerQueueResponse::InternalSwap(CreateProducerQueueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queue_name_.Swap(&other->queue_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProducerQueueResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateConsumerQueueRequest::InitAsDefaultInstance() {
}
class CreateConsumerQueueRequest::_Internal {
 public:
};

CreateConsumerQueueRequest::CreateConsumerQueueRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.CreateConsumerQueueRequest)
}
CreateConsumerQueueRequest::CreateConsumerQueueRequest(const CreateConsumerQueueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue_name().empty()) {
    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.CreateConsumerQueueRequest)
}

void CreateConsumerQueueRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateConsumerQueueRequest_jwumq_5fmsg_2eproto.base);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateConsumerQueueRequest::~CreateConsumerQueueRequest() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.CreateConsumerQueueRequest)
  SharedDtor();
}

void CreateConsumerQueueRequest::SharedDtor() {
  queue_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateConsumerQueueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateConsumerQueueRequest& CreateConsumerQueueRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateConsumerQueueRequest_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CreateConsumerQueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.CreateConsumerQueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateConsumerQueueRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string queue_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreateConsumerQueueRequest.queue_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreateConsumerQueueRequest.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateConsumerQueueRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.CreateConsumerQueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreateConsumerQueueRequest.queue_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_queue_name(), target);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreateConsumerQueueRequest.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.CreateConsumerQueueRequest)
  return target;
}

size_t CreateConsumerQueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.CreateConsumerQueueRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateConsumerQueueRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.CreateConsumerQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateConsumerQueueRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateConsumerQueueRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.CreateConsumerQueueRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.CreateConsumerQueueRequest)
    MergeFrom(*source);
  }
}

void CreateConsumerQueueRequest::MergeFrom(const CreateConsumerQueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.CreateConsumerQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
}

void CreateConsumerQueueRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.CreateConsumerQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateConsumerQueueRequest::CopyFrom(const CreateConsumerQueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.CreateConsumerQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateConsumerQueueRequest::IsInitialized() const {
  return true;
}

void CreateConsumerQueueRequest::InternalSwap(CreateConsumerQueueRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queue_name_.Swap(&other->queue_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateConsumerQueueRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateConsumerQueueResponse::InitAsDefaultInstance() {
}
class CreateConsumerQueueResponse::_Internal {
 public:
};

CreateConsumerQueueResponse::CreateConsumerQueueResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jwumq_pb_msg.CreateConsumerQueueResponse)
}
CreateConsumerQueueResponse::CreateConsumerQueueResponse(const CreateConsumerQueueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue_name().empty()) {
    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:jwumq_pb_msg.CreateConsumerQueueResponse)
}

void CreateConsumerQueueResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateConsumerQueueResponse_jwumq_5fmsg_2eproto.base);
  queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CreateConsumerQueueResponse::~CreateConsumerQueueResponse() {
  // @@protoc_insertion_point(destructor:jwumq_pb_msg.CreateConsumerQueueResponse)
  SharedDtor();
}

void CreateConsumerQueueResponse::SharedDtor() {
  queue_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateConsumerQueueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateConsumerQueueResponse& CreateConsumerQueueResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateConsumerQueueResponse_jwumq_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CreateConsumerQueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jwumq_pb_msg.CreateConsumerQueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* CreateConsumerQueueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string queue_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreateConsumerQueueResponse.queue_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jwumq_pb_msg.CreateConsumerQueueResponse.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::jwumq_pb_msg::JWUMQ_MSG_RESULT_E>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateConsumerQueueResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jwumq_pb_msg.CreateConsumerQueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreateConsumerQueueResponse.queue_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_queue_name(), target);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jwumq_pb_msg.CreateConsumerQueueResponse.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jwumq_pb_msg.CreateConsumerQueueResponse)
  return target;
}

size_t CreateConsumerQueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jwumq_pb_msg.CreateConsumerQueueResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queue_name = 1;
  if (this->queue_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateConsumerQueueResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jwumq_pb_msg.CreateConsumerQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateConsumerQueueResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateConsumerQueueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jwumq_pb_msg.CreateConsumerQueueResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jwumq_pb_msg.CreateConsumerQueueResponse)
    MergeFrom(*source);
  }
}

void CreateConsumerQueueResponse::MergeFrom(const CreateConsumerQueueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jwumq_pb_msg.CreateConsumerQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_name().size() > 0) {

    queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CreateConsumerQueueResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jwumq_pb_msg.CreateConsumerQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateConsumerQueueResponse::CopyFrom(const CreateConsumerQueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jwumq_pb_msg.CreateConsumerQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateConsumerQueueResponse::IsInitialized() const {
  return true;
}

void CreateConsumerQueueResponse::InternalSwap(CreateConsumerQueueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queue_name_.Swap(&other->queue_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateConsumerQueueResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace jwumq_pb_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::PoolStatusRequest* Arena::CreateMaybeMessage< ::jwumq_pb_msg::PoolStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::PoolStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::QueueStatus* Arena::CreateMaybeMessage< ::jwumq_pb_msg::QueueStatus >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::QueueStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::PoolStatusReport* Arena::CreateMaybeMessage< ::jwumq_pb_msg::PoolStatusReport >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::PoolStatusReport >(arena);
}
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::SessionResponse* Arena::CreateMaybeMessage< ::jwumq_pb_msg::SessionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::SessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::CreateQueueRequest* Arena::CreateMaybeMessage< ::jwumq_pb_msg::CreateQueueRequest >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::CreateQueueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::CreateQueueResponse* Arena::CreateMaybeMessage< ::jwumq_pb_msg::CreateQueueResponse >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::CreateQueueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::AssignedQueueRequest* Arena::CreateMaybeMessage< ::jwumq_pb_msg::AssignedQueueRequest >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::AssignedQueueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::CreatePipeQueueRequest* Arena::CreateMaybeMessage< ::jwumq_pb_msg::CreatePipeQueueRequest >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::CreatePipeQueueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::CreatePipeQueueResponse* Arena::CreateMaybeMessage< ::jwumq_pb_msg::CreatePipeQueueResponse >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::CreatePipeQueueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::CreateMemberQueueRequest* Arena::CreateMaybeMessage< ::jwumq_pb_msg::CreateMemberQueueRequest >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::CreateMemberQueueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::CreateMemberQueueResponse* Arena::CreateMaybeMessage< ::jwumq_pb_msg::CreateMemberQueueResponse >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::CreateMemberQueueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::CreateProducerQueueRequest* Arena::CreateMaybeMessage< ::jwumq_pb_msg::CreateProducerQueueRequest >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::CreateProducerQueueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::CreateProducerQueueResponse* Arena::CreateMaybeMessage< ::jwumq_pb_msg::CreateProducerQueueResponse >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::CreateProducerQueueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::CreateConsumerQueueRequest* Arena::CreateMaybeMessage< ::jwumq_pb_msg::CreateConsumerQueueRequest >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::CreateConsumerQueueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::jwumq_pb_msg::CreateConsumerQueueResponse* Arena::CreateMaybeMessage< ::jwumq_pb_msg::CreateConsumerQueueResponse >(Arena* arena) {
  return Arena::CreateInternal< ::jwumq_pb_msg::CreateConsumerQueueResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
