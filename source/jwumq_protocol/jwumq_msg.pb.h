// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jwumq_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_jwumq_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_jwumq_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_jwumq_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_jwumq_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jwumq_5fmsg_2eproto;
namespace jwumq_pb_msg {
class AssignedQueueRequest;
class AssignedQueueRequestDefaultTypeInternal;
extern AssignedQueueRequestDefaultTypeInternal _AssignedQueueRequest_default_instance_;
class CreateConsumerQueueRequest;
class CreateConsumerQueueRequestDefaultTypeInternal;
extern CreateConsumerQueueRequestDefaultTypeInternal _CreateConsumerQueueRequest_default_instance_;
class CreateConsumerQueueResponse;
class CreateConsumerQueueResponseDefaultTypeInternal;
extern CreateConsumerQueueResponseDefaultTypeInternal _CreateConsumerQueueResponse_default_instance_;
class CreateMemberQueueRequest;
class CreateMemberQueueRequestDefaultTypeInternal;
extern CreateMemberQueueRequestDefaultTypeInternal _CreateMemberQueueRequest_default_instance_;
class CreateMemberQueueResponse;
class CreateMemberQueueResponseDefaultTypeInternal;
extern CreateMemberQueueResponseDefaultTypeInternal _CreateMemberQueueResponse_default_instance_;
class CreatePipeQueueRequest;
class CreatePipeQueueRequestDefaultTypeInternal;
extern CreatePipeQueueRequestDefaultTypeInternal _CreatePipeQueueRequest_default_instance_;
class CreatePipeQueueResponse;
class CreatePipeQueueResponseDefaultTypeInternal;
extern CreatePipeQueueResponseDefaultTypeInternal _CreatePipeQueueResponse_default_instance_;
class CreateProducerQueueRequest;
class CreateProducerQueueRequestDefaultTypeInternal;
extern CreateProducerQueueRequestDefaultTypeInternal _CreateProducerQueueRequest_default_instance_;
class CreateProducerQueueResponse;
class CreateProducerQueueResponseDefaultTypeInternal;
extern CreateProducerQueueResponseDefaultTypeInternal _CreateProducerQueueResponse_default_instance_;
class CreateQueueRequest;
class CreateQueueRequestDefaultTypeInternal;
extern CreateQueueRequestDefaultTypeInternal _CreateQueueRequest_default_instance_;
class CreateQueueResponse;
class CreateQueueResponseDefaultTypeInternal;
extern CreateQueueResponseDefaultTypeInternal _CreateQueueResponse_default_instance_;
class PoolStatusReport;
class PoolStatusReportDefaultTypeInternal;
extern PoolStatusReportDefaultTypeInternal _PoolStatusReport_default_instance_;
class PoolStatusRequest;
class PoolStatusRequestDefaultTypeInternal;
extern PoolStatusRequestDefaultTypeInternal _PoolStatusRequest_default_instance_;
class QueueStatus;
class QueueStatusDefaultTypeInternal;
extern QueueStatusDefaultTypeInternal _QueueStatus_default_instance_;
class SessionResponse;
class SessionResponseDefaultTypeInternal;
extern SessionResponseDefaultTypeInternal _SessionResponse_default_instance_;
}  // namespace jwumq_pb_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::jwumq_pb_msg::AssignedQueueRequest* Arena::CreateMaybeMessage<::jwumq_pb_msg::AssignedQueueRequest>(Arena*);
template<> ::jwumq_pb_msg::CreateConsumerQueueRequest* Arena::CreateMaybeMessage<::jwumq_pb_msg::CreateConsumerQueueRequest>(Arena*);
template<> ::jwumq_pb_msg::CreateConsumerQueueResponse* Arena::CreateMaybeMessage<::jwumq_pb_msg::CreateConsumerQueueResponse>(Arena*);
template<> ::jwumq_pb_msg::CreateMemberQueueRequest* Arena::CreateMaybeMessage<::jwumq_pb_msg::CreateMemberQueueRequest>(Arena*);
template<> ::jwumq_pb_msg::CreateMemberQueueResponse* Arena::CreateMaybeMessage<::jwumq_pb_msg::CreateMemberQueueResponse>(Arena*);
template<> ::jwumq_pb_msg::CreatePipeQueueRequest* Arena::CreateMaybeMessage<::jwumq_pb_msg::CreatePipeQueueRequest>(Arena*);
template<> ::jwumq_pb_msg::CreatePipeQueueResponse* Arena::CreateMaybeMessage<::jwumq_pb_msg::CreatePipeQueueResponse>(Arena*);
template<> ::jwumq_pb_msg::CreateProducerQueueRequest* Arena::CreateMaybeMessage<::jwumq_pb_msg::CreateProducerQueueRequest>(Arena*);
template<> ::jwumq_pb_msg::CreateProducerQueueResponse* Arena::CreateMaybeMessage<::jwumq_pb_msg::CreateProducerQueueResponse>(Arena*);
template<> ::jwumq_pb_msg::CreateQueueRequest* Arena::CreateMaybeMessage<::jwumq_pb_msg::CreateQueueRequest>(Arena*);
template<> ::jwumq_pb_msg::CreateQueueResponse* Arena::CreateMaybeMessage<::jwumq_pb_msg::CreateQueueResponse>(Arena*);
template<> ::jwumq_pb_msg::PoolStatusReport* Arena::CreateMaybeMessage<::jwumq_pb_msg::PoolStatusReport>(Arena*);
template<> ::jwumq_pb_msg::PoolStatusRequest* Arena::CreateMaybeMessage<::jwumq_pb_msg::PoolStatusRequest>(Arena*);
template<> ::jwumq_pb_msg::QueueStatus* Arena::CreateMaybeMessage<::jwumq_pb_msg::QueueStatus>(Arena*);
template<> ::jwumq_pb_msg::SessionResponse* Arena::CreateMaybeMessage<::jwumq_pb_msg::SessionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace jwumq_pb_msg {

enum JWUMQ_MSG_RESULT_E : int {
  SUCCESS = 0,
  CREATE_QUEUE_ERROR = 1,
  QUEUE_NOT_EXIST = 2,
  QUEUE_IS_FULL = 3,
  QUEUE_TYPE_ERROR = 4,
  JWUMQ_MSG_RESULT_E_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JWUMQ_MSG_RESULT_E_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool JWUMQ_MSG_RESULT_E_IsValid(int value);
constexpr JWUMQ_MSG_RESULT_E JWUMQ_MSG_RESULT_E_MIN = SUCCESS;
constexpr JWUMQ_MSG_RESULT_E JWUMQ_MSG_RESULT_E_MAX = QUEUE_TYPE_ERROR;
constexpr int JWUMQ_MSG_RESULT_E_ARRAYSIZE = JWUMQ_MSG_RESULT_E_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JWUMQ_MSG_RESULT_E_descriptor();
template<typename T>
inline const std::string& JWUMQ_MSG_RESULT_E_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JWUMQ_MSG_RESULT_E>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JWUMQ_MSG_RESULT_E_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JWUMQ_MSG_RESULT_E_descriptor(), enum_t_value);
}
inline bool JWUMQ_MSG_RESULT_E_Parse(
    const std::string& name, JWUMQ_MSG_RESULT_E* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JWUMQ_MSG_RESULT_E>(
    JWUMQ_MSG_RESULT_E_descriptor(), name, value);
}
// ===================================================================

class PoolStatusRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.PoolStatusRequest) */ {
 public:
  PoolStatusRequest();
  virtual ~PoolStatusRequest();

  PoolStatusRequest(const PoolStatusRequest& from);
  PoolStatusRequest(PoolStatusRequest&& from) noexcept
    : PoolStatusRequest() {
    *this = ::std::move(from);
  }

  inline PoolStatusRequest& operator=(const PoolStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolStatusRequest& operator=(PoolStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoolStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolStatusRequest* internal_default_instance() {
    return reinterpret_cast<const PoolStatusRequest*>(
               &_PoolStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PoolStatusRequest& a, PoolStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolStatusRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoolStatusRequest* New() const final {
    return CreateMaybeMessage<PoolStatusRequest>(nullptr);
  }

  PoolStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoolStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoolStatusRequest& from);
  void MergeFrom(const PoolStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.PoolStatusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
  };
  // uint32 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint32 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sn() const;
  void _internal_set_sn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.PoolStatusRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class QueueStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.QueueStatus) */ {
 public:
  QueueStatus();
  virtual ~QueueStatus();

  QueueStatus(const QueueStatus& from);
  QueueStatus(QueueStatus&& from) noexcept
    : QueueStatus() {
    *this = ::std::move(from);
  }

  inline QueueStatus& operator=(const QueueStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueueStatus& operator=(QueueStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueueStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueueStatus* internal_default_instance() {
    return reinterpret_cast<const QueueStatus*>(
               &_QueueStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueueStatus& a, QueueStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(QueueStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueueStatus* New() const final {
    return CreateMaybeMessage<QueueStatus>(nullptr);
  }

  QueueStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueueStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueueStatus& from);
  void MergeFrom(const QueueStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueueStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.QueueStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTotalBytesFieldNumber = 2,
    kPackageCountFieldNumber = 3,
    kFlowFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 total_bytes = 2;
  void clear_total_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_bytes() const;
  void set_total_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_bytes() const;
  void _internal_set_total_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 package_count = 3;
  void clear_package_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 package_count() const;
  void set_package_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_package_count() const;
  void _internal_set_package_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float flow = 4;
  void clear_flow();
  float flow() const;
  void set_flow(float value);
  private:
  float _internal_flow() const;
  void _internal_set_flow(float value);
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.QueueStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 package_count_;
  float flow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class PoolStatusReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.PoolStatusReport) */ {
 public:
  PoolStatusReport();
  virtual ~PoolStatusReport();

  PoolStatusReport(const PoolStatusReport& from);
  PoolStatusReport(PoolStatusReport&& from) noexcept
    : PoolStatusReport() {
    *this = ::std::move(from);
  }

  inline PoolStatusReport& operator=(const PoolStatusReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolStatusReport& operator=(PoolStatusReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoolStatusReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolStatusReport* internal_default_instance() {
    return reinterpret_cast<const PoolStatusReport*>(
               &_PoolStatusReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PoolStatusReport& a, PoolStatusReport& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolStatusReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoolStatusReport* New() const final {
    return CreateMaybeMessage<PoolStatusReport>(nullptr);
  }

  PoolStatusReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoolStatusReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoolStatusReport& from);
  void MergeFrom(const PoolStatusReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoolStatusReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.PoolStatusReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueStatusFieldNumber = 8,
    kNameFieldNumber = 1,
    kSnFieldNumber = 2,
    kPrivateBytesFieldNumber = 3,
    kPrivateCountFieldNumber = 4,
    kAccessPortFieldNumber = 5,
    kReportTimeFieldNumber = 6,
    kQueueCountFieldNumber = 7,
  };
  // repeated .jwumq_pb_msg.QueueStatus queue_status = 8;
  int queue_status_size() const;
  private:
  int _internal_queue_status_size() const;
  public:
  void clear_queue_status();
  ::jwumq_pb_msg::QueueStatus* mutable_queue_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jwumq_pb_msg::QueueStatus >*
      mutable_queue_status();
  private:
  const ::jwumq_pb_msg::QueueStatus& _internal_queue_status(int index) const;
  ::jwumq_pb_msg::QueueStatus* _internal_add_queue_status();
  public:
  const ::jwumq_pb_msg::QueueStatus& queue_status(int index) const;
  ::jwumq_pb_msg::QueueStatus* add_queue_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jwumq_pb_msg::QueueStatus >&
      queue_status() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 sn = 2;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint32 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sn() const;
  void _internal_set_sn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 private_bytes = 3;
  void clear_private_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint32 private_bytes() const;
  void set_private_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_private_bytes() const;
  void _internal_set_private_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 private_count = 4;
  void clear_private_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 private_count() const;
  void set_private_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_private_count() const;
  void _internal_set_private_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 access_port = 5;
  void clear_access_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 access_port() const;
  void set_access_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_access_port() const;
  void _internal_set_access_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 report_time = 6;
  void clear_report_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 report_time() const;
  void set_report_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_report_time() const;
  void _internal_set_report_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 queue_count = 7;
  void clear_queue_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 queue_count() const;
  void set_queue_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_queue_count() const;
  void _internal_set_queue_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.PoolStatusReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jwumq_pb_msg::QueueStatus > queue_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 private_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 private_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 access_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 report_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 queue_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class SessionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.SessionResponse) */ {
 public:
  SessionResponse();
  virtual ~SessionResponse();

  SessionResponse(const SessionResponse& from);
  SessionResponse(SessionResponse&& from) noexcept
    : SessionResponse() {
    *this = ::std::move(from);
  }

  inline SessionResponse& operator=(const SessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionResponse& operator=(SessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionResponse* internal_default_instance() {
    return reinterpret_cast<const SessionResponse*>(
               &_SessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SessionResponse& a, SessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionResponse* New() const final {
    return CreateMaybeMessage<SessionResponse>(nullptr);
  }

  SessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionResponse& from);
  void MergeFrom(const SessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.SessionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
  };
  // uint64 session = 1;
  void clear_session();
  ::PROTOBUF_NAMESPACE_ID::uint64 session() const;
  void set_session(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session() const;
  void _internal_set_session(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.SessionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class CreateQueueRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.CreateQueueRequest) */ {
 public:
  CreateQueueRequest();
  virtual ~CreateQueueRequest();

  CreateQueueRequest(const CreateQueueRequest& from);
  CreateQueueRequest(CreateQueueRequest&& from) noexcept
    : CreateQueueRequest() {
    *this = ::std::move(from);
  }

  inline CreateQueueRequest& operator=(const CreateQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateQueueRequest& operator=(CreateQueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateQueueRequest* internal_default_instance() {
    return reinterpret_cast<const CreateQueueRequest*>(
               &_CreateQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateQueueRequest& a, CreateQueueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateQueueRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateQueueRequest* New() const final {
    return CreateMaybeMessage<CreateQueueRequest>(nullptr);
  }

  CreateQueueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateQueueRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateQueueRequest& from);
  void MergeFrom(const CreateQueueRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateQueueRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.CreateQueueRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 2,
    kSessionFieldNumber = 1,
  };
  // string queue_name = 2;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // uint64 session = 1;
  void clear_session();
  ::PROTOBUF_NAMESPACE_ID::uint64 session() const;
  void set_session(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session() const;
  void _internal_set_session(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.CreateQueueRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class CreateQueueResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.CreateQueueResponse) */ {
 public:
  CreateQueueResponse();
  virtual ~CreateQueueResponse();

  CreateQueueResponse(const CreateQueueResponse& from);
  CreateQueueResponse(CreateQueueResponse&& from) noexcept
    : CreateQueueResponse() {
    *this = ::std::move(from);
  }

  inline CreateQueueResponse& operator=(const CreateQueueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateQueueResponse& operator=(CreateQueueResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateQueueResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateQueueResponse* internal_default_instance() {
    return reinterpret_cast<const CreateQueueResponse*>(
               &_CreateQueueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateQueueResponse& a, CreateQueueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateQueueResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateQueueResponse* New() const final {
    return CreateMaybeMessage<CreateQueueResponse>(nullptr);
  }

  CreateQueueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateQueueResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateQueueResponse& from);
  void MergeFrom(const CreateQueueResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateQueueResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.CreateQueueResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 2,
    kSessionFieldNumber = 1,
    kQueuePortFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // string queue_name = 2;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // uint64 session = 1;
  void clear_session();
  ::PROTOBUF_NAMESPACE_ID::uint64 session() const;
  void set_session(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session() const;
  void _internal_set_session(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 queue_port = 3;
  void clear_queue_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 queue_port() const;
  void set_queue_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_queue_port() const;
  void _internal_set_queue_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 4;
  void clear_result();
  ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E result() const;
  void set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value);
  private:
  ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E _internal_result() const;
  void _internal_set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value);
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.CreateQueueResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_;
  ::PROTOBUF_NAMESPACE_ID::uint32 queue_port_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class AssignedQueueRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.AssignedQueueRequest) */ {
 public:
  AssignedQueueRequest();
  virtual ~AssignedQueueRequest();

  AssignedQueueRequest(const AssignedQueueRequest& from);
  AssignedQueueRequest(AssignedQueueRequest&& from) noexcept
    : AssignedQueueRequest() {
    *this = ::std::move(from);
  }

  inline AssignedQueueRequest& operator=(const AssignedQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignedQueueRequest& operator=(AssignedQueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssignedQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssignedQueueRequest* internal_default_instance() {
    return reinterpret_cast<const AssignedQueueRequest*>(
               &_AssignedQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AssignedQueueRequest& a, AssignedQueueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignedQueueRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssignedQueueRequest* New() const final {
    return CreateMaybeMessage<AssignedQueueRequest>(nullptr);
  }

  AssignedQueueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssignedQueueRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssignedQueueRequest& from);
  void MergeFrom(const AssignedQueueRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignedQueueRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.AssignedQueueRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 3,
    kSessionFieldNumber = 2,
    kSnFieldNumber = 1,
  };
  // string queue_name = 3;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // uint64 session = 2;
  void clear_session();
  ::PROTOBUF_NAMESPACE_ID::uint64 session() const;
  void set_session(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session() const;
  void _internal_set_session(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint32 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sn() const;
  void _internal_set_sn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.AssignedQueueRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class CreatePipeQueueRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.CreatePipeQueueRequest) */ {
 public:
  CreatePipeQueueRequest();
  virtual ~CreatePipeQueueRequest();

  CreatePipeQueueRequest(const CreatePipeQueueRequest& from);
  CreatePipeQueueRequest(CreatePipeQueueRequest&& from) noexcept
    : CreatePipeQueueRequest() {
    *this = ::std::move(from);
  }

  inline CreatePipeQueueRequest& operator=(const CreatePipeQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePipeQueueRequest& operator=(CreatePipeQueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePipeQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePipeQueueRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePipeQueueRequest*>(
               &_CreatePipeQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreatePipeQueueRequest& a, CreatePipeQueueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePipeQueueRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePipeQueueRequest* New() const final {
    return CreateMaybeMessage<CreatePipeQueueRequest>(nullptr);
  }

  CreatePipeQueueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePipeQueueRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePipeQueueRequest& from);
  void MergeFrom(const CreatePipeQueueRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePipeQueueRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.CreatePipeQueueRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kNodeIdFieldNumber = 2,
  };
  // string queue_name = 1;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // string node_id = 2;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.CreatePipeQueueRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class CreatePipeQueueResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.CreatePipeQueueResponse) */ {
 public:
  CreatePipeQueueResponse();
  virtual ~CreatePipeQueueResponse();

  CreatePipeQueueResponse(const CreatePipeQueueResponse& from);
  CreatePipeQueueResponse(CreatePipeQueueResponse&& from) noexcept
    : CreatePipeQueueResponse() {
    *this = ::std::move(from);
  }

  inline CreatePipeQueueResponse& operator=(const CreatePipeQueueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePipeQueueResponse& operator=(CreatePipeQueueResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePipeQueueResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePipeQueueResponse* internal_default_instance() {
    return reinterpret_cast<const CreatePipeQueueResponse*>(
               &_CreatePipeQueueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreatePipeQueueResponse& a, CreatePipeQueueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePipeQueueResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePipeQueueResponse* New() const final {
    return CreateMaybeMessage<CreatePipeQueueResponse>(nullptr);
  }

  CreatePipeQueueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePipeQueueResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePipeQueueResponse& from);
  void MergeFrom(const CreatePipeQueueResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePipeQueueResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.CreatePipeQueueResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // string queue_name = 1;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // string node_id = 2;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
  void clear_result();
  ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E result() const;
  void set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value);
  private:
  ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E _internal_result() const;
  void _internal_set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value);
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.CreatePipeQueueResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class CreateMemberQueueRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.CreateMemberQueueRequest) */ {
 public:
  CreateMemberQueueRequest();
  virtual ~CreateMemberQueueRequest();

  CreateMemberQueueRequest(const CreateMemberQueueRequest& from);
  CreateMemberQueueRequest(CreateMemberQueueRequest&& from) noexcept
    : CreateMemberQueueRequest() {
    *this = ::std::move(from);
  }

  inline CreateMemberQueueRequest& operator=(const CreateMemberQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMemberQueueRequest& operator=(CreateMemberQueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateMemberQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateMemberQueueRequest* internal_default_instance() {
    return reinterpret_cast<const CreateMemberQueueRequest*>(
               &_CreateMemberQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateMemberQueueRequest& a, CreateMemberQueueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMemberQueueRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateMemberQueueRequest* New() const final {
    return CreateMaybeMessage<CreateMemberQueueRequest>(nullptr);
  }

  CreateMemberQueueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateMemberQueueRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateMemberQueueRequest& from);
  void MergeFrom(const CreateMemberQueueRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMemberQueueRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.CreateMemberQueueRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kNodeIdFieldNumber = 2,
  };
  // string queue_name = 1;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // string node_id = 2;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.CreateMemberQueueRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class CreateMemberQueueResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.CreateMemberQueueResponse) */ {
 public:
  CreateMemberQueueResponse();
  virtual ~CreateMemberQueueResponse();

  CreateMemberQueueResponse(const CreateMemberQueueResponse& from);
  CreateMemberQueueResponse(CreateMemberQueueResponse&& from) noexcept
    : CreateMemberQueueResponse() {
    *this = ::std::move(from);
  }

  inline CreateMemberQueueResponse& operator=(const CreateMemberQueueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMemberQueueResponse& operator=(CreateMemberQueueResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateMemberQueueResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateMemberQueueResponse* internal_default_instance() {
    return reinterpret_cast<const CreateMemberQueueResponse*>(
               &_CreateMemberQueueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CreateMemberQueueResponse& a, CreateMemberQueueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMemberQueueResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateMemberQueueResponse* New() const final {
    return CreateMaybeMessage<CreateMemberQueueResponse>(nullptr);
  }

  CreateMemberQueueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateMemberQueueResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateMemberQueueResponse& from);
  void MergeFrom(const CreateMemberQueueResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMemberQueueResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.CreateMemberQueueResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // string queue_name = 1;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // string node_id = 2;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
  void clear_result();
  ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E result() const;
  void set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value);
  private:
  ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E _internal_result() const;
  void _internal_set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value);
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.CreateMemberQueueResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class CreateProducerQueueRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.CreateProducerQueueRequest) */ {
 public:
  CreateProducerQueueRequest();
  virtual ~CreateProducerQueueRequest();

  CreateProducerQueueRequest(const CreateProducerQueueRequest& from);
  CreateProducerQueueRequest(CreateProducerQueueRequest&& from) noexcept
    : CreateProducerQueueRequest() {
    *this = ::std::move(from);
  }

  inline CreateProducerQueueRequest& operator=(const CreateProducerQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProducerQueueRequest& operator=(CreateProducerQueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateProducerQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateProducerQueueRequest* internal_default_instance() {
    return reinterpret_cast<const CreateProducerQueueRequest*>(
               &_CreateProducerQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CreateProducerQueueRequest& a, CreateProducerQueueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProducerQueueRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateProducerQueueRequest* New() const final {
    return CreateMaybeMessage<CreateProducerQueueRequest>(nullptr);
  }

  CreateProducerQueueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateProducerQueueRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateProducerQueueRequest& from);
  void MergeFrom(const CreateProducerQueueRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProducerQueueRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.CreateProducerQueueRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kNodeIdFieldNumber = 2,
  };
  // string queue_name = 1;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // string node_id = 2;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.CreateProducerQueueRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class CreateProducerQueueResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.CreateProducerQueueResponse) */ {
 public:
  CreateProducerQueueResponse();
  virtual ~CreateProducerQueueResponse();

  CreateProducerQueueResponse(const CreateProducerQueueResponse& from);
  CreateProducerQueueResponse(CreateProducerQueueResponse&& from) noexcept
    : CreateProducerQueueResponse() {
    *this = ::std::move(from);
  }

  inline CreateProducerQueueResponse& operator=(const CreateProducerQueueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProducerQueueResponse& operator=(CreateProducerQueueResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateProducerQueueResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateProducerQueueResponse* internal_default_instance() {
    return reinterpret_cast<const CreateProducerQueueResponse*>(
               &_CreateProducerQueueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateProducerQueueResponse& a, CreateProducerQueueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProducerQueueResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateProducerQueueResponse* New() const final {
    return CreateMaybeMessage<CreateProducerQueueResponse>(nullptr);
  }

  CreateProducerQueueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateProducerQueueResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateProducerQueueResponse& from);
  void MergeFrom(const CreateProducerQueueResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProducerQueueResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.CreateProducerQueueResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // string queue_name = 1;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // string node_id = 2;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
  void clear_result();
  ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E result() const;
  void set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value);
  private:
  ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E _internal_result() const;
  void _internal_set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value);
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.CreateProducerQueueResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class CreateConsumerQueueRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.CreateConsumerQueueRequest) */ {
 public:
  CreateConsumerQueueRequest();
  virtual ~CreateConsumerQueueRequest();

  CreateConsumerQueueRequest(const CreateConsumerQueueRequest& from);
  CreateConsumerQueueRequest(CreateConsumerQueueRequest&& from) noexcept
    : CreateConsumerQueueRequest() {
    *this = ::std::move(from);
  }

  inline CreateConsumerQueueRequest& operator=(const CreateConsumerQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateConsumerQueueRequest& operator=(CreateConsumerQueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateConsumerQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateConsumerQueueRequest* internal_default_instance() {
    return reinterpret_cast<const CreateConsumerQueueRequest*>(
               &_CreateConsumerQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CreateConsumerQueueRequest& a, CreateConsumerQueueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateConsumerQueueRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateConsumerQueueRequest* New() const final {
    return CreateMaybeMessage<CreateConsumerQueueRequest>(nullptr);
  }

  CreateConsumerQueueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateConsumerQueueRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateConsumerQueueRequest& from);
  void MergeFrom(const CreateConsumerQueueRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateConsumerQueueRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.CreateConsumerQueueRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kNodeIdFieldNumber = 2,
  };
  // string queue_name = 1;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // string node_id = 2;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.CreateConsumerQueueRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class CreateConsumerQueueResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jwumq_pb_msg.CreateConsumerQueueResponse) */ {
 public:
  CreateConsumerQueueResponse();
  virtual ~CreateConsumerQueueResponse();

  CreateConsumerQueueResponse(const CreateConsumerQueueResponse& from);
  CreateConsumerQueueResponse(CreateConsumerQueueResponse&& from) noexcept
    : CreateConsumerQueueResponse() {
    *this = ::std::move(from);
  }

  inline CreateConsumerQueueResponse& operator=(const CreateConsumerQueueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateConsumerQueueResponse& operator=(CreateConsumerQueueResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateConsumerQueueResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateConsumerQueueResponse* internal_default_instance() {
    return reinterpret_cast<const CreateConsumerQueueResponse*>(
               &_CreateConsumerQueueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CreateConsumerQueueResponse& a, CreateConsumerQueueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateConsumerQueueResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateConsumerQueueResponse* New() const final {
    return CreateMaybeMessage<CreateConsumerQueueResponse>(nullptr);
  }

  CreateConsumerQueueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateConsumerQueueResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateConsumerQueueResponse& from);
  void MergeFrom(const CreateConsumerQueueResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateConsumerQueueResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jwumq_pb_msg.CreateConsumerQueueResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jwumq_5fmsg_2eproto);
    return ::descriptor_table_jwumq_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueNameFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // string queue_name = 1;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // string node_id = 2;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
  void clear_result();
  ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E result() const;
  void set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value);
  private:
  ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E _internal_result() const;
  void _internal_set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value);
  public:

  // @@protoc_insertion_point(class_scope:jwumq_pb_msg.CreateConsumerQueueResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jwumq_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PoolStatusRequest

// uint32 sn = 1;
inline void PoolStatusRequest::clear_sn() {
  sn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolStatusRequest::_internal_sn() const {
  return sn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolStatusRequest::sn() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.PoolStatusRequest.sn)
  return _internal_sn();
}
inline void PoolStatusRequest::_internal_set_sn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sn_ = value;
}
inline void PoolStatusRequest::set_sn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.PoolStatusRequest.sn)
}

// -------------------------------------------------------------------

// QueueStatus

// string name = 1;
inline void QueueStatus::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueueStatus::name() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.QueueStatus.name)
  return _internal_name();
}
inline void QueueStatus::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.QueueStatus.name)
}
inline std::string* QueueStatus::mutable_name() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.QueueStatus.name)
  return _internal_mutable_name();
}
inline const std::string& QueueStatus::_internal_name() const {
  return name_.GetNoArena();
}
inline void QueueStatus::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueueStatus::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.QueueStatus.name)
}
inline void QueueStatus::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.QueueStatus.name)
}
inline void QueueStatus::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.QueueStatus.name)
}
inline std::string* QueueStatus::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueueStatus::release_name() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.QueueStatus.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueueStatus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.QueueStatus.name)
}

// uint32 total_bytes = 2;
inline void QueueStatus::clear_total_bytes() {
  total_bytes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueueStatus::_internal_total_bytes() const {
  return total_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueueStatus::total_bytes() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.QueueStatus.total_bytes)
  return _internal_total_bytes();
}
inline void QueueStatus::_internal_set_total_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_bytes_ = value;
}
inline void QueueStatus::set_total_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_bytes(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.QueueStatus.total_bytes)
}

// uint32 package_count = 3;
inline void QueueStatus::clear_package_count() {
  package_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueueStatus::_internal_package_count() const {
  return package_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueueStatus::package_count() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.QueueStatus.package_count)
  return _internal_package_count();
}
inline void QueueStatus::_internal_set_package_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  package_count_ = value;
}
inline void QueueStatus::set_package_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_package_count(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.QueueStatus.package_count)
}

// float flow = 4;
inline void QueueStatus::clear_flow() {
  flow_ = 0;
}
inline float QueueStatus::_internal_flow() const {
  return flow_;
}
inline float QueueStatus::flow() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.QueueStatus.flow)
  return _internal_flow();
}
inline void QueueStatus::_internal_set_flow(float value) {
  
  flow_ = value;
}
inline void QueueStatus::set_flow(float value) {
  _internal_set_flow(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.QueueStatus.flow)
}

// -------------------------------------------------------------------

// PoolStatusReport

// string name = 1;
inline void PoolStatusReport::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PoolStatusReport::name() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.PoolStatusReport.name)
  return _internal_name();
}
inline void PoolStatusReport::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.PoolStatusReport.name)
}
inline std::string* PoolStatusReport::mutable_name() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.PoolStatusReport.name)
  return _internal_mutable_name();
}
inline const std::string& PoolStatusReport::_internal_name() const {
  return name_.GetNoArena();
}
inline void PoolStatusReport::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PoolStatusReport::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.PoolStatusReport.name)
}
inline void PoolStatusReport::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.PoolStatusReport.name)
}
inline void PoolStatusReport::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.PoolStatusReport.name)
}
inline std::string* PoolStatusReport::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PoolStatusReport::release_name() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.PoolStatusReport.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PoolStatusReport::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.PoolStatusReport.name)
}

// uint32 sn = 2;
inline void PoolStatusReport::clear_sn() {
  sn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolStatusReport::_internal_sn() const {
  return sn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolStatusReport::sn() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.PoolStatusReport.sn)
  return _internal_sn();
}
inline void PoolStatusReport::_internal_set_sn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sn_ = value;
}
inline void PoolStatusReport::set_sn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.PoolStatusReport.sn)
}

// uint32 private_bytes = 3;
inline void PoolStatusReport::clear_private_bytes() {
  private_bytes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolStatusReport::_internal_private_bytes() const {
  return private_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolStatusReport::private_bytes() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.PoolStatusReport.private_bytes)
  return _internal_private_bytes();
}
inline void PoolStatusReport::_internal_set_private_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  private_bytes_ = value;
}
inline void PoolStatusReport::set_private_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_private_bytes(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.PoolStatusReport.private_bytes)
}

// uint32 private_count = 4;
inline void PoolStatusReport::clear_private_count() {
  private_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolStatusReport::_internal_private_count() const {
  return private_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolStatusReport::private_count() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.PoolStatusReport.private_count)
  return _internal_private_count();
}
inline void PoolStatusReport::_internal_set_private_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  private_count_ = value;
}
inline void PoolStatusReport::set_private_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_private_count(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.PoolStatusReport.private_count)
}

// uint32 access_port = 5;
inline void PoolStatusReport::clear_access_port() {
  access_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolStatusReport::_internal_access_port() const {
  return access_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolStatusReport::access_port() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.PoolStatusReport.access_port)
  return _internal_access_port();
}
inline void PoolStatusReport::_internal_set_access_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  access_port_ = value;
}
inline void PoolStatusReport::set_access_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_access_port(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.PoolStatusReport.access_port)
}

// uint64 report_time = 6;
inline void PoolStatusReport::clear_report_time() {
  report_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PoolStatusReport::_internal_report_time() const {
  return report_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PoolStatusReport::report_time() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.PoolStatusReport.report_time)
  return _internal_report_time();
}
inline void PoolStatusReport::_internal_set_report_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  report_time_ = value;
}
inline void PoolStatusReport::set_report_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_report_time(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.PoolStatusReport.report_time)
}

// uint32 queue_count = 7;
inline void PoolStatusReport::clear_queue_count() {
  queue_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolStatusReport::_internal_queue_count() const {
  return queue_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoolStatusReport::queue_count() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.PoolStatusReport.queue_count)
  return _internal_queue_count();
}
inline void PoolStatusReport::_internal_set_queue_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  queue_count_ = value;
}
inline void PoolStatusReport::set_queue_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_queue_count(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.PoolStatusReport.queue_count)
}

// repeated .jwumq_pb_msg.QueueStatus queue_status = 8;
inline int PoolStatusReport::_internal_queue_status_size() const {
  return queue_status_.size();
}
inline int PoolStatusReport::queue_status_size() const {
  return _internal_queue_status_size();
}
inline void PoolStatusReport::clear_queue_status() {
  queue_status_.Clear();
}
inline ::jwumq_pb_msg::QueueStatus* PoolStatusReport::mutable_queue_status(int index) {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.PoolStatusReport.queue_status)
  return queue_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jwumq_pb_msg::QueueStatus >*
PoolStatusReport::mutable_queue_status() {
  // @@protoc_insertion_point(field_mutable_list:jwumq_pb_msg.PoolStatusReport.queue_status)
  return &queue_status_;
}
inline const ::jwumq_pb_msg::QueueStatus& PoolStatusReport::_internal_queue_status(int index) const {
  return queue_status_.Get(index);
}
inline const ::jwumq_pb_msg::QueueStatus& PoolStatusReport::queue_status(int index) const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.PoolStatusReport.queue_status)
  return _internal_queue_status(index);
}
inline ::jwumq_pb_msg::QueueStatus* PoolStatusReport::_internal_add_queue_status() {
  return queue_status_.Add();
}
inline ::jwumq_pb_msg::QueueStatus* PoolStatusReport::add_queue_status() {
  // @@protoc_insertion_point(field_add:jwumq_pb_msg.PoolStatusReport.queue_status)
  return _internal_add_queue_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jwumq_pb_msg::QueueStatus >&
PoolStatusReport::queue_status() const {
  // @@protoc_insertion_point(field_list:jwumq_pb_msg.PoolStatusReport.queue_status)
  return queue_status_;
}

// -------------------------------------------------------------------

// SessionResponse

// uint64 session = 1;
inline void SessionResponse::clear_session() {
  session_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionResponse::_internal_session() const {
  return session_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionResponse::session() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.SessionResponse.session)
  return _internal_session();
}
inline void SessionResponse::_internal_set_session(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_ = value;
}
inline void SessionResponse::set_session(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.SessionResponse.session)
}

// -------------------------------------------------------------------

// CreateQueueRequest

// uint64 session = 1;
inline void CreateQueueRequest::clear_session() {
  session_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateQueueRequest::_internal_session() const {
  return session_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateQueueRequest::session() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateQueueRequest.session)
  return _internal_session();
}
inline void CreateQueueRequest::_internal_set_session(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_ = value;
}
inline void CreateQueueRequest::set_session(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateQueueRequest.session)
}

// string queue_name = 2;
inline void CreateQueueRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateQueueRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateQueueRequest.queue_name)
  return _internal_queue_name();
}
inline void CreateQueueRequest::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateQueueRequest.queue_name)
}
inline std::string* CreateQueueRequest::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreateQueueRequest.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& CreateQueueRequest::_internal_queue_name() const {
  return queue_name_.GetNoArena();
}
inline void CreateQueueRequest::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateQueueRequest::set_queue_name(std::string&& value) {
  
  queue_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreateQueueRequest.queue_name)
}
inline void CreateQueueRequest::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreateQueueRequest.queue_name)
}
inline void CreateQueueRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreateQueueRequest.queue_name)
}
inline std::string* CreateQueueRequest::_internal_mutable_queue_name() {
  
  return queue_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateQueueRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreateQueueRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateQueueRequest::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreateQueueRequest.queue_name)
}

// -------------------------------------------------------------------

// CreateQueueResponse

// uint64 session = 1;
inline void CreateQueueResponse::clear_session() {
  session_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateQueueResponse::_internal_session() const {
  return session_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateQueueResponse::session() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateQueueResponse.session)
  return _internal_session();
}
inline void CreateQueueResponse::_internal_set_session(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_ = value;
}
inline void CreateQueueResponse::set_session(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateQueueResponse.session)
}

// string queue_name = 2;
inline void CreateQueueResponse::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateQueueResponse::queue_name() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateQueueResponse.queue_name)
  return _internal_queue_name();
}
inline void CreateQueueResponse::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateQueueResponse.queue_name)
}
inline std::string* CreateQueueResponse::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreateQueueResponse.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& CreateQueueResponse::_internal_queue_name() const {
  return queue_name_.GetNoArena();
}
inline void CreateQueueResponse::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateQueueResponse::set_queue_name(std::string&& value) {
  
  queue_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreateQueueResponse.queue_name)
}
inline void CreateQueueResponse::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreateQueueResponse.queue_name)
}
inline void CreateQueueResponse::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreateQueueResponse.queue_name)
}
inline std::string* CreateQueueResponse::_internal_mutable_queue_name() {
  
  return queue_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateQueueResponse::release_queue_name() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreateQueueResponse.queue_name)
  
  return queue_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateQueueResponse::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreateQueueResponse.queue_name)
}

// uint32 queue_port = 3;
inline void CreateQueueResponse::clear_queue_port() {
  queue_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateQueueResponse::_internal_queue_port() const {
  return queue_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateQueueResponse::queue_port() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateQueueResponse.queue_port)
  return _internal_queue_port();
}
inline void CreateQueueResponse::_internal_set_queue_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  queue_port_ = value;
}
inline void CreateQueueResponse::set_queue_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_queue_port(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateQueueResponse.queue_port)
}

// .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 4;
inline void CreateQueueResponse::clear_result() {
  result_ = 0;
}
inline ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E CreateQueueResponse::_internal_result() const {
  return static_cast< ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E >(result_);
}
inline ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E CreateQueueResponse::result() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateQueueResponse.result)
  return _internal_result();
}
inline void CreateQueueResponse::_internal_set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value) {
  
  result_ = value;
}
inline void CreateQueueResponse::set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateQueueResponse.result)
}

// -------------------------------------------------------------------

// AssignedQueueRequest

// uint32 sn = 1;
inline void AssignedQueueRequest::clear_sn() {
  sn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignedQueueRequest::_internal_sn() const {
  return sn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssignedQueueRequest::sn() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.AssignedQueueRequest.sn)
  return _internal_sn();
}
inline void AssignedQueueRequest::_internal_set_sn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sn_ = value;
}
inline void AssignedQueueRequest::set_sn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.AssignedQueueRequest.sn)
}

// uint64 session = 2;
inline void AssignedQueueRequest::clear_session() {
  session_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssignedQueueRequest::_internal_session() const {
  return session_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssignedQueueRequest::session() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.AssignedQueueRequest.session)
  return _internal_session();
}
inline void AssignedQueueRequest::_internal_set_session(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_ = value;
}
inline void AssignedQueueRequest::set_session(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.AssignedQueueRequest.session)
}

// string queue_name = 3;
inline void AssignedQueueRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssignedQueueRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.AssignedQueueRequest.queue_name)
  return _internal_queue_name();
}
inline void AssignedQueueRequest::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.AssignedQueueRequest.queue_name)
}
inline std::string* AssignedQueueRequest::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.AssignedQueueRequest.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& AssignedQueueRequest::_internal_queue_name() const {
  return queue_name_.GetNoArena();
}
inline void AssignedQueueRequest::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssignedQueueRequest::set_queue_name(std::string&& value) {
  
  queue_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.AssignedQueueRequest.queue_name)
}
inline void AssignedQueueRequest::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.AssignedQueueRequest.queue_name)
}
inline void AssignedQueueRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.AssignedQueueRequest.queue_name)
}
inline std::string* AssignedQueueRequest::_internal_mutable_queue_name() {
  
  return queue_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssignedQueueRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.AssignedQueueRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssignedQueueRequest::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.AssignedQueueRequest.queue_name)
}

// -------------------------------------------------------------------

// CreatePipeQueueRequest

// string queue_name = 1;
inline void CreatePipeQueueRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePipeQueueRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreatePipeQueueRequest.queue_name)
  return _internal_queue_name();
}
inline void CreatePipeQueueRequest::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreatePipeQueueRequest.queue_name)
}
inline std::string* CreatePipeQueueRequest::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreatePipeQueueRequest.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& CreatePipeQueueRequest::_internal_queue_name() const {
  return queue_name_.GetNoArena();
}
inline void CreatePipeQueueRequest::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePipeQueueRequest::set_queue_name(std::string&& value) {
  
  queue_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreatePipeQueueRequest.queue_name)
}
inline void CreatePipeQueueRequest::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreatePipeQueueRequest.queue_name)
}
inline void CreatePipeQueueRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreatePipeQueueRequest.queue_name)
}
inline std::string* CreatePipeQueueRequest::_internal_mutable_queue_name() {
  
  return queue_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePipeQueueRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreatePipeQueueRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePipeQueueRequest::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreatePipeQueueRequest.queue_name)
}

// string node_id = 2;
inline void CreatePipeQueueRequest::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePipeQueueRequest::node_id() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreatePipeQueueRequest.node_id)
  return _internal_node_id();
}
inline void CreatePipeQueueRequest::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreatePipeQueueRequest.node_id)
}
inline std::string* CreatePipeQueueRequest::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreatePipeQueueRequest.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& CreatePipeQueueRequest::_internal_node_id() const {
  return node_id_.GetNoArena();
}
inline void CreatePipeQueueRequest::_internal_set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePipeQueueRequest::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreatePipeQueueRequest.node_id)
}
inline void CreatePipeQueueRequest::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreatePipeQueueRequest.node_id)
}
inline void CreatePipeQueueRequest::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreatePipeQueueRequest.node_id)
}
inline std::string* CreatePipeQueueRequest::_internal_mutable_node_id() {
  
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePipeQueueRequest::release_node_id() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreatePipeQueueRequest.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePipeQueueRequest::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreatePipeQueueRequest.node_id)
}

// -------------------------------------------------------------------

// CreatePipeQueueResponse

// string queue_name = 1;
inline void CreatePipeQueueResponse::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePipeQueueResponse::queue_name() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreatePipeQueueResponse.queue_name)
  return _internal_queue_name();
}
inline void CreatePipeQueueResponse::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreatePipeQueueResponse.queue_name)
}
inline std::string* CreatePipeQueueResponse::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreatePipeQueueResponse.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& CreatePipeQueueResponse::_internal_queue_name() const {
  return queue_name_.GetNoArena();
}
inline void CreatePipeQueueResponse::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePipeQueueResponse::set_queue_name(std::string&& value) {
  
  queue_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreatePipeQueueResponse.queue_name)
}
inline void CreatePipeQueueResponse::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreatePipeQueueResponse.queue_name)
}
inline void CreatePipeQueueResponse::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreatePipeQueueResponse.queue_name)
}
inline std::string* CreatePipeQueueResponse::_internal_mutable_queue_name() {
  
  return queue_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePipeQueueResponse::release_queue_name() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreatePipeQueueResponse.queue_name)
  
  return queue_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePipeQueueResponse::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreatePipeQueueResponse.queue_name)
}

// string node_id = 2;
inline void CreatePipeQueueResponse::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePipeQueueResponse::node_id() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreatePipeQueueResponse.node_id)
  return _internal_node_id();
}
inline void CreatePipeQueueResponse::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreatePipeQueueResponse.node_id)
}
inline std::string* CreatePipeQueueResponse::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreatePipeQueueResponse.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& CreatePipeQueueResponse::_internal_node_id() const {
  return node_id_.GetNoArena();
}
inline void CreatePipeQueueResponse::_internal_set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePipeQueueResponse::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreatePipeQueueResponse.node_id)
}
inline void CreatePipeQueueResponse::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreatePipeQueueResponse.node_id)
}
inline void CreatePipeQueueResponse::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreatePipeQueueResponse.node_id)
}
inline std::string* CreatePipeQueueResponse::_internal_mutable_node_id() {
  
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePipeQueueResponse::release_node_id() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreatePipeQueueResponse.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePipeQueueResponse::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreatePipeQueueResponse.node_id)
}

// .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
inline void CreatePipeQueueResponse::clear_result() {
  result_ = 0;
}
inline ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E CreatePipeQueueResponse::_internal_result() const {
  return static_cast< ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E >(result_);
}
inline ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E CreatePipeQueueResponse::result() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreatePipeQueueResponse.result)
  return _internal_result();
}
inline void CreatePipeQueueResponse::_internal_set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value) {
  
  result_ = value;
}
inline void CreatePipeQueueResponse::set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreatePipeQueueResponse.result)
}

// -------------------------------------------------------------------

// CreateMemberQueueRequest

// string queue_name = 1;
inline void CreateMemberQueueRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateMemberQueueRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateMemberQueueRequest.queue_name)
  return _internal_queue_name();
}
inline void CreateMemberQueueRequest::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateMemberQueueRequest.queue_name)
}
inline std::string* CreateMemberQueueRequest::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreateMemberQueueRequest.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& CreateMemberQueueRequest::_internal_queue_name() const {
  return queue_name_.GetNoArena();
}
inline void CreateMemberQueueRequest::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateMemberQueueRequest::set_queue_name(std::string&& value) {
  
  queue_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreateMemberQueueRequest.queue_name)
}
inline void CreateMemberQueueRequest::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreateMemberQueueRequest.queue_name)
}
inline void CreateMemberQueueRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreateMemberQueueRequest.queue_name)
}
inline std::string* CreateMemberQueueRequest::_internal_mutable_queue_name() {
  
  return queue_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateMemberQueueRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreateMemberQueueRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateMemberQueueRequest::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreateMemberQueueRequest.queue_name)
}

// string node_id = 2;
inline void CreateMemberQueueRequest::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateMemberQueueRequest::node_id() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateMemberQueueRequest.node_id)
  return _internal_node_id();
}
inline void CreateMemberQueueRequest::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateMemberQueueRequest.node_id)
}
inline std::string* CreateMemberQueueRequest::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreateMemberQueueRequest.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& CreateMemberQueueRequest::_internal_node_id() const {
  return node_id_.GetNoArena();
}
inline void CreateMemberQueueRequest::_internal_set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateMemberQueueRequest::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreateMemberQueueRequest.node_id)
}
inline void CreateMemberQueueRequest::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreateMemberQueueRequest.node_id)
}
inline void CreateMemberQueueRequest::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreateMemberQueueRequest.node_id)
}
inline std::string* CreateMemberQueueRequest::_internal_mutable_node_id() {
  
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateMemberQueueRequest::release_node_id() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreateMemberQueueRequest.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateMemberQueueRequest::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreateMemberQueueRequest.node_id)
}

// -------------------------------------------------------------------

// CreateMemberQueueResponse

// string queue_name = 1;
inline void CreateMemberQueueResponse::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateMemberQueueResponse::queue_name() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateMemberQueueResponse.queue_name)
  return _internal_queue_name();
}
inline void CreateMemberQueueResponse::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateMemberQueueResponse.queue_name)
}
inline std::string* CreateMemberQueueResponse::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreateMemberQueueResponse.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& CreateMemberQueueResponse::_internal_queue_name() const {
  return queue_name_.GetNoArena();
}
inline void CreateMemberQueueResponse::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateMemberQueueResponse::set_queue_name(std::string&& value) {
  
  queue_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreateMemberQueueResponse.queue_name)
}
inline void CreateMemberQueueResponse::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreateMemberQueueResponse.queue_name)
}
inline void CreateMemberQueueResponse::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreateMemberQueueResponse.queue_name)
}
inline std::string* CreateMemberQueueResponse::_internal_mutable_queue_name() {
  
  return queue_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateMemberQueueResponse::release_queue_name() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreateMemberQueueResponse.queue_name)
  
  return queue_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateMemberQueueResponse::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreateMemberQueueResponse.queue_name)
}

// string node_id = 2;
inline void CreateMemberQueueResponse::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateMemberQueueResponse::node_id() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateMemberQueueResponse.node_id)
  return _internal_node_id();
}
inline void CreateMemberQueueResponse::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateMemberQueueResponse.node_id)
}
inline std::string* CreateMemberQueueResponse::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreateMemberQueueResponse.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& CreateMemberQueueResponse::_internal_node_id() const {
  return node_id_.GetNoArena();
}
inline void CreateMemberQueueResponse::_internal_set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateMemberQueueResponse::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreateMemberQueueResponse.node_id)
}
inline void CreateMemberQueueResponse::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreateMemberQueueResponse.node_id)
}
inline void CreateMemberQueueResponse::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreateMemberQueueResponse.node_id)
}
inline std::string* CreateMemberQueueResponse::_internal_mutable_node_id() {
  
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateMemberQueueResponse::release_node_id() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreateMemberQueueResponse.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateMemberQueueResponse::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreateMemberQueueResponse.node_id)
}

// .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
inline void CreateMemberQueueResponse::clear_result() {
  result_ = 0;
}
inline ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E CreateMemberQueueResponse::_internal_result() const {
  return static_cast< ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E >(result_);
}
inline ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E CreateMemberQueueResponse::result() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateMemberQueueResponse.result)
  return _internal_result();
}
inline void CreateMemberQueueResponse::_internal_set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value) {
  
  result_ = value;
}
inline void CreateMemberQueueResponse::set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateMemberQueueResponse.result)
}

// -------------------------------------------------------------------

// CreateProducerQueueRequest

// string queue_name = 1;
inline void CreateProducerQueueRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateProducerQueueRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateProducerQueueRequest.queue_name)
  return _internal_queue_name();
}
inline void CreateProducerQueueRequest::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateProducerQueueRequest.queue_name)
}
inline std::string* CreateProducerQueueRequest::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreateProducerQueueRequest.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& CreateProducerQueueRequest::_internal_queue_name() const {
  return queue_name_.GetNoArena();
}
inline void CreateProducerQueueRequest::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateProducerQueueRequest::set_queue_name(std::string&& value) {
  
  queue_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreateProducerQueueRequest.queue_name)
}
inline void CreateProducerQueueRequest::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreateProducerQueueRequest.queue_name)
}
inline void CreateProducerQueueRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreateProducerQueueRequest.queue_name)
}
inline std::string* CreateProducerQueueRequest::_internal_mutable_queue_name() {
  
  return queue_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateProducerQueueRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreateProducerQueueRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateProducerQueueRequest::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreateProducerQueueRequest.queue_name)
}

// string node_id = 2;
inline void CreateProducerQueueRequest::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateProducerQueueRequest::node_id() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateProducerQueueRequest.node_id)
  return _internal_node_id();
}
inline void CreateProducerQueueRequest::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateProducerQueueRequest.node_id)
}
inline std::string* CreateProducerQueueRequest::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreateProducerQueueRequest.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& CreateProducerQueueRequest::_internal_node_id() const {
  return node_id_.GetNoArena();
}
inline void CreateProducerQueueRequest::_internal_set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateProducerQueueRequest::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreateProducerQueueRequest.node_id)
}
inline void CreateProducerQueueRequest::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreateProducerQueueRequest.node_id)
}
inline void CreateProducerQueueRequest::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreateProducerQueueRequest.node_id)
}
inline std::string* CreateProducerQueueRequest::_internal_mutable_node_id() {
  
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateProducerQueueRequest::release_node_id() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreateProducerQueueRequest.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateProducerQueueRequest::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreateProducerQueueRequest.node_id)
}

// -------------------------------------------------------------------

// CreateProducerQueueResponse

// string queue_name = 1;
inline void CreateProducerQueueResponse::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateProducerQueueResponse::queue_name() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateProducerQueueResponse.queue_name)
  return _internal_queue_name();
}
inline void CreateProducerQueueResponse::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateProducerQueueResponse.queue_name)
}
inline std::string* CreateProducerQueueResponse::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreateProducerQueueResponse.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& CreateProducerQueueResponse::_internal_queue_name() const {
  return queue_name_.GetNoArena();
}
inline void CreateProducerQueueResponse::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateProducerQueueResponse::set_queue_name(std::string&& value) {
  
  queue_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreateProducerQueueResponse.queue_name)
}
inline void CreateProducerQueueResponse::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreateProducerQueueResponse.queue_name)
}
inline void CreateProducerQueueResponse::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreateProducerQueueResponse.queue_name)
}
inline std::string* CreateProducerQueueResponse::_internal_mutable_queue_name() {
  
  return queue_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateProducerQueueResponse::release_queue_name() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreateProducerQueueResponse.queue_name)
  
  return queue_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateProducerQueueResponse::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreateProducerQueueResponse.queue_name)
}

// string node_id = 2;
inline void CreateProducerQueueResponse::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateProducerQueueResponse::node_id() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateProducerQueueResponse.node_id)
  return _internal_node_id();
}
inline void CreateProducerQueueResponse::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateProducerQueueResponse.node_id)
}
inline std::string* CreateProducerQueueResponse::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreateProducerQueueResponse.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& CreateProducerQueueResponse::_internal_node_id() const {
  return node_id_.GetNoArena();
}
inline void CreateProducerQueueResponse::_internal_set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateProducerQueueResponse::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreateProducerQueueResponse.node_id)
}
inline void CreateProducerQueueResponse::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreateProducerQueueResponse.node_id)
}
inline void CreateProducerQueueResponse::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreateProducerQueueResponse.node_id)
}
inline std::string* CreateProducerQueueResponse::_internal_mutable_node_id() {
  
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateProducerQueueResponse::release_node_id() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreateProducerQueueResponse.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateProducerQueueResponse::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreateProducerQueueResponse.node_id)
}

// .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
inline void CreateProducerQueueResponse::clear_result() {
  result_ = 0;
}
inline ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E CreateProducerQueueResponse::_internal_result() const {
  return static_cast< ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E >(result_);
}
inline ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E CreateProducerQueueResponse::result() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateProducerQueueResponse.result)
  return _internal_result();
}
inline void CreateProducerQueueResponse::_internal_set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value) {
  
  result_ = value;
}
inline void CreateProducerQueueResponse::set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateProducerQueueResponse.result)
}

// -------------------------------------------------------------------

// CreateConsumerQueueRequest

// string queue_name = 1;
inline void CreateConsumerQueueRequest::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateConsumerQueueRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateConsumerQueueRequest.queue_name)
  return _internal_queue_name();
}
inline void CreateConsumerQueueRequest::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateConsumerQueueRequest.queue_name)
}
inline std::string* CreateConsumerQueueRequest::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreateConsumerQueueRequest.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& CreateConsumerQueueRequest::_internal_queue_name() const {
  return queue_name_.GetNoArena();
}
inline void CreateConsumerQueueRequest::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateConsumerQueueRequest::set_queue_name(std::string&& value) {
  
  queue_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreateConsumerQueueRequest.queue_name)
}
inline void CreateConsumerQueueRequest::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreateConsumerQueueRequest.queue_name)
}
inline void CreateConsumerQueueRequest::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreateConsumerQueueRequest.queue_name)
}
inline std::string* CreateConsumerQueueRequest::_internal_mutable_queue_name() {
  
  return queue_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateConsumerQueueRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreateConsumerQueueRequest.queue_name)
  
  return queue_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateConsumerQueueRequest::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreateConsumerQueueRequest.queue_name)
}

// string node_id = 2;
inline void CreateConsumerQueueRequest::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateConsumerQueueRequest::node_id() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateConsumerQueueRequest.node_id)
  return _internal_node_id();
}
inline void CreateConsumerQueueRequest::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateConsumerQueueRequest.node_id)
}
inline std::string* CreateConsumerQueueRequest::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreateConsumerQueueRequest.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& CreateConsumerQueueRequest::_internal_node_id() const {
  return node_id_.GetNoArena();
}
inline void CreateConsumerQueueRequest::_internal_set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateConsumerQueueRequest::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreateConsumerQueueRequest.node_id)
}
inline void CreateConsumerQueueRequest::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreateConsumerQueueRequest.node_id)
}
inline void CreateConsumerQueueRequest::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreateConsumerQueueRequest.node_id)
}
inline std::string* CreateConsumerQueueRequest::_internal_mutable_node_id() {
  
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateConsumerQueueRequest::release_node_id() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreateConsumerQueueRequest.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateConsumerQueueRequest::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreateConsumerQueueRequest.node_id)
}

// -------------------------------------------------------------------

// CreateConsumerQueueResponse

// string queue_name = 1;
inline void CreateConsumerQueueResponse::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateConsumerQueueResponse::queue_name() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateConsumerQueueResponse.queue_name)
  return _internal_queue_name();
}
inline void CreateConsumerQueueResponse::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateConsumerQueueResponse.queue_name)
}
inline std::string* CreateConsumerQueueResponse::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreateConsumerQueueResponse.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& CreateConsumerQueueResponse::_internal_queue_name() const {
  return queue_name_.GetNoArena();
}
inline void CreateConsumerQueueResponse::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateConsumerQueueResponse::set_queue_name(std::string&& value) {
  
  queue_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreateConsumerQueueResponse.queue_name)
}
inline void CreateConsumerQueueResponse::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreateConsumerQueueResponse.queue_name)
}
inline void CreateConsumerQueueResponse::set_queue_name(const char* value, size_t size) {
  
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreateConsumerQueueResponse.queue_name)
}
inline std::string* CreateConsumerQueueResponse::_internal_mutable_queue_name() {
  
  return queue_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateConsumerQueueResponse::release_queue_name() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreateConsumerQueueResponse.queue_name)
  
  return queue_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateConsumerQueueResponse::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreateConsumerQueueResponse.queue_name)
}

// string node_id = 2;
inline void CreateConsumerQueueResponse::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateConsumerQueueResponse::node_id() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateConsumerQueueResponse.node_id)
  return _internal_node_id();
}
inline void CreateConsumerQueueResponse::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateConsumerQueueResponse.node_id)
}
inline std::string* CreateConsumerQueueResponse::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:jwumq_pb_msg.CreateConsumerQueueResponse.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& CreateConsumerQueueResponse::_internal_node_id() const {
  return node_id_.GetNoArena();
}
inline void CreateConsumerQueueResponse::_internal_set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateConsumerQueueResponse::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jwumq_pb_msg.CreateConsumerQueueResponse.node_id)
}
inline void CreateConsumerQueueResponse::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jwumq_pb_msg.CreateConsumerQueueResponse.node_id)
}
inline void CreateConsumerQueueResponse::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jwumq_pb_msg.CreateConsumerQueueResponse.node_id)
}
inline std::string* CreateConsumerQueueResponse::_internal_mutable_node_id() {
  
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateConsumerQueueResponse::release_node_id() {
  // @@protoc_insertion_point(field_release:jwumq_pb_msg.CreateConsumerQueueResponse.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateConsumerQueueResponse::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:jwumq_pb_msg.CreateConsumerQueueResponse.node_id)
}

// .jwumq_pb_msg.JWUMQ_MSG_RESULT_E result = 3;
inline void CreateConsumerQueueResponse::clear_result() {
  result_ = 0;
}
inline ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E CreateConsumerQueueResponse::_internal_result() const {
  return static_cast< ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E >(result_);
}
inline ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E CreateConsumerQueueResponse::result() const {
  // @@protoc_insertion_point(field_get:jwumq_pb_msg.CreateConsumerQueueResponse.result)
  return _internal_result();
}
inline void CreateConsumerQueueResponse::_internal_set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value) {
  
  result_ = value;
}
inline void CreateConsumerQueueResponse::set_result(::jwumq_pb_msg::JWUMQ_MSG_RESULT_E value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:jwumq_pb_msg.CreateConsumerQueueResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace jwumq_pb_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E>() {
  return ::jwumq_pb_msg::JWUMQ_MSG_RESULT_E_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_jwumq_5fmsg_2eproto
